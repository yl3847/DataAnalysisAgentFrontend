{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { isFunction, isNumber, isObject, isString } from '@antv/util';\nimport { cloneFormatData, isArray } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nimport { parseSize } from './util/size';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  nodeSize: 30,\n  nodeSpacing: 10,\n  preventOverlap: false,\n  sweep: undefined,\n  equidistant: false,\n  startAngle: 3 / 2 * Math.PI,\n  clockwise: true,\n  maxLevelDiff: undefined,\n  sortBy: 'degree'\n};\n/**\n * <zh/> 同心圆布局\n *\n * <en/> Concentric layout\n */\nexport class ConcentricLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'concentric';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericConcentricLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericConcentricLayout(true, graph, options);\n    });\n  }\n  genericConcentricLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n      const {\n        center: propsCenter,\n        width: propsWidth,\n        height: propsHeight,\n        sortBy: propsSortBy,\n        maxLevelDiff: propsMaxLevelDiff,\n        sweep: propsSweep,\n        clockwise,\n        equidistant,\n        preventOverlap,\n        startAngle = 3 / 2 * Math.PI,\n        nodeSize,\n        nodeSpacing\n      } = mergedOptions;\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n      const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n      const center = !propsCenter ? [width / 2, height / 2] : propsCenter;\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n        return handleSingleNodeGraph(graph, assign, center);\n      }\n      const layoutNodes = [];\n      let maxNodeSize;\n      let maxNodeSpacing = 0;\n      if (isArray(nodeSize)) {\n        maxNodeSize = Math.max(nodeSize[0], nodeSize[1]);\n      } else if (isFunction(nodeSize)) {\n        maxNodeSize = -Infinity;\n        nodes.forEach(node => {\n          const currentSize = Math.max(...parseSize(nodeSize(node)));\n          if (currentSize > maxNodeSize) maxNodeSize = currentSize;\n        });\n      } else {\n        maxNodeSize = nodeSize;\n      }\n      if (isArray(nodeSpacing)) {\n        maxNodeSpacing = Math.max(nodeSpacing[0], nodeSpacing[1]);\n      } else if (isNumber(nodeSpacing)) {\n        maxNodeSpacing = nodeSpacing;\n      }\n      nodes.forEach(node => {\n        const cnode = cloneFormatData(node);\n        layoutNodes.push(cnode);\n        let nodeSize = maxNodeSize;\n        const {\n          data\n        } = cnode;\n        if (isArray(data.size)) {\n          nodeSize = Math.max(data.size[0], data.size[1]);\n        } else if (isNumber(data.size)) {\n          nodeSize = data.size;\n        } else if (isObject(data.size)) {\n          nodeSize = Math.max(data.size.width, data.size.height);\n        }\n        maxNodeSize = Math.max(maxNodeSize, nodeSize);\n        if (isFunction(nodeSpacing)) {\n          maxNodeSpacing = Math.max(nodeSpacing(node), maxNodeSpacing);\n        }\n      });\n      // layout\n      const nodeIdxMap = {};\n      layoutNodes.forEach((node, i) => {\n        nodeIdxMap[node.id] = i;\n      });\n      // get the node degrees\n      let sortBy = propsSortBy;\n      if (!isString(sortBy) || layoutNodes[0].data[sortBy] === undefined) {\n        sortBy = 'degree';\n      }\n      if (sortBy === 'degree') {\n        layoutNodes.sort((n1, n2) => graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n      } else {\n        // sort nodes by value\n        layoutNodes.sort((n1, n2) => n2.data[sortBy] - n1.data[sortBy]);\n      }\n      const maxValueNode = layoutNodes[0];\n      const maxLevelDiff = (propsMaxLevelDiff || (sortBy === 'degree' ? graph.getDegree(maxValueNode.id, 'both') : maxValueNode.data[sortBy])) / 4;\n      // put the values into levels\n      const levels = [{\n        nodes: []\n      }];\n      let currentLevel = levels[0];\n      layoutNodes.forEach(node => {\n        if (currentLevel.nodes.length > 0) {\n          const diff = sortBy === 'degree' ? Math.abs(graph.getDegree(currentLevel.nodes[0].id, 'both') - graph.getDegree(node.id, 'both')) : Math.abs(currentLevel.nodes[0].data[sortBy] - node.data[sortBy]);\n          if (maxLevelDiff && diff >= maxLevelDiff) {\n            currentLevel = {\n              nodes: []\n            };\n            levels.push(currentLevel);\n          }\n        }\n        currentLevel.nodes.push(node);\n      });\n      // create positions for levels\n      let minDist = maxNodeSize + maxNodeSpacing; // min dist between nodes\n      if (!preventOverlap) {\n        // then strictly constrain to bb\n        const firstLvlHasMulti = levels.length > 0 && levels[0].nodes.length > 1;\n        const maxR = Math.min(width, height) / 2 - minDist;\n        const rStep = maxR / (levels.length + (firstLvlHasMulti ? 1 : 0));\n        minDist = Math.min(minDist, rStep);\n      }\n      // find the metrics for each level\n      let r = 0;\n      levels.forEach(level => {\n        const sweep = propsSweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.nodes.length : propsSweep;\n        level.dTheta = sweep / Math.max(1, level.nodes.length - 1);\n        // calculate the radius\n        if (level.nodes.length > 1 && preventOverlap) {\n          // but only if more than one node (can't overlap)\n          const dcos = Math.cos(level.dTheta) - Math.cos(0);\n          const dsin = Math.sin(level.dTheta) - Math.sin(0);\n          const rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n          r = Math.max(rMin, r);\n        }\n        level.r = r;\n        r += minDist;\n      });\n      if (equidistant) {\n        let rDeltaMax = 0;\n        let rr = 0;\n        for (let i = 0; i < levels.length; i++) {\n          const level = levels[i];\n          const rDelta = (level.r || 0) - rr;\n          rDeltaMax = Math.max(rDeltaMax, rDelta);\n        }\n        rr = 0;\n        levels.forEach((level, i) => {\n          if (i === 0) {\n            rr = level.r || 0;\n          }\n          level.r = rr;\n          rr += rDeltaMax;\n        });\n      }\n      // calculate the node positions\n      levels.forEach(level => {\n        const dTheta = level.dTheta || 0;\n        const rr = level.r || 0;\n        level.nodes.forEach((node, j) => {\n          const theta = startAngle + (clockwise ? 1 : -1) * dTheta * j;\n          node.data.x = center[0] + rr * Math.cos(theta);\n          node.data.y = center[1] + rr * Math.sin(theta);\n        });\n      });\n      if (assign) {\n        layoutNodes.forEach(node => graph.mergeNodeData(node.id, {\n          x: node.data.x,\n          y: node.data.y\n        }));\n      }\n      const result = {\n        nodes: layoutNodes,\n        edges\n      };\n      return result;\n    });\n  }\n}","map":{"version":3,"names":["isFunction","isNumber","isObject","isString","cloneFormatData","isArray","handleSingleNodeGraph","parseSize","DEFAULTS_LAYOUT_OPTIONS","nodeSize","nodeSpacing","preventOverlap","sweep","undefined","equidistant","startAngle","Math","PI","clockwise","maxLevelDiff","sortBy","ConcentricLayout","constructor","options","id","Object","assign","execute","graph","genericConcentricLayout","mergedOptions","center","propsCenter","width","propsWidth","height","propsHeight","propsSortBy","propsMaxLevelDiff","propsSweep","nodes","getAllNodes","edges","getAllEdges","window","innerWidth","innerHeight","length","layoutNodes","maxNodeSize","maxNodeSpacing","max","Infinity","forEach","node","currentSize","cnode","push","data","size","nodeIdxMap","i","sort","n1","n2","getDegree","maxValueNode","levels","currentLevel","diff","abs","minDist","firstLvlHasMulti","maxR","min","rStep","r","level","dTheta","dcos","cos","dsin","sin","rMin","sqrt","rDeltaMax","rr","rDelta","j","theta","x","y","mergeNodeData","result"],"sources":["../src/concentric.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}