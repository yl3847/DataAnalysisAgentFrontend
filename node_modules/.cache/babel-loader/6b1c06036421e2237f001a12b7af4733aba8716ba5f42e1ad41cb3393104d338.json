{"ast":null,"code":"import { deepMix } from '@antv/util';\nfunction range(direction, iterationCount, keyframeCount) {\n  const start = 0;\n  const end = keyframeCount;\n  const normal = [start, end];\n  const reverse = [-end + 1, -start + 1];\n  if (direction === 'normal') return normal;\n  if (direction === 'reverse') return reverse;\n  if (direction === 'alternate') {\n    return iterationCount % 2 === 0 ? normal : reverse;\n  }\n  if (direction === 'reverse-alternate') {\n    return iterationCount % 2 === 0 ? reverse : normal;\n  }\n}\n/**\n * Set animation options for all descendants.\n */\nfunction setAnimation(node, duration, easing) {\n  const discovered = [node];\n  while (discovered.length) {\n    const n = discovered.pop();\n    n.animate = deepMix({\n      enter: {\n        duration\n      },\n      update: {\n        duration,\n        easing,\n        type: 'morphing',\n        fill: 'both'\n      },\n      exit: {\n        type: 'fadeOut',\n        duration\n      }\n    }, n.animate || {});\n    const {\n      children\n    } = n;\n    if (Array.isArray(children)) discovered.push(...children);\n  }\n  return node;\n}\n/**\n * @todo More options, such as fill, totalDuration...\n */\nexport const TimingKeyframe = () => {\n  return options => {\n    const {\n      children = [],\n      duration = 1000,\n      iterationCount = 1,\n      direction = 'normal',\n      easing = 'ease-in-out-sine'\n    } = options;\n    const n = children.length;\n    if (!Array.isArray(children) || n === 0) return [];\n    const {\n      key\n    } = children[0];\n    const newChildren = children.map(d => Object.assign(Object.assign({}, d), {\n      key\n    })).map(d => setAnimation(d, duration, easing));\n    return function* () {\n      let count = 0;\n      let prevIndex;\n      while (iterationCount === 'infinite' || count < iterationCount) {\n        const [start, end] = range(direction, count, n);\n        for (let i = start; i < end; i += 1) {\n          // For reverse direction, the range is from negative to negative\n          // so the absolute value of i is the real index for newChildren.\n          const index = Math.abs(i);\n          // This is for preventing alternate or reverse-alternate keyframe\n          // to yield two same node one by one when the direction change.\n          if (prevIndex !== index) yield newChildren[index];\n          prevIndex = index;\n        }\n        count++;\n      }\n    };\n  };\n};\nTimingKeyframe.props = {};","map":{"version":3,"names":["deepMix","range","direction","iterationCount","keyframeCount","start","end","normal","reverse","setAnimation","node","duration","easing","discovered","length","n","pop","animate","enter","update","type","fill","exit","children","Array","isArray","push","TimingKeyframe","options","key","newChildren","map","d","Object","assign","count","prevIndex","i","index","Math","abs","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/composition/timingKeyframe.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { CompositionComponent as CC, G2ViewTree } from '../runtime';\nimport { TimingKeyframeComposition } from '../spec';\n\nexport type TimingKeyframeOptions = Omit<TimingKeyframeComposition, 'type'>;\n\nfunction range(\n  direction: TimingKeyframeComposition['direction'],\n  iterationCount: number,\n  keyframeCount: number,\n): [number, number] {\n  const start = 0;\n  const end = keyframeCount;\n  const normal: [number, number] = [start, end];\n  const reverse: [number, number] = [-end + 1, -start + 1];\n  if (direction === 'normal') return normal;\n  if (direction === 'reverse') return reverse;\n  if (direction === 'alternate') {\n    return iterationCount % 2 === 0 ? normal : reverse;\n  }\n  if (direction === 'reverse-alternate') {\n    return iterationCount % 2 === 0 ? reverse : normal;\n  }\n}\n\n/**\n * Set animation options for all descendants.\n */\nfunction setAnimation(node: G2ViewTree, duration: number, easing: string) {\n  const discovered = [node];\n  while (discovered.length) {\n    const n = discovered.pop();\n    n.animate = deepMix(\n      {\n        enter: {\n          duration,\n        },\n        update: {\n          duration,\n          easing,\n          type: 'morphing',\n          fill: 'both',\n        },\n        exit: {\n          type: 'fadeOut',\n          duration,\n        },\n      },\n      n.animate || {},\n    );\n    const { children } = n;\n    if (Array.isArray(children)) discovered.push(...children);\n  }\n  return node;\n}\n\n/**\n * @todo More options, such as fill, totalDuration...\n */\nexport const TimingKeyframe: CC<TimingKeyframeOptions> = () => {\n  return (options) => {\n    const {\n      children = [],\n      duration = 1000,\n      iterationCount = 1,\n      direction = 'normal',\n      easing = 'ease-in-out-sine',\n    } = options;\n    const n = children.length;\n    if (!Array.isArray(children) || n === 0) return [];\n    const { key } = children[0];\n    const newChildren = children\n      .map((d) => ({ ...d, key }))\n      .map((d) => setAnimation(d, duration, easing));\n    return function* () {\n      let count = 0;\n      let prevIndex: number;\n      while (iterationCount === 'infinite' || count < iterationCount) {\n        const [start, end] = range(direction, count, n);\n        for (let i = start; i < end; i += 1) {\n          // For reverse direction, the range is from negative to negative\n          // so the absolute value of i is the real index for newChildren.\n          const index = Math.abs(i);\n          // This is for preventing alternate or reverse-alternate keyframe\n          // to yield two same node one by one when the direction change.\n          if (prevIndex !== index) yield newChildren[index];\n          prevIndex = index;\n        }\n        count++;\n      }\n    };\n  };\n};\n\nTimingKeyframe.props = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}