{"ast":null,"code":"import { COMBO_KEY } from '../constants';\nimport { isCollapsed } from '../utils/collapsibility';\nimport { getSubgraphRelatedEdges } from '../utils/edge';\nimport { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\nimport { reassignTo } from './utils';\n/**\n * <zh/> 处理组合的收起和展开\n *\n * <en/> Process the collapse and expand of combos\n */\nexport class CollapseExpandCombo extends BaseTransform {\n  beforeDraw(input, context) {\n    if (context.stage === 'visibility') return input;\n    if (!this.context.model.model.hasTreeStructure(COMBO_KEY)) return input;\n    const {\n      model\n    } = this.context;\n    const {\n      add,\n      update\n    } = input;\n    // combo 添加和更新的顺序为先子后父，因此采用倒序遍历\n    // The order of adding and updating combos is first child and then parent, so reverse traversal is used\n    const combos = [...input.update.combos.entries(), ...input.add.combos.entries()];\n    while (combos.length) {\n      const [id, combo] = combos.pop();\n      if (isCollapsed(combo)) {\n        const descendants = model.getDescendantsData(id);\n        const descendantIds = descendants.map(idOf);\n        const {\n          internal,\n          external\n        } = getSubgraphRelatedEdges(descendantIds, id => model.getRelatedEdgesData(id));\n        // 移除所有后代元素 / Remove all descendant elements\n        descendants.forEach(descendant => {\n          const descendantId = idOf(descendant);\n          // 不再处理当前 combo 的后代 combo\n          // No longer process the descendant combo of the current combo\n          const comboIndex = combos.findIndex(([id]) => id === descendantId);\n          if (comboIndex !== -1) combos.splice(comboIndex, 1);\n          const elementType = model.getElementType(descendantId);\n          reassignTo(input, 'remove', elementType, descendant);\n        });\n        // 如果是内部边/节点 销毁\n        // If it is an internal edge/node, destroy it\n        internal.forEach(edge => reassignTo(input, 'remove', 'edge', edge));\n        // 如果是外部边，连接到收起对象上\n        // If it is an external edge, connect to the collapsed object\n        external.forEach(edge => {\n          var _a;\n          const id = idOf(edge);\n          const edgeElement = (_a = this.context.element) === null || _a === void 0 ? void 0 : _a.getElement(id);\n          if (edgeElement) update.edges.set(id, edge);else add.edges.set(id, edge);\n        });\n      } else {\n        const children = model.getChildrenData(id);\n        const childrenIds = children.map(idOf);\n        const {\n          edges\n        } = getSubgraphRelatedEdges(childrenIds, id => model.getRelatedEdgesData(id));\n        [...children, ...edges].forEach(descendant => {\n          var _a;\n          const id = idOf(descendant);\n          const elementType = model.getElementType(id);\n          const element = (_a = this.context.element) === null || _a === void 0 ? void 0 : _a.getElement(id);\n          // 如果节点不存在，则添加到新增列表，如果存在，添加到更新列表\n          // If the node does not exist, add it to the new list, if it exists, add it to the update list\n          if (element) reassignTo(input, 'update', elementType, descendant);else reassignTo(input, 'add', elementType, descendant);\n          // 继续展开子节点 / Continue to expand child nodes\n          if (elementType === 'combo') combos.push([id, descendant]);\n        });\n      }\n    }\n    return input;\n  }\n}","map":{"version":3,"names":["COMBO_KEY","isCollapsed","getSubgraphRelatedEdges","idOf","BaseTransform","reassignTo","CollapseExpandCombo","beforeDraw","input","context","stage","model","hasTreeStructure","add","update","combos","entries","length","id","combo","pop","descendants","getDescendantsData","descendantIds","map","internal","external","getRelatedEdgesData","forEach","descendant","descendantId","comboIndex","findIndex","splice","elementType","getElementType","edge","edgeElement","_a","element","getElement","edges","set","children","getChildrenData","childrenIds","push"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/transforms/collapse-expand-combo.ts"],"sourcesContent":["import { COMBO_KEY } from '../constants';\nimport type { DrawContext } from '../runtime/element';\nimport type { ComboData } from '../spec';\nimport { isCollapsed } from '../utils/collapsibility';\nimport { getSubgraphRelatedEdges } from '../utils/edge';\nimport { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\nimport type { DrawData } from './types';\nimport { reassignTo } from './utils';\n\n/**\n * <zh/> 处理组合的收起和展开\n *\n * <en/> Process the collapse and expand of combos\n */\nexport class CollapseExpandCombo extends BaseTransform {\n  public beforeDraw(input: DrawData, context: DrawContext): DrawData {\n    if (context.stage === 'visibility') return input;\n    if (!this.context.model.model.hasTreeStructure(COMBO_KEY)) return input;\n\n    const { model } = this.context;\n    const { add, update } = input;\n    // combo 添加和更新的顺序为先子后父，因此采用倒序遍历\n    // The order of adding and updating combos is first child and then parent, so reverse traversal is used\n    const combos = [...input.update.combos.entries(), ...input.add.combos.entries()];\n    while (combos.length) {\n      const [id, combo] = combos.pop()!;\n\n      if (isCollapsed(combo)) {\n        const descendants = model.getDescendantsData(id);\n        const descendantIds = descendants.map(idOf);\n        const { internal, external } = getSubgraphRelatedEdges(descendantIds, (id) => model.getRelatedEdgesData(id));\n\n        // 移除所有后代元素 / Remove all descendant elements\n        descendants.forEach((descendant) => {\n          const descendantId = idOf(descendant);\n          // 不再处理当前 combo 的后代 combo\n          // No longer process the descendant combo of the current combo\n          const comboIndex = combos.findIndex(([id]) => id === descendantId);\n          if (comboIndex !== -1) combos.splice(comboIndex, 1);\n\n          const elementType = model.getElementType(descendantId);\n          reassignTo(input, 'remove', elementType, descendant);\n        });\n\n        // 如果是内部边/节点 销毁\n        // If it is an internal edge/node, destroy it\n        internal.forEach((edge) => reassignTo(input, 'remove', 'edge', edge));\n\n        // 如果是外部边，连接到收起对象上\n        // If it is an external edge, connect to the collapsed object\n        external.forEach((edge) => {\n          const id = idOf(edge);\n          const edgeElement = this.context.element?.getElement(id);\n          if (edgeElement) update.edges.set(id, edge);\n          else add.edges.set(id, edge);\n        });\n      } else {\n        const children = model.getChildrenData(id);\n        const childrenIds = children.map(idOf);\n        const { edges } = getSubgraphRelatedEdges(childrenIds, (id) => model.getRelatedEdgesData(id));\n\n        [...children, ...edges].forEach((descendant) => {\n          const id = idOf(descendant);\n          const elementType = model.getElementType(id);\n\n          const element = this.context.element?.getElement(id);\n          // 如果节点不存在，则添加到新增列表，如果存在，添加到更新列表\n          // If the node does not exist, add it to the new list, if it exists, add it to the update list\n          if (element) reassignTo(input, 'update', elementType, descendant);\n          else reassignTo(input, 'add', elementType, descendant);\n\n          // 继续展开子节点 / Continue to expand child nodes\n          if (elementType === 'combo') combos.push([id, descendant as ComboData]);\n        });\n      }\n    }\n\n    return input;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}