{"ast":null,"code":"import { isPointInPolygon } from './is-point-in-polygon';\nvar isBetween = function (value, min, max) {\n  return value >= min && value <= max;\n};\nfunction getLineIntersect(p0, p1, p2, p3) {\n  var tolerance = 0.001;\n  var E = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y\n  };\n  var D0 = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y\n  };\n  var D1 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y\n  };\n  var kross = D0.x * D1.y - D0.y * D1.x;\n  var sqrKross = kross * kross;\n  var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n  var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n  var point = null;\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    var s = (E.x * D1.y - E.y * D1.x) / kross;\n    var t = (E.x * D0.y - E.y * D0.x) / kross;\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y\n      };\n    }\n  }\n  return point;\n}\nfunction parseToLines(points) {\n  var lines = [];\n  var count = points.length;\n  for (var i = 0; i < count - 1; i++) {\n    var point = points[i];\n    var next = points[i + 1];\n    lines.push({\n      from: {\n        x: point[0],\n        y: point[1]\n      },\n      to: {\n        x: next[0],\n        y: next[1]\n      }\n    });\n  }\n  if (lines.length > 1) {\n    var first = points[0];\n    var last = points[count - 1];\n    lines.push({\n      from: {\n        x: last[0],\n        y: last[1]\n      },\n      to: {\n        x: first[0],\n        y: first[1]\n      }\n    });\n  }\n  return lines;\n}\nfunction lineIntersectPolygon(lines, line) {\n  var isIntersect = false;\n  lines.forEach(function (l) {\n    if (getLineIntersect(l.from, l.to, line.from, line.to)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}\nfunction getBBox(points) {\n  var xArr = points.map(function (p) {\n    return p[0];\n  });\n  var yArr = points.map(function (p) {\n    return p[1];\n  });\n  return {\n    minX: Math.min.apply(null, xArr),\n    maxX: Math.max.apply(null, xArr),\n    minY: Math.min.apply(null, yArr),\n    maxY: Math.max.apply(null, yArr)\n  };\n}\nfunction intersectBBox(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n/**\n * @see https://stackoverflow.com/questions/753140/how-do-i-determine-if-two-convex-polygons-intersect\n */\nexport function isPolygonsIntersect(points1, points2) {\n  // 空数组，或者一个点返回 false\n  if (points1.length < 2 || points2.length < 2) {\n    return false;\n  }\n  var bbox1 = getBBox(points1);\n  var bbox2 = getBBox(points2);\n  // 判定包围盒是否相交，比判定点是否在多边形内要快的多，可以筛选掉大多数情况\n  if (!intersectBBox(bbox1, bbox2)) {\n    return false;\n  }\n  var isIn = false;\n  // 判定点是否在多边形内部，一旦有一个点在另一个多边形内，则返回\n  points2.forEach(function (point) {\n    if (isPointInPolygon(points1, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n  if (isIn) {\n    return true;\n  }\n  // 两个多边形都需要判定\n  points1.forEach(function (point) {\n    if (isPointInPolygon(points2, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n  if (isIn) {\n    return true;\n  }\n  var lines1 = parseToLines(points1);\n  var lines2 = parseToLines(points2);\n  var isIntersect = false;\n  lines2.forEach(function (line) {\n    if (lineIntersectPolygon(lines1, line)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}","map":{"version":3,"names":["isPointInPolygon","isBetween","value","min","max","getLineIntersect","p0","p1","p2","p3","tolerance","E","x","y","D0","D1","kross","sqrKross","sqrLen0","sqrLen1","point","s","t","parseToLines","points","lines","count","length","i","next","push","from","to","first","last","lineIntersectPolygon","line","isIntersect","forEach","l","getBBox","xArr","map","p","yArr","minX","Math","apply","maxX","minY","maxY","intersectBBox","box1","box2","isPolygonsIntersect","points1","points2","bbox1","bbox2","isIn","lines1","lines2"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/math/is-polygons-intersect.ts"],"sourcesContent":["import { isPointInPolygon } from './is-point-in-polygon';\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype Line = {\n  from: Point;\n  to: Point;\n};\n\nconst isBetween = (value: number, min: number, max: number) => value >= min && value <= max;\nfunction getLineIntersect(p0: Point, p1: Point, p2: Point, p3: Point): Point | null {\n  const tolerance = 0.001;\n  const E: Point = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y,\n  };\n  const D0: Point = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y,\n  };\n  const D1: Point = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n  };\n  const kross: number = D0.x * D1.y - D0.y * D1.x;\n  const sqrKross: number = kross * kross;\n  const sqrLen0: number = D0.x * D0.x + D0.y * D0.y;\n  const sqrLen1: number = D1.x * D1.x + D1.y * D1.y;\n  let point: Point | null = null;\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    const s = (E.x * D1.y - E.y * D1.x) / kross;\n    const t = (E.x * D0.y - E.y * D0.x) / kross;\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y,\n      };\n    }\n  }\n  return point;\n}\n\nfunction parseToLines(points: number[][]): Line[] {\n  const lines = [];\n  const count = points.length;\n  for (let i = 0; i < count - 1; i++) {\n    const point = points[i];\n    const next = points[i + 1];\n    lines.push({\n      from: {\n        x: point[0],\n        y: point[1],\n      },\n      to: {\n        x: next[0],\n        y: next[1],\n      },\n    });\n  }\n  if (lines.length > 1) {\n    const first = points[0];\n    const last = points[count - 1];\n    lines.push({\n      from: {\n        x: last[0],\n        y: last[1],\n      },\n      to: {\n        x: first[0],\n        y: first[1],\n      },\n    });\n  }\n  return lines;\n}\n\nfunction lineIntersectPolygon(lines: Line[], line: Line) {\n  let isIntersect = false;\n  lines.forEach((l) => {\n    if (getLineIntersect(l.from, l.to, line.from, line.to)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}\n\ntype BBox = {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n};\n\nfunction getBBox(points: number[][]): BBox {\n  const xArr = points.map((p) => p[0]);\n  const yArr = points.map((p) => p[1]);\n  return {\n    minX: Math.min.apply(null, xArr),\n    maxX: Math.max.apply(null, xArr),\n    minY: Math.min.apply(null, yArr),\n    maxY: Math.max.apply(null, yArr),\n  };\n}\n\nfunction intersectBBox(box1: BBox, box2: BBox) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n\n/**\n * @see https://stackoverflow.com/questions/753140/how-do-i-determine-if-two-convex-polygons-intersect\n */\nexport function isPolygonsIntersect(points1: number[][], points2: number[][]) {\n  // 空数组，或者一个点返回 false\n  if (points1.length < 2 || points2.length < 2) {\n    return false;\n  }\n\n  const bbox1 = getBBox(points1);\n  const bbox2 = getBBox(points2);\n  // 判定包围盒是否相交，比判定点是否在多边形内要快的多，可以筛选掉大多数情况\n  if (!intersectBBox(bbox1, bbox2)) {\n    return false;\n  }\n\n  let isIn = false;\n  // 判定点是否在多边形内部，一旦有一个点在另一个多边形内，则返回\n  points2.forEach((point) => {\n    if (isPointInPolygon(points1, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n  if (isIn) {\n    return true;\n  }\n  // 两个多边形都需要判定\n  points1.forEach((point) => {\n    if (isPointInPolygon(points2, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n  if (isIn) {\n    return true;\n  }\n\n  const lines1 = parseToLines(points1);\n  const lines2 = parseToLines(points2);\n  let isIntersect = false;\n  lines2.forEach((line) => {\n    if (lineIntersectPolygon(lines1, line)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,uBAAuB;AAYxD,IAAMC,SAAS,GAAG,SAAAA,CAACC,KAAa,EAAEC,GAAW,EAAEC,GAAW;EAAK,OAAAF,KAAK,IAAIC,GAAG,IAAID,KAAK,IAAIE,GAAG;AAA5B,CAA4B;AAC3F,SAASC,gBAAgBA,CAACC,EAAS,EAAEC,EAAS,EAAEC,EAAS,EAAEC,EAAS;EAClE,IAAMC,SAAS,GAAG,KAAK;EACvB,IAAMC,CAAC,GAAU;IACfC,CAAC,EAAEJ,EAAE,CAACI,CAAC,GAAGN,EAAE,CAACM,CAAC;IACdC,CAAC,EAAEL,EAAE,CAACK,CAAC,GAAGP,EAAE,CAACO;GACd;EACD,IAAMC,EAAE,GAAU;IAChBF,CAAC,EAAEL,EAAE,CAACK,CAAC,GAAGN,EAAE,CAACM,CAAC;IACdC,CAAC,EAAEN,EAAE,CAACM,CAAC,GAAGP,EAAE,CAACO;GACd;EACD,IAAME,EAAE,GAAU;IAChBH,CAAC,EAAEH,EAAE,CAACG,CAAC,GAAGJ,EAAE,CAACI,CAAC;IACdC,CAAC,EAAEJ,EAAE,CAACI,CAAC,GAAGL,EAAE,CAACK;GACd;EACD,IAAMG,KAAK,GAAWF,EAAE,CAACF,CAAC,GAAGG,EAAE,CAACF,CAAC,GAAGC,EAAE,CAACD,CAAC,GAAGE,EAAE,CAACH,CAAC;EAC/C,IAAMK,QAAQ,GAAWD,KAAK,GAAGA,KAAK;EACtC,IAAME,OAAO,GAAWJ,EAAE,CAACF,CAAC,GAAGE,EAAE,CAACF,CAAC,GAAGE,EAAE,CAACD,CAAC,GAAGC,EAAE,CAACD,CAAC;EACjD,IAAMM,OAAO,GAAWJ,EAAE,CAACH,CAAC,GAAGG,EAAE,CAACH,CAAC,GAAGG,EAAE,CAACF,CAAC,GAAGE,EAAE,CAACF,CAAC;EACjD,IAAIO,KAAK,GAAiB,IAAI;EAC9B,IAAIH,QAAQ,GAAGP,SAAS,GAAGQ,OAAO,GAAGC,OAAO,EAAE;IAC5C,IAAME,CAAC,GAAG,CAACV,CAAC,CAACC,CAAC,GAAGG,EAAE,CAACF,CAAC,GAAGF,CAAC,CAACE,CAAC,GAAGE,EAAE,CAACH,CAAC,IAAII,KAAK;IAC3C,IAAMM,CAAC,GAAG,CAACX,CAAC,CAACC,CAAC,GAAGE,EAAE,CAACD,CAAC,GAAGF,CAAC,CAACE,CAAC,GAAGC,EAAE,CAACF,CAAC,IAAII,KAAK;IAC3C,IAAIf,SAAS,CAACoB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAIpB,SAAS,CAACqB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MAC5CF,KAAK,GAAG;QACNR,CAAC,EAAEN,EAAE,CAACM,CAAC,GAAGS,CAAC,GAAGP,EAAE,CAACF,CAAC;QAClBC,CAAC,EAAEP,EAAE,CAACO,CAAC,GAAGQ,CAAC,GAAGP,EAAE,CAACD;OAClB;IACH;EACF;EACA,OAAOO,KAAK;AACd;AAEA,SAASG,YAAYA,CAACC,MAAkB;EACtC,IAAMC,KAAK,GAAG,EAAE;EAChB,IAAMC,KAAK,GAAGF,MAAM,CAACG,MAAM;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;IAClC,IAAMR,KAAK,GAAGI,MAAM,CAACI,CAAC,CAAC;IACvB,IAAMC,IAAI,GAAGL,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC;IAC1BH,KAAK,CAACK,IAAI,CAAC;MACTC,IAAI,EAAE;QACJnB,CAAC,EAAEQ,KAAK,CAAC,CAAC,CAAC;QACXP,CAAC,EAAEO,KAAK,CAAC,CAAC;OACX;MACDY,EAAE,EAAE;QACFpB,CAAC,EAAEiB,IAAI,CAAC,CAAC,CAAC;QACVhB,CAAC,EAAEgB,IAAI,CAAC,CAAC;;KAEZ,CAAC;EACJ;EACA,IAAIJ,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB,IAAMM,KAAK,GAAGT,MAAM,CAAC,CAAC,CAAC;IACvB,IAAMU,IAAI,GAAGV,MAAM,CAACE,KAAK,GAAG,CAAC,CAAC;IAC9BD,KAAK,CAACK,IAAI,CAAC;MACTC,IAAI,EAAE;QACJnB,CAAC,EAAEsB,IAAI,CAAC,CAAC,CAAC;QACVrB,CAAC,EAAEqB,IAAI,CAAC,CAAC;OACV;MACDF,EAAE,EAAE;QACFpB,CAAC,EAAEqB,KAAK,CAAC,CAAC,CAAC;QACXpB,CAAC,EAAEoB,KAAK,CAAC,CAAC;;KAEb,CAAC;EACJ;EACA,OAAOR,KAAK;AACd;AAEA,SAASU,oBAAoBA,CAACV,KAAa,EAAEW,IAAU;EACrD,IAAIC,WAAW,GAAG,KAAK;EACvBZ,KAAK,CAACa,OAAO,CAAC,UAACC,CAAC;IACd,IAAIlC,gBAAgB,CAACkC,CAAC,CAACR,IAAI,EAAEQ,CAAC,CAACP,EAAE,EAAEI,IAAI,CAACL,IAAI,EAAEK,IAAI,CAACJ,EAAE,CAAC,EAAE;MACtDK,WAAW,GAAG,IAAI;MAClB,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,OAAOA,WAAW;AACpB;AASA,SAASG,OAAOA,CAAChB,MAAkB;EACjC,IAAMiB,IAAI,GAAGjB,MAAM,CAACkB,GAAG,CAAC,UAACC,CAAC;IAAK,OAAAA,CAAC,CAAC,CAAC,CAAC;EAAJ,CAAI,CAAC;EACpC,IAAMC,IAAI,GAAGpB,MAAM,CAACkB,GAAG,CAAC,UAACC,CAAC;IAAK,OAAAA,CAAC,CAAC,CAAC,CAAC;EAAJ,CAAI,CAAC;EACpC,OAAO;IACLE,IAAI,EAAEC,IAAI,CAAC3C,GAAG,CAAC4C,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;IAChCO,IAAI,EAAEF,IAAI,CAAC1C,GAAG,CAAC2C,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;IAChCQ,IAAI,EAAEH,IAAI,CAAC3C,GAAG,CAAC4C,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IAChCM,IAAI,EAAEJ,IAAI,CAAC1C,GAAG,CAAC2C,KAAK,CAAC,IAAI,EAAEH,IAAI;GAChC;AACH;AAEA,SAASO,aAAaA,CAACC,IAAU,EAAEC,IAAU;EAC3C,OAAO,EAAEA,IAAI,CAACR,IAAI,GAAGO,IAAI,CAACJ,IAAI,IAAIK,IAAI,CAACL,IAAI,GAAGI,IAAI,CAACP,IAAI,IAAIQ,IAAI,CAACJ,IAAI,GAAGG,IAAI,CAACF,IAAI,IAAIG,IAAI,CAACH,IAAI,GAAGE,IAAI,CAACH,IAAI,CAAC;AAC5G;AAEA;;;AAGA,OAAM,SAAUK,mBAAmBA,CAACC,OAAmB,EAAEC,OAAmB;EAC1E;EACA,IAAID,OAAO,CAAC5B,MAAM,GAAG,CAAC,IAAI6B,OAAO,CAAC7B,MAAM,GAAG,CAAC,EAAE;IAC5C,OAAO,KAAK;EACd;EAEA,IAAM8B,KAAK,GAAGjB,OAAO,CAACe,OAAO,CAAC;EAC9B,IAAMG,KAAK,GAAGlB,OAAO,CAACgB,OAAO,CAAC;EAC9B;EACA,IAAI,CAACL,aAAa,CAACM,KAAK,EAAEC,KAAK,CAAC,EAAE;IAChC,OAAO,KAAK;EACd;EAEA,IAAIC,IAAI,GAAG,KAAK;EAChB;EACAH,OAAO,CAAClB,OAAO,CAAC,UAAClB,KAAK;IACpB,IAAIpB,gBAAgB,CAACuD,OAAO,EAAEnC,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACjDuC,IAAI,GAAG,IAAI;MACX,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAIA,IAAI,EAAE;IACR,OAAO,IAAI;EACb;EACA;EACAJ,OAAO,CAACjB,OAAO,CAAC,UAAClB,KAAK;IACpB,IAAIpB,gBAAgB,CAACwD,OAAO,EAAEpC,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACjDuC,IAAI,GAAG,IAAI;MACX,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAIA,IAAI,EAAE;IACR,OAAO,IAAI;EACb;EAEA,IAAMC,MAAM,GAAGrC,YAAY,CAACgC,OAAO,CAAC;EACpC,IAAMM,MAAM,GAAGtC,YAAY,CAACiC,OAAO,CAAC;EACpC,IAAInB,WAAW,GAAG,KAAK;EACvBwB,MAAM,CAACvB,OAAO,CAAC,UAACF,IAAI;IAClB,IAAID,oBAAoB,CAACyB,MAAM,EAAExB,IAAI,CAAC,EAAE;MACtCC,WAAW,GAAG,IAAI;MAClB,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,OAAOA,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}