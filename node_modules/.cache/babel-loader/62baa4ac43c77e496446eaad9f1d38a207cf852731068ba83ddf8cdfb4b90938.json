{"ast":null,"code":"import { MaybeTuple, MaybeVisualPosition } from '../transform';\nimport { ImageShape } from '../shape';\nimport { baseGeometryChannels, basePostInference, basePreInference, createBandOffset, tooltip2d, visualMark } from './utils';\nconst shape = {\n  image: ImageShape\n};\nexport const Image = options => {\n  const {\n    cartesian\n  } = options;\n  if (cartesian) return visualMark;\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y\n    } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, i => {\n      const p = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))];\n    });\n    return [index, P];\n  };\n};\nImage.props = {\n  defaultShape: 'image',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'src',\n    scale: 'identity'\n  }, {\n    name: 'size'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeTuple\n  }, {\n    type: MaybeVisualPosition\n  }],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["MaybeTuple","MaybeVisualPosition","ImageShape","baseGeometryChannels","basePostInference","basePreInference","createBandOffset","tooltip2d","visualMark","shape","image","Image","options","cartesian","index","scale","value","coordinate","x","X","y","Y","offset","P","Array","from","i","p","map","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","type","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/image.ts"],"sourcesContent":["import { Mark, MarkComponent as MC, Vector2 } from '../runtime';\nimport { ImageMark } from '../spec';\nimport { MaybeTuple, MaybeVisualPosition } from '../transform';\nimport { ImageShape } from '../shape';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  createBandOffset,\n  tooltip2d,\n  visualMark,\n} from './utils';\n\nconst shape = {\n  image: ImageShape,\n};\n\nexport type ImageOptions = Omit<ImageMark, 'type'>;\n\nexport const Image: MC<ImageOptions> = (options) => {\n  const { cartesian } = options;\n  if (cartesian) return visualMark as Mark;\n  return (index, scale, value, coordinate) => {\n    const { x: X, y: Y } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, (i) => {\n      const p: Vector2 = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))] as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nImage.props = {\n  defaultShape: 'image',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', required: true },\n    { name: 'y', required: true },\n    { name: 'src', scale: 'identity' },\n    { name: 'size' },\n  ],\n  preInference: [\n    ...basePreInference(),\n    { type: MaybeTuple },\n    { type: MaybeVisualPosition },\n  ],\n  postInference: [...basePostInference(), ...tooltip2d()],\n};\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,mBAAmB,QAAQ,cAAc;AAC9D,SAASC,UAAU,QAAQ,UAAU;AACrC,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACTC,UAAU,QACL,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAER;CACR;AAID,OAAO,MAAMS,KAAK,GAAsBC,OAAO,IAAI;EACjD,MAAM;IAAEC;EAAS,CAAE,GAAGD,OAAO;EAC7B,IAAIC,SAAS,EAAE,OAAOL,UAAkB;EACxC,OAAO,CAACM,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAM;MAAEC,CAAC,EAAEC,CAAC;MAAEC,CAAC,EAAEC;IAAC,CAAE,GAAGL,KAAK;IAC5B,MAAMM,MAAM,GAAGhB,gBAAgB,CAACS,KAAK,EAAEC,KAAK,EAAEJ,OAAO,CAAC;IACtD,MAAMW,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACX,KAAK,EAAGY,CAAC,IAAI;MAChC,MAAMC,CAAC,GAAY,CAAC,CAACR,CAAC,CAACO,CAAC,CAAC,EAAE,CAACL,CAAC,CAACK,CAAC,CAAC,CAAC;MACjC,OAAO,CAACT,UAAU,CAACW,GAAG,CAACN,MAAM,CAACK,CAAC,EAAED,CAAC,CAAC,CAAC,CAAc;IACpD,CAAC,CAAC;IACF,OAAO,CAACZ,KAAK,EAAES,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDZ,KAAK,CAACkB,KAAK,GAAG;EACZC,YAAY,EAAE,OAAO;EACrBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBvB,KAAK;EACLwB,QAAQ,EAAE,CACR,GAAG9B,oBAAoB,CAAC;IAAE+B,MAAM,EAAEC,MAAM,CAACC,IAAI,CAAC3B,KAAK;EAAC,CAAE,CAAC,EACvD;IAAE4B,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,KAAK;IAAEtB,KAAK,EAAE;EAAU,CAAE,EAClC;IAAEsB,IAAI,EAAE;EAAM,CAAE,CACjB;EACDE,YAAY,EAAE,CACZ,GAAGlC,gBAAgB,EAAE,EACrB;IAAEmC,IAAI,EAAExC;EAAU,CAAE,EACpB;IAAEwC,IAAI,EAAEvC;EAAmB,CAAE,CAC9B;EACDwC,aAAa,EAAE,CAAC,GAAGrC,iBAAiB,EAAE,EAAE,GAAGG,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}