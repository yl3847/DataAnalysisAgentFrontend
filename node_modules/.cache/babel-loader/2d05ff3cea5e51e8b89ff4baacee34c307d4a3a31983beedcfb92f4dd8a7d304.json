{"ast":null,"code":"import { __awaiter, __rest } from \"tslib\";\nimport { isFunction, isNumber } from '@antv/util';\nimport dagre, { graphlib } from 'dagre';\nimport { parseSize } from './util/size';\n/**\n * <zh/> Dagre 布局\n *\n * <en/> Dagre layout\n */\nexport class DagreLayout {\n  constructor(options) {\n    this.id = 'dagre';\n    this.options = {};\n    Object.assign(this.options, DagreLayout.defaultOptions, options);\n  }\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericDagreLayout(false, graph, Object.assign(Object.assign({}, this.options), options));\n    });\n  }\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericDagreLayout(true, graph, Object.assign(Object.assign({}, this.options), options));\n    });\n  }\n  genericDagreLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        nodeSize\n      } = options;\n      const g = new graphlib.Graph();\n      g.setGraph(options);\n      g.setDefaultEdgeLabel(() => ({}));\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      if ([...nodes, ...edges].some(({\n        id\n      }) => isNumber(id))) {\n        console.error('Dagre layout only support string id, it will convert number to string.');\n      }\n      graph.getAllNodes().forEach(node => {\n        const {\n          id\n        } = node;\n        const data = Object.assign({}, node.data);\n        if (nodeSize !== undefined) {\n          const [width, height] = parseSize(isFunction(nodeSize) ? nodeSize(node) : nodeSize);\n          Object.assign(data, {\n            width,\n            height\n          });\n        }\n        g.setNode(id.toString(), data);\n      });\n      graph.getAllEdges().forEach(({\n        id,\n        source,\n        target\n      }) => {\n        g.setEdge(source.toString(), target.toString(), {\n          id\n        });\n      });\n      dagre.layout(g);\n      const mapping = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes().forEach(id => {\n        const data = g.node(id);\n        mapping.nodes.push({\n          id,\n          data\n        });\n        if (assign) graph.mergeNodeData(id, data);\n      });\n      g.edges().forEach(edge => {\n        const _a = g.edge(edge),\n          {\n            id\n          } = _a,\n          data = __rest(_a, [\"id\"]);\n        const {\n          v: source,\n          w: target\n        } = edge;\n        mapping.edges.push({\n          id,\n          source,\n          target,\n          data\n        });\n        if (assign) graph.mergeEdgeData(id, data);\n      });\n      return mapping;\n    });\n  }\n}\nDagreLayout.defaultOptions = {};","map":{"version":3,"names":["isFunction","isNumber","dagre","graphlib","parseSize","DagreLayout","constructor","options","id","Object","assign","defaultOptions","execute","graph","genericDagreLayout","nodeSize","g","Graph","setGraph","setDefaultEdgeLabel","nodes","getAllNodes","edges","getAllEdges","some","console","error","forEach","node","data","undefined","width","height","setNode","toString","source","target","setEdge","layout","mapping","push","mergeNodeData","edge","_a","__rest","v","w","mergeEdgeData"],"sources":["../src/dagre.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}