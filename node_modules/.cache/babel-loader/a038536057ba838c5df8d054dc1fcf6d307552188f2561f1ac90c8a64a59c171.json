{"ast":null,"code":"import { mergeOptions } from '../../utils/style';\nimport { Cubic } from './cubic';\n/**\n * <zh/> 垂直方向的三次贝塞尔曲线\n *\n * <en/> Cubic Bezier curve in vertical direction\n * @remarks\n * <zh/> 特别注意，计算控制点时主要考虑 y 轴上的距离，忽略 x 轴的变化\n *\n * <en/> Please note that when calculating the control points, the distance on the y-axis is mainly considered, and the change on the x-axis is ignored\n */\nexport class CubicVertical extends Cubic {\n  constructor(options) {\n    super(mergeOptions({\n      style: CubicVertical.defaultStyleProps\n    }, options));\n  }\n  getControlPoints(sourcePoint, targetPoint, curvePosition, curveOffset) {\n    const yDist = targetPoint[1] - sourcePoint[1];\n    return [[sourcePoint[0], sourcePoint[1] + yDist * curvePosition[0] + curveOffset[0]], [targetPoint[0], targetPoint[1] - yDist * curvePosition[1] + curveOffset[1]]];\n  }\n}\nCubicVertical.defaultStyleProps = {\n  curvePosition: [0.5, 0.5],\n  curveOffset: [0, 0]\n};","map":{"version":3,"names":["mergeOptions","Cubic","CubicVertical","constructor","options","style","defaultStyleProps","getControlPoints","sourcePoint","targetPoint","curvePosition","curveOffset","yDist"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/edges/cubic-vertical.ts"],"sourcesContent":["import type { DisplayObjectConfig } from '@antv/g';\nimport type { Point } from '../../types';\nimport { mergeOptions } from '../../utils/style';\nimport type { BaseEdgeStyleProps } from './base-edge';\nimport { Cubic } from './cubic';\n\n/**\n * <zh/> 垂直方向的三次贝塞尔曲线样式配置项\n *\n * <en/> Cubic Bezier curve style properties in vertical direction\n */\nexport interface CubicVerticalStyleProps extends BaseEdgeStyleProps {\n  /**\n   * <zh/> 控制点在两端点连线上的相对位置，范围为`0-1`\n   *\n   * <en/> The relative position of the control point on the line, ranging from `0-1`\n   * @defaultValue [0.5, 0.5]\n   */\n  curvePosition?: number | [number, number];\n  /**\n   * <zh/> 控制点距离两端点连线的距离，可理解为控制边的弯曲程度\n   *\n   * <en/> The distance of the control point from the line\n   * @defaultValue [0, 0]\n   */\n  curveOffset?: number | [number, number];\n}\n\n/**\n * <zh/> 垂直方向的三次贝塞尔曲线\n *\n * <en/> Cubic Bezier curve in vertical direction\n * @remarks\n * <zh/> 特别注意，计算控制点时主要考虑 y 轴上的距离，忽略 x 轴的变化\n *\n * <en/> Please note that when calculating the control points, the distance on the y-axis is mainly considered, and the change on the x-axis is ignored\n */\nexport class CubicVertical extends Cubic {\n  static defaultStyleProps: Partial<CubicVerticalStyleProps> = {\n    curvePosition: [0.5, 0.5],\n    curveOffset: [0, 0],\n  };\n\n  constructor(options: DisplayObjectConfig<CubicVerticalStyleProps>) {\n    super(mergeOptions({ style: CubicVertical.defaultStyleProps }, options));\n  }\n\n  protected getControlPoints(\n    sourcePoint: Point,\n    targetPoint: Point,\n    curvePosition: [number, number],\n    curveOffset: [number, number],\n  ): [Point, Point] {\n    const yDist = targetPoint[1] - sourcePoint[1];\n    return [\n      [sourcePoint[0], sourcePoint[1] + yDist * curvePosition[0] + curveOffset[0]],\n      [targetPoint[0], targetPoint[1] - yDist * curvePosition[1] + curveOffset[1]],\n    ];\n  }\n}\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,mBAAmB;AAEhD,SAASC,KAAK,QAAQ,SAAS;AAwB/B;;;;;;;;;AASA,OAAM,MAAOC,aAAc,SAAQD,KAAK;EAMtCE,YAAYC,OAAqD;IAC/D,KAAK,CAACJ,YAAY,CAAC;MAAEK,KAAK,EAAEH,aAAa,CAACI;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EAC1E;EAEUG,gBAAgBA,CACxBC,WAAkB,EAClBC,WAAkB,EAClBC,aAA+B,EAC/BC,WAA6B;IAE7B,MAAMC,KAAK,GAAGH,WAAW,CAAC,CAAC,CAAC,GAAGD,WAAW,CAAC,CAAC,CAAC;IAC7C,OAAO,CACL,CAACA,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,GAAGI,KAAK,GAAGF,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,CAAC,EAC5E,CAACF,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,GAAGG,KAAK,GAAGF,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,CAAC,CAC7E;EACH;;AApBOT,aAAA,CAAAI,iBAAiB,GAAqC;EAC3DI,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACzBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC;CACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}