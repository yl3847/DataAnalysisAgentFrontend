{"ast":null,"code":"import{useState,useEffect}from'react';export const useLocalStorage=(key,initialValue)=>{// State to store our value\n// Pass initial state function to useState so logic is only executed once\nconst[storedValue,setStoredValue]=useState(()=>{if(typeof window===\"undefined\"){return initialValue;}try{// Get from local storage by key\nconst item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.error(`Error loading localStorage key \"${key}\":`,error);return initialValue;}});// Return a wrapped version of useState's setter function that persists the new value to localStorage\nconst setValue=value=>{try{// Allow value to be a function so we have same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nif(typeof window!==\"undefined\"){window.localStorage.setItem(key,JSON.stringify(valueToStore));}}catch(error){console.error(`Error setting localStorage key \"${key}\":`,error);}};// Listen for changes in other tabs/windows\nuseEffect(()=>{const handleStorageChange=e=>{if(e.key===key&&e.newValue){try{setStoredValue(JSON.parse(e.newValue));}catch(error){console.error('Error parsing storage change:',error);}}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);},[key]);return[storedValue,setValue];};","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","storedValue","setStoredValue","window","item","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","handleStorageChange","e","newValue","addEventListener","removeEventListener"],"sources":["/Users/yizelu/Desktop/mcp/frontend/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n    \n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(`Error loading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes in other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = (e) => {\n      if (e.key === key && e.newValue) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.error('Error parsing storage change:', error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key]);\n\n  return [storedValue, setValue];\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAACC,GAAG,CAAEC,YAAY,GAAK,CACpD;AACA;AACA,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGN,QAAQ,CAAC,IAAM,CACnD,GAAI,MAAO,CAAAO,MAAM,GAAK,WAAW,CAAE,CACjC,MAAO,CAAAH,YAAY,CACrB,CAEA,GAAI,CACF;AACA,KAAM,CAAAI,IAAI,CAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,CAC7C;AACA,MAAO,CAAAK,IAAI,CAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAGJ,YAAY,CAC/C,CAAE,MAAOS,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CAChE,MAAO,CAAAT,YAAY,CACrB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAW,QAAQ,CAAIC,KAAK,EAAK,CAC1B,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACX,WAAW,CAAC,CAAGW,KAAK,CAE3E;AACAV,cAAc,CAACW,YAAY,CAAC,CAE5B;AACA,GAAI,MAAO,CAAAV,MAAM,GAAK,WAAW,CAAE,CACjCA,MAAM,CAACE,YAAY,CAACU,OAAO,CAAChB,GAAG,CAAEQ,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CACF,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CAClE,CACF,CAAC,CAED;AACAZ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoB,mBAAmB,CAAIC,CAAC,EAAK,CACjC,GAAIA,CAAC,CAACnB,GAAG,GAAKA,GAAG,EAAImB,CAAC,CAACC,QAAQ,CAAE,CAC/B,GAAI,CACFjB,cAAc,CAACK,IAAI,CAACC,KAAK,CAACU,CAAC,CAACC,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAOV,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACvD,CACF,CACF,CAAC,CAEDN,MAAM,CAACiB,gBAAgB,CAAC,SAAS,CAAEH,mBAAmB,CAAC,CACvD,MAAO,IAAMd,MAAM,CAACkB,mBAAmB,CAAC,SAAS,CAAEJ,mBAAmB,CAAC,CACzE,CAAC,CAAE,CAAClB,GAAG,CAAC,CAAC,CAET,MAAO,CAACE,WAAW,CAAEU,QAAQ,CAAC,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}