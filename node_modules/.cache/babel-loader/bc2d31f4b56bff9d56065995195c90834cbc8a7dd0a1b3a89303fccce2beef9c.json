{"ast":null,"code":"import { flow } from '../../utils/flow';\nimport { columnWidthRatio } from './style';\nexport function preprocessOption(options) {\n  const convertedOptions = adapter(options);\n  // If there are children, recursively convert each child node.\n  if (convertedOptions.children && Array.isArray(convertedOptions.children)) {\n    convertedOptions.children = convertedOptions.children.map(child => preprocessOption(child));\n  }\n  return convertedOptions;\n}\n// Entry point for all syntactic sugar functions.\nfunction adapter(options) {\n  //@todo define a type for params of flow\n  return flow(columnWidthRatio)(options);\n}","map":{"version":3,"names":["flow","columnWidthRatio","preprocessOption","options","convertedOptions","adapter","children","Array","isArray","map","child"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/runtime/option-preprocess/index.ts"],"sourcesContent":["import { G2ViewTree } from '../types/options';\nimport { flow } from '../../utils/flow';\nimport { columnWidthRatio } from './style';\n\nexport function preprocessOption<T extends G2ViewTree = G2ViewTree>(\n  options: T,\n): T {\n  const convertedOptions = adapter(options);\n  // If there are children, recursively convert each child node.\n  if (convertedOptions.children && Array.isArray(convertedOptions.children)) {\n    convertedOptions.children = convertedOptions.children.map((child) =>\n      preprocessOption(child),\n    );\n  }\n\n  return convertedOptions;\n}\n\n// Entry point for all syntactic sugar functions.\nfunction adapter<T extends G2ViewTree = G2ViewTree>(options: T): T {\n  //@todo define a type for params of flow\n  return flow(columnWidthRatio)(options);\n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,gBAAgB,QAAQ,SAAS;AAE1C,OAAM,SAAUC,gBAAgBA,CAC9BC,OAAU;EAEV,MAAMC,gBAAgB,GAAGC,OAAO,CAACF,OAAO,CAAC;EACzC;EACA,IAAIC,gBAAgB,CAACE,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACJ,gBAAgB,CAACE,QAAQ,CAAC,EAAE;IACzEF,gBAAgB,CAACE,QAAQ,GAAGF,gBAAgB,CAACE,QAAQ,CAACG,GAAG,CAAEC,KAAK,IAC9DR,gBAAgB,CAACQ,KAAK,CAAC,CACxB;;EAGH,OAAON,gBAAgB;AACzB;AAEA;AACA,SAASC,OAAOA,CAAoCF,OAAU;EAC5D;EACA,OAAOH,IAAI,CAACC,gBAAgB,CAAC,CAACE,OAAO,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}