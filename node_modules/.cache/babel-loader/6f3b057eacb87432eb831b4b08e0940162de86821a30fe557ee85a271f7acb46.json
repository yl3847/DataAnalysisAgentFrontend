{"ast":null,"code":"/**\n * Sample data with lttb(Largest-Triangle-Three-Buckets) algo (https://github.com/pingec/downsample-lttb).\n * Return the sampled index array.\n */\nexport function lttb(I, X, Y, thresholds) {\n  const length = I.length;\n  if (thresholds >= length || thresholds === 0) {\n    return I;\n  }\n  const x = i => X[I[i]] * 1;\n  const y = i => Y[I[i]] * 1;\n  const sampled = [];\n  // Bucket size. Leave room for start and end data points.\n  const every = (length - 2) / (thresholds - 2);\n  let a = 0; // Initially a is the first point in the triangle.\n  let maxArea;\n  let area;\n  let nextA;\n  sampled.push(a); // Always add the first point.\n  for (let i = 0; i < thresholds - 2; i++) {\n    // Calculate point average for next bucket (containing c).\n    let avgX = 0;\n    let avgY = 0;\n    let start = Math.floor((i + 1) * every) + 1;\n    let end = Math.floor((i + 2) * every) + 1;\n    end = Math.min(end, length);\n    const size = end - start;\n    for (; start < end; start++) {\n      avgX += x(start);\n      avgY += y(start);\n    }\n    avgX /= size;\n    avgY /= size;\n    // Get the range for this bucket.\n    let frameStart = Math.floor((i + 0) * every) + 1;\n    const frameEnd = Math.floor((i + 1) * every) + 1;\n    // Point a.\n    const pointA = [x(a), y(a)];\n    maxArea = area = -1;\n    for (; frameStart < frameEnd; frameStart++) {\n      // Calculate triangle area over three buckets.\n      area = Math.abs((pointA[0] - avgX) * (x(frameStart) - pointA[1]) - (pointA[0] - y(frameStart)) * (avgY - pointA[0])) * 0.5;\n      if (area > maxArea) {\n        maxArea = area;\n        nextA = frameStart; // Next a is this b.\n      }\n    }\n    sampled.push(nextA); // Pick this point from the bucket.\n    a = nextA; // This a is the next a (chosen b).\n  }\n  sampled.push(length - 1); // Always add last.\n  return sampled.map(a => I[a]);\n}","map":{"version":3,"names":["lttb","I","X","Y","thresholds","length","x","i","y","sampled","every","a","maxArea","area","nextA","push","avgX","avgY","start","Math","floor","end","min","size","frameStart","frameEnd","pointA","abs","map"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/transform/utils/lttb.ts"],"sourcesContent":["/**\n * Sample data with lttb(Largest-Triangle-Three-Buckets) algo (https://github.com/pingec/downsample-lttb).\n * Return the sampled index array.\n */\nexport function lttb(\n  I: number[],\n  X: number[],\n  Y: number[],\n  thresholds: number,\n): number[] {\n  const length = I.length;\n  if (thresholds >= length || thresholds === 0) {\n    return I;\n  }\n\n  const x = (i: number) => X[I[i]] * 1;\n  const y = (i: number) => Y[I[i]] * 1;\n  const sampled = [];\n\n  // Bucket size. Leave room for start and end data points.\n  const every = (length - 2) / (thresholds - 2);\n\n  let a = 0; // Initially a is the first point in the triangle.\n  let maxArea;\n  let area;\n  let nextA;\n\n  sampled.push(a); // Always add the first point.\n\n  for (let i = 0; i < thresholds - 2; i++) {\n    // Calculate point average for next bucket (containing c).\n    let avgX = 0;\n    let avgY = 0;\n    let start = Math.floor((i + 1) * every) + 1;\n    let end = Math.floor((i + 2) * every) + 1;\n    end = Math.min(end, length);\n    const size = end - start;\n\n    for (; start < end; start++) {\n      avgX += x(start);\n      avgY += y(start);\n    }\n    avgX /= size;\n    avgY /= size;\n\n    // Get the range for this bucket.\n    let frameStart = Math.floor((i + 0) * every) + 1;\n    const frameEnd = Math.floor((i + 1) * every) + 1;\n\n    // Point a.\n    const pointA = [x(a), y(a)];\n    maxArea = area = -1;\n    for (; frameStart < frameEnd; frameStart++) {\n      // Calculate triangle area over three buckets.\n      area =\n        Math.abs(\n          (pointA[0] - avgX) * (x(frameStart) - pointA[1]) -\n            (pointA[0] - y(frameStart)) * (avgY - pointA[0]),\n        ) * 0.5;\n      if (area > maxArea) {\n        maxArea = area;\n        nextA = frameStart; // Next a is this b.\n      }\n    }\n\n    sampled.push(nextA); // Pick this point from the bucket.\n    a = nextA; // This a is the next a (chosen b).\n  }\n\n  sampled.push(length - 1); // Always add last.\n\n  return sampled.map((a) => I[a]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}