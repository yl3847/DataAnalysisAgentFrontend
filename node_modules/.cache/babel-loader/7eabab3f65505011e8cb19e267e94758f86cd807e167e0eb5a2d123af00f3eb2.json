{"ast":null,"code":"import { group } from '@antv/vendor/d3-array';\nimport { subObject } from '../utils/helper';\nimport { mergeState, selectG2Elements, useState, createValueof, createDatumof } from './utils';\nimport { markerOf, labelOf, itemsOf, legendsOf, dataOf } from './legendFilter';\nexport function LegendHighlight() {\n  return (context, _, emitter) => {\n    const {\n      container,\n      view,\n      options\n    } = context;\n    const legends = legendsOf(container);\n    const elements = selectG2Elements(container);\n    const channelOf = legend => {\n      return dataOf(legend).scales[0].name;\n    };\n    const scaleOf = channel => {\n      const {\n        scale: {\n          [channel]: scale\n        }\n      } = view;\n      return scale;\n    };\n    const markState = mergeState(options, ['active', 'inactive']);\n    const valueof = createValueof(elements, createDatumof(view));\n    const destroys = [];\n    // Bind events for each legend.\n    for (const legend of legends) {\n      const datumOf = item => {\n        const {\n          data\n        } = legend.attributes;\n        const {\n          __data__: datum\n        } = item;\n        const {\n          index\n        } = datum;\n        return data[index].label;\n      };\n      const channel = channelOf(legend);\n      const items = itemsOf(legend);\n      const scale = scaleOf(channel);\n      const elementGroup = group(elements, d => scale.invert(d.__data__[channel]));\n      const {\n        state: legendState = {}\n      } = legend.attributes;\n      const {\n        inactive = {}\n      } = legendState;\n      const {\n        setState,\n        removeState\n      } = useState(markState, valueof);\n      // Handle styles of inner item.\n      const markerStyle = {\n        inactive: subObject(inactive, 'marker')\n      };\n      const labelStyle = {\n        inactive: subObject(inactive, 'label')\n      };\n      const {\n        setState: setM,\n        removeState: removeM\n      } = useState(markerStyle);\n      const {\n        setState: setL,\n        removeState: removeL\n      } = useState(labelStyle);\n      const updateLegendState = highlight => {\n        for (const item of items) {\n          const marker = markerOf(item);\n          const label = labelOf(item);\n          if (item === highlight || highlight === null) {\n            removeM(marker, 'inactive');\n            removeL(label, 'inactive');\n          } else {\n            setM(marker, 'inactive');\n            setL(label, 'inactive');\n          }\n        }\n      };\n      const highlightItem = (event, item) => {\n        // Update UI.\n        const value = datumOf(item);\n        const elementSet = new Set(elementGroup.get(value));\n        for (const e of elements) {\n          if (elementSet.has(e)) setState(e, 'active');else setState(e, 'inactive');\n        }\n        updateLegendState(item);\n        // Emit events.\n        const {\n          nativeEvent = true\n        } = event;\n        if (!nativeEvent) return;\n        emitter.emit('legend:highlight', Object.assign(Object.assign({}, event), {\n          nativeEvent,\n          data: {\n            channel,\n            value\n          }\n        }));\n      };\n      const itemPointerover = new Map();\n      // Add listener for the legend items.\n      for (const item of items) {\n        const pointerover = event => {\n          highlightItem(event, item);\n        };\n        item.addEventListener('pointerover', pointerover);\n        itemPointerover.set(item, pointerover);\n      }\n      // Add listener for the legend group.\n      const pointerleave = event => {\n        for (const e of elements) removeState(e, 'inactive', 'active');\n        updateLegendState(null);\n        // Emit events.\n        const {\n          nativeEvent = true\n        } = event;\n        if (!nativeEvent) return;\n        emitter.emit('legend:unhighlight', {\n          nativeEvent\n        });\n      };\n      const onHighlight = event => {\n        const {\n          nativeEvent,\n          data\n        } = event;\n        if (nativeEvent) return;\n        const {\n          channel: specifiedChannel,\n          value\n        } = data;\n        if (specifiedChannel !== channel) return;\n        const item = items.find(d => datumOf(d) === value);\n        if (!item) return;\n        highlightItem({\n          nativeEvent: false\n        }, item);\n      };\n      const onUnHighlight = event => {\n        const {\n          nativeEvent\n        } = event;\n        if (nativeEvent) return;\n        pointerleave({\n          nativeEvent: false\n        });\n      };\n      legend.addEventListener('pointerleave', pointerleave);\n      emitter.on('legend:highlight', onHighlight);\n      emitter.on('legend:unhighlight', onUnHighlight);\n      const destroy = () => {\n        legend.removeEventListener(pointerleave);\n        emitter.off('legend:highlight', onHighlight);\n        emitter.off('legend:unhighlight', onUnHighlight);\n        for (const [item, pointerover] of itemPointerover) {\n          item.removeEventListener(pointerover);\n        }\n      };\n      destroys.push(destroy);\n    }\n    return () => destroys.forEach(d => d());\n  };\n}","map":{"version":3,"names":["group","subObject","mergeState","selectG2Elements","useState","createValueof","createDatumof","markerOf","labelOf","itemsOf","legendsOf","dataOf","LegendHighlight","context","_","emitter","container","view","options","legends","elements","channelOf","legend","scales","name","scaleOf","channel","scale","markState","valueof","destroys","datumOf","item","data","attributes","__data__","datum","index","label","items","elementGroup","d","invert","state","legendState","inactive","setState","removeState","markerStyle","labelStyle","setM","removeM","setL","removeL","updateLegendState","highlight","marker","highlightItem","event","value","elementSet","Set","get","e","has","nativeEvent","emit","Object","assign","itemPointerover","Map","pointerover","addEventListener","set","pointerleave","onHighlight","specifiedChannel","find","onUnHighlight","on","destroy","removeEventListener","off","push","forEach"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/interaction/legendHighlight.ts"],"sourcesContent":["import { InternMap, group } from '@antv/vendor/d3-array';\nimport { subObject } from '../utils/helper';\nimport {\n  mergeState,\n  selectG2Elements,\n  useState,\n  createValueof,\n  createDatumof,\n} from './utils';\nimport { markerOf, labelOf, itemsOf, legendsOf, dataOf } from './legendFilter';\n\nexport function LegendHighlight() {\n  return (context, _, emitter) => {\n    const { container, view, options } = context;\n    const legends = legendsOf(container);\n    const elements = selectG2Elements(container);\n    const channelOf = (legend) => {\n      return dataOf(legend).scales[0].name;\n    };\n    const scaleOf = (channel) => {\n      const {\n        scale: { [channel]: scale },\n      } = view;\n      return scale;\n    };\n    const markState = mergeState(options, ['active', 'inactive']);\n    const valueof = createValueof(elements, createDatumof(view));\n    const destroys = [];\n\n    // Bind events for each legend.\n    for (const legend of legends) {\n      const datumOf = (item) => {\n        const { data } = legend.attributes;\n        const { __data__: datum } = item;\n        const { index } = datum;\n        return data[index].label;\n      };\n      const channel = channelOf(legend);\n      const items = itemsOf(legend);\n      const scale = scaleOf(channel);\n      const elementGroup = group<any, any>(elements, (d) =>\n        scale.invert(d.__data__[channel]),\n      );\n      const { state: legendState = {} } = legend.attributes;\n      const { inactive = {} } = legendState;\n      const { setState, removeState } = useState(markState, valueof);\n\n      // Handle styles of inner item.\n      const markerStyle = { inactive: subObject(inactive, 'marker') };\n      const labelStyle = { inactive: subObject(inactive, 'label') };\n      const { setState: setM, removeState: removeM } = useState(markerStyle);\n      const { setState: setL, removeState: removeL } = useState(labelStyle);\n      const updateLegendState = (highlight) => {\n        for (const item of items) {\n          const marker = markerOf(item);\n          const label = labelOf(item);\n          if (item === highlight || highlight === null) {\n            removeM(marker, 'inactive');\n            removeL(label, 'inactive');\n          } else {\n            setM(marker, 'inactive');\n            setL(label, 'inactive');\n          }\n        }\n      };\n      const highlightItem = (event, item) => {\n        // Update UI.\n        const value = datumOf(item);\n        const elementSet = new Set(\n          (elementGroup as InternMap<unknown, any[]>).get(value),\n        );\n        for (const e of elements) {\n          if (elementSet.has(e)) setState(e, 'active');\n          else setState(e, 'inactive');\n        }\n        updateLegendState(item);\n\n        // Emit events.\n        const { nativeEvent = true } = event;\n        if (!nativeEvent) return;\n        emitter.emit('legend:highlight', {\n          ...event,\n          nativeEvent,\n          data: { channel, value },\n        });\n      };\n\n      const itemPointerover = new Map();\n\n      // Add listener for the legend items.\n      for (const item of items) {\n        const pointerover = (event) => {\n          highlightItem(event, item);\n        };\n        item.addEventListener('pointerover', pointerover);\n        itemPointerover.set(item, pointerover);\n      }\n\n      // Add listener for the legend group.\n      const pointerleave = (event) => {\n        for (const e of elements) removeState(e, 'inactive', 'active');\n        updateLegendState(null);\n\n        // Emit events.\n        const { nativeEvent = true } = event;\n        if (!nativeEvent) return;\n        emitter.emit('legend:unhighlight', { nativeEvent });\n      };\n\n      const onHighlight = (event) => {\n        const { nativeEvent, data } = event;\n        if (nativeEvent) return;\n        const { channel: specifiedChannel, value } = data;\n        if (specifiedChannel !== channel) return;\n        const item = items.find((d) => datumOf(d) === value);\n        if (!item) return;\n        highlightItem({ nativeEvent: false }, item);\n      };\n\n      const onUnHighlight = (event) => {\n        const { nativeEvent } = event;\n        if (nativeEvent) return;\n        pointerleave({ nativeEvent: false });\n      };\n\n      legend.addEventListener('pointerleave', pointerleave);\n      emitter.on('legend:highlight', onHighlight);\n      emitter.on('legend:unhighlight', onUnHighlight);\n\n      const destroy = () => {\n        legend.removeEventListener(pointerleave);\n        emitter.off('legend:highlight', onHighlight);\n        emitter.off('legend:unhighlight', onUnHighlight);\n        for (const [item, pointerover] of itemPointerover) {\n          item.removeEventListener(pointerover);\n        }\n      };\n      destroys.push(destroy);\n    }\n\n    return () => destroys.forEach((d) => d());\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}