{"ast":null,"code":"import { deepMix } from '@antv/util';\nimport { column, columnOf } from './utils/helper';\nimport { createGroups } from './utils/order';\n/**\n * The DiffY transform apply offset for y0 channels.\n * Keep y unchanged, set y1 = max(otherY), if y1 > y, remove the data.\n */\nexport const DiffY = (options = {}) => {\n  const {\n    groupBy = 'x'\n  } = options;\n  return (I, mark) => {\n    const {\n      encode\n    } = mark;\n    const [Y] = columnOf(encode, 'y');\n    const [_, fy1] = columnOf(encode, 'y1');\n    // Create groups and apply specified order for each group.\n    const groups = createGroups(groupBy, I, mark);\n    // Only adjust Y1 channel.\n    const newY1 = new Array(I.length);\n    for (const G of groups) {\n      const YG = G.map(i => +Y[i]);\n      // Process each series.\n      for (let idx = 0; idx < G.length; idx++) {\n        const i = G[idx];\n        // Get the max Y of current group with current Y exclude.\n        const max = Math.max(...YG.filter((_, _i) => _i !== idx));\n        // Diff Y value.\n        newY1[i] = +Y[i] > max ? max : Y[i];\n      }\n    }\n    return [I, deepMix({}, mark, {\n      encode: {\n        y1: column(newY1, fy1)\n      }\n    })];\n  };\n};\nDiffY.props = {};","map":{"version":3,"names":["deepMix","column","columnOf","createGroups","DiffY","options","groupBy","I","mark","encode","Y","_","fy1","groups","newY1","Array","length","G","YG","map","i","idx","max","Math","filter","_i","y1","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/transform/diffY.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { TransformComponent as TC } from '../runtime';\nimport { DiffYTransform } from '../spec';\nimport { column, columnOf } from './utils/helper';\nimport { createGroups } from './utils/order';\n\nexport type DiffYOptions = Omit<DiffYTransform, 'type'>;\n\n/**\n * The DiffY transform apply offset for y0 channels.\n * Keep y unchanged, set y1 = max(otherY), if y1 > y, remove the data.\n */\nexport const DiffY: TC<DiffYOptions> = (options = {}) => {\n  const { groupBy = 'x' } = options;\n  return (I, mark) => {\n    const { encode } = mark;\n    const [Y] = columnOf(encode, 'y');\n    const [_, fy1] = columnOf(encode, 'y1');\n\n    // Create groups and apply specified order for each group.\n    const groups = createGroups(groupBy, I, mark);\n\n    // Only adjust Y1 channel.\n    const newY1 = new Array(I.length);\n    for (const G of groups) {\n      const YG = G.map((i) => +Y[i]);\n      // Process each series.\n      for (let idx = 0; idx < G.length; idx++) {\n        const i = G[idx];\n        // Get the max Y of current group with current Y exclude.\n        const max = Math.max(...YG.filter((_, _i) => _i !== idx));\n        // Diff Y value.\n        newY1[i] = +Y[i] > max ? max : Y[i];\n      }\n    }\n\n    return [\n      I,\n      deepMix({}, mark, {\n        encode: {\n          y1: column(newY1, fy1),\n        },\n      }),\n    ];\n  };\n};\n\nDiffY.props = {};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AAGpC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,gBAAgB;AACjD,SAASC,YAAY,QAAQ,eAAe;AAI5C;;;;AAIA,OAAO,MAAMC,KAAK,GAAqBA,CAACC,OAAO,GAAG,EAAE,KAAI;EACtD,MAAM;IAAEC,OAAO,GAAG;EAAG,CAAE,GAAGD,OAAO;EACjC,OAAO,CAACE,CAAC,EAAEC,IAAI,KAAI;IACjB,MAAM;MAAEC;IAAM,CAAE,GAAGD,IAAI;IACvB,MAAM,CAACE,CAAC,CAAC,GAAGR,QAAQ,CAACO,MAAM,EAAE,GAAG,CAAC;IACjC,MAAM,CAACE,CAAC,EAAEC,GAAG,CAAC,GAAGV,QAAQ,CAACO,MAAM,EAAE,IAAI,CAAC;IAEvC;IACA,MAAMI,MAAM,GAAGV,YAAY,CAACG,OAAO,EAAEC,CAAC,EAAEC,IAAI,CAAC;IAE7C;IACA,MAAMM,KAAK,GAAG,IAAIC,KAAK,CAACR,CAAC,CAACS,MAAM,CAAC;IACjC,KAAK,MAAMC,CAAC,IAAIJ,MAAM,EAAE;MACtB,MAAMK,EAAE,GAAGD,CAAC,CAACE,GAAG,CAAEC,CAAC,IAAK,CAACV,CAAC,CAACU,CAAC,CAAC,CAAC;MAC9B;MACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,CAAC,CAACD,MAAM,EAAEK,GAAG,EAAE,EAAE;QACvC,MAAMD,CAAC,GAAGH,CAAC,CAACI,GAAG,CAAC;QAChB;QACA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGJ,EAAE,CAACM,MAAM,CAAC,CAACb,CAAC,EAAEc,EAAE,KAAKA,EAAE,KAAKJ,GAAG,CAAC,CAAC;QACzD;QACAP,KAAK,CAACM,CAAC,CAAC,GAAG,CAACV,CAAC,CAACU,CAAC,CAAC,GAAGE,GAAG,GAAGA,GAAG,GAAGZ,CAAC,CAACU,CAAC,CAAC;;;IAIvC,OAAO,CACLb,CAAC,EACDP,OAAO,CAAC,EAAE,EAAEQ,IAAI,EAAE;MAChBC,MAAM,EAAE;QACNiB,EAAE,EAAEzB,MAAM,CAACa,KAAK,EAAEF,GAAG;;KAExB,CAAC,CACH;EACH,CAAC;AACH,CAAC;AAEDR,KAAK,CAACuB,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}