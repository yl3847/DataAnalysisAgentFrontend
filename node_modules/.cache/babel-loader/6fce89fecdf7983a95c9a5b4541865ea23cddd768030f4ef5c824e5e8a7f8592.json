{"ast":null,"code":"/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nimport { zipObject } from '../util';\nconst twoLayerCrossCount = (g, northLayer, southLayer) => {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  const southPos = zipObject(southLayer, southLayer.map((v, i) => i));\n  const unflat = northLayer.map(v => {\n    const unsort = g.getRelatedEdges(v, 'out').map(e => {\n      return {\n        pos: southPos[e.target] || 0,\n        weight: e.data.weight\n      };\n    });\n    return unsort === null || unsort === void 0 ? void 0 : unsort.sort((a, b) => a.pos - b.pos);\n  });\n  const southEntries = unflat.flat().filter(entry => entry !== undefined);\n  // Build the accumulator tree\n  let firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  const treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  const tree = Array(treeSize).fill(0, 0, treeSize);\n  // Calculate the weighted crossings\n  let cc = 0;\n  southEntries === null || southEntries === void 0 ? void 0 : southEntries.forEach(entry => {\n    if (entry) {\n      let index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      let weightSum = 0;\n      while (index > 0) {\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        index = index - 1 >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    }\n  });\n  return cc;\n};\nexport const crossCount = (g, layering) => {\n  let cc = 0;\n  for (let i = 1; i < (layering === null || layering === void 0 ? void 0 : layering.length); i += 1) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n};","map":{"version":3,"names":["zipObject","twoLayerCrossCount","g","northLayer","southLayer","southPos","map","v","i","unflat","unsort","getRelatedEdges","e","pos","target","weight","data","sort","a","b","southEntries","flat","filter","entry","undefined","firstIndex","length","treeSize","tree","Array","fill","cc","forEach","index","weightSum","crossCount","layering"],"sources":["../../../src/antv-dagre/order/cross-count.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAASA,SAAS,QAAQ,SAAS;AAEnC,MAAMC,kBAAkB,GAAGA,CAACC,CAAQ,EAAEC,UAAgB,EAAEC,UAAgB,KAAI;EAC1E;EACA;EACA;EACA,MAAMC,QAAQ,GAAGL,SAAS,CACxBI,UAAU,EACVA,UAAU,CAACE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAC5B;EACD,MAAMC,MAAM,GAAGN,UAAU,CAACG,GAAG,CAAEC,CAAC,IAAI;IAClC,MAAMG,MAAM,GAAGR,CAAC,CAACS,eAAe,CAACJ,CAAC,EAAE,KAAK,CAAC,CAACD,GAAG,CAAEM,CAAC,IAAI;MACnD,OAAO;QAAEC,GAAG,EAAER,QAAQ,CAACO,CAAC,CAACE,MAAM,CAAC,IAAI,CAAC;QAAEC,MAAM,EAAEH,CAAC,CAACI,IAAI,CAACD;MAAM,CAAE;IAChE,CAAC,CAAC;IACF,OAAOL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,GAAG,GAAGM,CAAC,CAACN,GAAG,CAAC;EAC9C,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGX,MAAM,CAACY,IAAI,EAAE,CAACC,MAAM,CAAEC,KAAK,IAAKA,KAAK,KAAKC,SAAS,CAAC;EAEzE;EACA,IAAIC,UAAU,GAAG,CAAC;EAClB,OAAOA,UAAU,GAAGrB,UAAU,CAACsB,MAAM,EAAED,UAAU,KAAK,CAAC;EACvD,MAAME,QAAQ,GAAG,CAAC,GAAGF,UAAU,GAAG,CAAC;EACnCA,UAAU,IAAI,CAAC;EACf,MAAMG,IAAI,GAAGC,KAAK,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEH,QAAQ,CAAC;EAEjD;EACA,IAAII,EAAE,GAAG,CAAC;EACVX,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEY,OAAO,CAAET,KAAK,IAAI;IAC9B,IAAIA,KAAK,EAAE;MACT,IAAIU,KAAK,GAAGV,KAAK,CAACV,GAAG,GAAGY,UAAU;MAClCG,IAAI,CAACK,KAAK,CAAC,IAAIV,KAAK,CAACR,MAAM;MAC3B,IAAImB,SAAS,GAAG,CAAC;MACjB,OAAOD,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIA,KAAK,GAAG,CAAC,EAAE;UACbC,SAAS,IAAIN,IAAI,CAACK,KAAK,GAAG,CAAC,CAAC;;QAE9BA,KAAK,GAAIA,KAAK,GAAG,CAAC,IAAK,CAAC;QACxBL,IAAI,CAACK,KAAK,CAAC,IAAIV,KAAK,CAACR,MAAM;;MAE7BgB,EAAE,IAAIR,KAAK,CAACR,MAAO,GAAGmB,SAAS;;EAEnC,CAAC,CAAC;EAEF,OAAOH,EAAE;AACX,CAAC;AAED,OAAO,MAAMI,UAAU,GAAGA,CAACjC,CAAQ,EAAEkC,QAAgB,KAAI;EACvD,IAAIL,EAAE,GAAG,CAAC;EACV,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAG4B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEV,MAAM,GAAElB,CAAC,IAAI,CAAC,EAAE;IAC5CuB,EAAE,IAAI9B,kBAAkB,CAACC,CAAC,EAAEkC,QAAQ,CAAC5B,CAAC,GAAG,CAAC,CAAC,EAAE4B,QAAQ,CAAC5B,CAAC,CAAC,CAAC;;EAE3D,OAAOuB,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}