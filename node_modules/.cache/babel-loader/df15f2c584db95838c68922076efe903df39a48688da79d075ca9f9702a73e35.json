{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Path } from '@antv/g';\nimport { getPolygonTextStyleByPlacement } from '../../utils/polygon';\nimport { subStyleProps } from '../../utils/prefix';\nimport { mergeOptions } from '../../utils/style';\nimport { getWordWrapWidthByBox } from '../../utils/text';\nimport { BaseShape } from './base-shape';\nimport { Label } from './label';\nexport class Contour extends BaseShape {\n  constructor(options) {\n    super(mergeOptions({\n      style: Contour.defaultStyleProps\n    }, options));\n  }\n  getLabelStyle(attributes) {\n    if (!attributes.label || !attributes.d || attributes.d.length === 0) return false;\n    const _a = subStyleProps(this.getGraphicStyle(attributes), 'label'),\n      {\n        maxWidth,\n        offsetX,\n        offsetY,\n        autoRotate,\n        placement,\n        closeToPath\n      } = _a,\n      labelStyle = __rest(_a, [\"maxWidth\", \"offsetX\", \"offsetY\", \"autoRotate\", \"placement\", \"closeToPath\"]);\n    const key = this.shapeMap.key;\n    const keyBounds = key === null || key === void 0 ? void 0 : key.getRenderBounds();\n    return Object.assign(getPolygonTextStyleByPlacement(keyBounds, placement, offsetX, offsetY, closeToPath, attributes.d, autoRotate), {\n      wordWrapWidth: getWordWrapWidthByBox(keyBounds, maxWidth)\n    }, labelStyle);\n  }\n  getKeyStyle(attributes) {\n    return this.getGraphicStyle(attributes);\n  }\n  render(attributes, container) {\n    this.upsert('key', Path, this.getKeyStyle(attributes), container);\n    this.upsert('label', Label, this.getLabelStyle(attributes), container);\n  }\n}\nContour.defaultStyleProps = {\n  label: true,\n  labelPlacement: 'bottom',\n  labelCloseToPath: true,\n  labelAutoRotate: true,\n  labelOffsetX: 0,\n  labelOffsetY: 0\n};","map":{"version":3,"names":["Path","getPolygonTextStyleByPlacement","subStyleProps","mergeOptions","getWordWrapWidthByBox","BaseShape","Label","Contour","constructor","options","style","defaultStyleProps","getLabelStyle","attributes","label","d","length","_a","getGraphicStyle","maxWidth","offsetX","offsetY","autoRotate","placement","closeToPath","labelStyle","__rest","key","shapeMap","keyBounds","getRenderBounds","Object","assign","wordWrapWidth","getKeyStyle","render","container","upsert","labelPlacement","labelCloseToPath","labelAutoRotate","labelOffsetX","labelOffsetY"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/shapes/contour.ts"],"sourcesContent":["import type { DisplayObjectConfig, Group, PathStyleProps } from '@antv/g';\nimport { Path } from '@antv/g';\nimport type { CardinalPlacement, Prefix } from '../../types';\nimport { getPolygonTextStyleByPlacement } from '../../utils/polygon';\nimport { subStyleProps } from '../../utils/prefix';\nimport { mergeOptions } from '../../utils/style';\nimport { getWordWrapWidthByBox } from '../../utils/text';\nimport type { LabelStyleProps } from '../shapes';\nimport { BaseShape } from './base-shape';\nimport { Label } from './label';\n\nexport interface ContourLabelStyleProps extends LabelStyleProps {\n  /**\n   * <zh/> 标签位置\n   *\n   * <en/> Label position\n   * @defaultValue 'bottom'\n   */\n  placement?: CardinalPlacement | 'center';\n  /**\n   * <zh/> 标签是否贴合轮廓\n   *\n   * <en/> Whether the label is close to the contour\n   * @defaultValue true\n   */\n  closeToPath?: boolean;\n  /**\n   * <zh/> 标签是否跟随轮廓旋转，仅在 closeToPath 为 true 时生效\n   *\n   * <en/> Whether the label rotates with the contour. Only effective when closeToPath is true\n   * @defaultValue true\n   */\n  autoRotate?: boolean;\n  /**\n   * <zh/> x 轴偏移量\n   *\n   * <en/> Label x-axis offset\n   * @defaultValue 0\n   */\n  offsetX?: number;\n  /**\n   * <zh/> y 轴偏移量\n   *\n   * <en/> Label y-axis offset\n   * @defaultValue 0\n   */\n  offsetY?: number;\n  /**\n   * <zh/> 文本的最大宽度，超出会自动省略\n   *\n   * <en/> The maximum width of the text, which will be automatically ellipsis if exceeded\n   */\n  maxWidth?: number;\n}\n\nexport interface ContourStyleProps extends PathStyleProps, Prefix<'label', ContourLabelStyleProps> {\n  /**\n   * <zh/> 是否显示标签\n   *\n   * <en/> Whether to display the label\n   * @defaultValue true\n   */\n  label?: boolean;\n}\ntype ParsedContourStyleProps = Required<ContourStyleProps>;\ntype ContourOptions = DisplayObjectConfig<ContourStyleProps>;\n\nexport class Contour extends BaseShape<ContourStyleProps> {\n  static defaultStyleProps: Partial<ContourStyleProps> = {\n    label: true,\n    labelPlacement: 'bottom',\n    labelCloseToPath: true,\n    labelAutoRotate: true,\n    labelOffsetX: 0,\n    labelOffsetY: 0,\n  };\n\n  constructor(options: ContourOptions) {\n    super(mergeOptions({ style: Contour.defaultStyleProps }, options));\n  }\n\n  protected getLabelStyle(attributes: ParsedContourStyleProps): LabelStyleProps | false {\n    if (!attributes.label || !attributes.d || attributes.d.length === 0) return false;\n    const { maxWidth, offsetX, offsetY, autoRotate, placement, closeToPath, ...labelStyle } = subStyleProps<\n      Required<ContourLabelStyleProps>\n    >(this.getGraphicStyle(attributes), 'label');\n\n    const key = this.shapeMap.key;\n    const keyBounds = key?.getRenderBounds();\n\n    return Object.assign(\n      getPolygonTextStyleByPlacement(keyBounds, placement, offsetX, offsetY, closeToPath, attributes.d, autoRotate),\n      { wordWrapWidth: getWordWrapWidthByBox(keyBounds, maxWidth) },\n      labelStyle,\n    );\n  }\n\n  protected getKeyStyle(attributes: ParsedContourStyleProps): PathStyleProps {\n    return this.getGraphicStyle(attributes);\n  }\n\n  public render(attributes: ParsedContourStyleProps, container: Group): void {\n    this.upsert('key', Path, this.getKeyStyle(attributes), container);\n    this.upsert('label', Label, this.getLabelStyle(attributes), container);\n  }\n}\n"],"mappings":";;;;;;;;AACA,SAASA,IAAI,QAAQ,SAAS;AAE9B,SAASC,8BAA8B,QAAQ,qBAAqB;AACpE,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,qBAAqB,QAAQ,kBAAkB;AAExD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,KAAK,QAAQ,SAAS;AA0D/B,OAAM,MAAOC,OAAQ,SAAQF,SAA4B;EAUvDG,YAAYC,OAAuB;IACjC,KAAK,CAACN,YAAY,CAAC;MAAEO,KAAK,EAAEH,OAAO,CAACI;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EACpE;EAEUG,aAAaA,CAACC,UAAmC;IACzD,IAAI,CAACA,UAAU,CAACC,KAAK,IAAI,CAACD,UAAU,CAACE,CAAC,IAAIF,UAAU,CAACE,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;IACjF,MAAMC,EAAA,GAAoFf,aAAa,CAErG,IAAI,CAACgB,eAAe,CAACL,UAAU,CAAC,EAAE,OAAO,CAAC;MAFtC;QAAEM,QAAQ;QAAEC,OAAO;QAAEC,OAAO;QAAEC,UAAU;QAAEC,SAAS;QAAEC;MAAW,IAAAP,EAE1B;MAF+BQ,UAAU,GAAAC,MAAA,CAAAT,EAAA,EAA/E,4EAAiF,CAE3C;IAE5C,MAAMU,GAAG,GAAG,IAAI,CAACC,QAAQ,CAACD,GAAG;IAC7B,MAAME,SAAS,GAAGF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEG,eAAe,EAAE;IAExC,OAAOC,MAAM,CAACC,MAAM,CAClB/B,8BAA8B,CAAC4B,SAAS,EAAEN,SAAS,EAAEH,OAAO,EAAEC,OAAO,EAAEG,WAAW,EAAEX,UAAU,CAACE,CAAC,EAAEO,UAAU,CAAC,EAC7G;MAAEW,aAAa,EAAE7B,qBAAqB,CAACyB,SAAS,EAAEV,QAAQ;IAAC,CAAE,EAC7DM,UAAU,CACX;EACH;EAEUS,WAAWA,CAACrB,UAAmC;IACvD,OAAO,IAAI,CAACK,eAAe,CAACL,UAAU,CAAC;EACzC;EAEOsB,MAAMA,CAACtB,UAAmC,EAAEuB,SAAgB;IACjE,IAAI,CAACC,MAAM,CAAC,KAAK,EAAErC,IAAI,EAAE,IAAI,CAACkC,WAAW,CAACrB,UAAU,CAAC,EAAEuB,SAAS,CAAC;IACjE,IAAI,CAACC,MAAM,CAAC,OAAO,EAAE/B,KAAK,EAAE,IAAI,CAACM,aAAa,CAACC,UAAU,CAAC,EAAEuB,SAAS,CAAC;EACxE;;AApCO7B,OAAA,CAAAI,iBAAiB,GAA+B;EACrDG,KAAK,EAAE,IAAI;EACXwB,cAAc,EAAE,QAAQ;EACxBC,gBAAgB,EAAE,IAAI;EACtBC,eAAe,EAAE,IAAI;EACrBC,YAAY,EAAE,CAAC;EACfC,YAAY,EAAE;CACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}