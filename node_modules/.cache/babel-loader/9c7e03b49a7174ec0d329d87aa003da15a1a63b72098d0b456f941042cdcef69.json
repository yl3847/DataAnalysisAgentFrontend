{"ast":null,"code":"import { clone } from \"@antv/util\";\nimport { Graph, VACANT_NODE_LABEL, VACANT_GRAPH_ID, VACANT_EDGE_LABEL } from \"./struct\";\nvar DFSedge = /** @class */function () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || VACANT_NODE_LABEL\n    };\n  }\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  return DFSedge;\n}();\n// DFScode 是 DESedge 的数组\nvar DFScode = /** @class */function () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n    return true;\n  };\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = VACANT_GRAPH_ID;\n    }\n    if (directed === void 0) {\n      directed = false;\n    }\n    var graph = new Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  };\n  // 建立 rightmost path\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n    return this.rmpath;\n  };\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n  return DFScode;\n}();\nvar History = /** @class */function () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    }\n    // 倒序\n    this.edges = this.edges.reverse();\n  }\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n  return History;\n}();\nvar GSpan = /** @class */function () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n      _b = _a.minSupport,\n      minSupport = _b === void 0 ? 2 : _b,\n      _c = _a.minNodeNum,\n      minNodeNum = _c === void 0 ? 1 : _c,\n      _d = _a.maxNodeNum,\n      maxNodeNum = _d === void 0 ? 4 : _d,\n      _e = _a.top,\n      top = _e === void 0 ? 10 : _e,\n      _f = _a.directed,\n      directed = _f === void 0 ? false : _f,\n      _g = _a.verbose,\n      verbose = _g === void 0 ? false : _g;\n    // -------- 第零步，初始化-------\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0;\n    // TODO? timestamp = {}\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  }\n  // Line 352\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n    return null;\n  };\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n    return result;\n  };\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n    return result;\n  };\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(otherNode.label);\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    });\n    // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n    var minLabel = this.findMinLabel(root); // line 419\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2));\n    // line 423\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n      var backwardRoot = {};\n      var flag = false,\n        newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\";\n        // line 435\n        projected.forEach(function (p) {\n          var history = new History(p);\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n        if (state_1 === \"break\") break;\n      }\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n        if (state_2 === \"break\") break;\n      }\n      if (!flag) return true;\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[\"\".concat(forwardMinEdgeNodeLabel.edgeLabel, \"-\").concat(forwardMinEdgeNodeLabel.nodeLabel2)].projected);\n    };\n    var key = \"\".concat(minLabel.nodeLabel1, \"-\").concat(minLabel.edgeLabel, \"-\").concat(minLabel.nodeLabel2);\n    return projectIsMin(root[key].projected);\n  };\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push(clone(graph));\n  };\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p);\n      // backward Line 526\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n        if (backwardEdge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(backwardEdge.label);\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      }\n      // pure forward\n      if (nodeNum >= _this.maxNodeNum) return;\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n      forwardPureEdges.forEach(function (edge) {\n        var key = \"\".concat(maxToC, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      };\n      // rmpath forward\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    });\n    // backward\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n        toNodeId = _a.toNodeId,\n        edgeLabel = _a.edgeLabel;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n      _this.subGraphMining(backwardRoot[key].projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n    // forward\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n        fromNodeId = _a.fromNodeId,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n      _this.subGraphMining(forwardRoot[key].projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n      nodeEdgeNodeCounter = {};\n    // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n    var nodeLableCounted = {};\n    // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap;\n      // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = \"\".concat(key, \"-\").concat(nodeLabel);\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        };\n        // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = \"\".concat(key, \"-\").concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          var nodeEdgeNodeKey = \"\".concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    });\n    // 计算频繁的节点\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g);\n      // if (minNodeNum <= 1) reportSize1 TODO\n    });\n    return frequentSize1Subgraphs;\n  };\n  GSpan.prototype.run = function () {\n    var _this = this;\n    // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed;\n    // PDFS 数组的 map Line 304\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap;\n      // Line 306\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node);\n        // Line 308\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(toNode.label);\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    });\n    // Line 313\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n        projected = _a.projected,\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n      _this.subGraphMining(projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n  return GSpan;\n}();\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n      graphData.nodes.push((_a = {\n        id: \"\".concat(node.id)\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n      graphData.edges.push((_a = {\n        source: \"\".concat(edge.from),\n        target: \"\".concat(edge.to)\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n    _a = params.directed,\n    directed = _a === void 0 ? false : _a,\n    _b = params.nodeLabelProp,\n    nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n    _c = params.edgeLabelProp,\n    edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n    maxNodeNum = params.maxNodeNum,\n    minNodeNum = params.minNodeNum,\n    verbose = params.verbose,\n    top = params.top;\n  // ------- 初始化与执行算法 -------\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\nexport default gSpan;","map":{"version":3,"names":["clone","Graph","VACANT_NODE_LABEL","VACANT_GRAPH_ID","VACANT_EDGE_LABEL","DFSedge","fromNode","toNode","fromNodeLabel","edgeLabel","toNodeLabel","nodeEdgeNodeLabel","nodeLabel1","nodeLabel2","prototype","equalTo","other","formNode","notEqualTo","DFScode","rmpath","dfsEdgeList","aLength","length","bLength","i","pushBack","push","toGraph","graphId","directed","graph","forEach","dfsEdge","fromNodeId","toNodeId","_a","addNode","addEdge","undefined","buildRmpath","oldFrom","selfLength","fromNodeIdx","toNodeIdx","getNodeNum","nodeMap","Object","keys","History","pdfs","his","nodesUsed","edgesUsed","edges","e","edge","from","to","id","preNode","reverse","hasNode","node","hasEdge","GSpan","graphs","_b","minSupport","_c","minNodeNum","_d","maxNodeNum","_e","top","_f","_g","verbose","dfsCode","support","frequentSize1Subgraphs","frequentSubgraphs","counter","reportDF","findForwardRootEdges","_this","result","label","findBackwardEdge","edge1","edge2","history","edge2To","edge2ToEdges","edgeLength","findForwardPureEdges","rightmostEdge","minNodeLabel","rightmostEdgeToId","findForwardRmpathEdges","newToNodeLabel","getSupport","projected","graphMap","pro","findMinLabel","obj","minLabel","isMin","console","log","dfsCodeMin","root","nodes","forwardEdges","otherNode","concat","projectIsMin","maxToC","backwardRoot","flag","newTo","end","_loop_1","p","backwardEdge","state_1","minBackwardEdgeLabel","idx_1","forwardRoot","newFrom","forwardPureEdges","key","pathLength","_loop_2","value","forwardRmpathEdges","state_2","forwardMinEdgeNodeLabel","idx","report","subGraphMining","nodeNum","_loop_3","pop","generate1EdgeFrequentSubGraphs","nodeLabelCounter","nodeEdgeNodeCounter","nodeLableCounted","nodeEdgeNodeLabelCounted","nodeLabel","graphNodeKey","graphKey","tmp","graphNodeEdgeNodeKey","nodeEdgeNodeKey","count","g","run","forwardRootEdges","formatGraphs","nodeLabelProp","edgeLabelProp","fGraph","nodeIdxMap","j","k","sourceIdx","source","targetIdx","target","toGraphDatas","graphData","DEFAULT_LABEL_NAME","gSpan","params","formattedGraphs","algoParams","calculator"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/gSpan/gSpan.js"],"sourcesContent":["import { clone } from \"@antv/util\";\nimport { Graph, VACANT_NODE_LABEL, VACANT_GRAPH_ID, VACANT_EDGE_LABEL } from \"./struct\";\nvar DFSedge = /** @class */function () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || VACANT_NODE_LABEL\n    };\n  }\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  return DFSedge;\n}();\n// DFScode 是 DESedge 的数组\nvar DFScode = /** @class */function () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n    return true;\n  };\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = VACANT_GRAPH_ID;\n    }\n    if (directed === void 0) {\n      directed = false;\n    }\n    var graph = new Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  };\n  // 建立 rightmost path\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n    return this.rmpath;\n  };\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n  return DFScode;\n}();\nvar History = /** @class */function () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    }\n    // 倒序\n    this.edges = this.edges.reverse();\n  }\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n  return History;\n}();\nvar GSpan = /** @class */function () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n      _b = _a.minSupport,\n      minSupport = _b === void 0 ? 2 : _b,\n      _c = _a.minNodeNum,\n      minNodeNum = _c === void 0 ? 1 : _c,\n      _d = _a.maxNodeNum,\n      maxNodeNum = _d === void 0 ? 4 : _d,\n      _e = _a.top,\n      top = _e === void 0 ? 10 : _e,\n      _f = _a.directed,\n      directed = _f === void 0 ? false : _f,\n      _g = _a.verbose,\n      verbose = _g === void 0 ? false : _g;\n    // -------- 第零步，初始化-------\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0;\n    // TODO? timestamp = {}\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  }\n  // Line 352\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n    return null;\n  };\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n    return result;\n  };\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n    return result;\n  };\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(otherNode.label);\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    });\n    // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n    var minLabel = this.findMinLabel(root); // line 419\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2));\n    // line 423\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n      var backwardRoot = {};\n      var flag = false,\n        newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\";\n        // line 435\n        projected.forEach(function (p) {\n          var history = new History(p);\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n        if (state_1 === \"break\") break;\n      }\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n        if (state_2 === \"break\") break;\n      }\n      if (!flag) return true;\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[\"\".concat(forwardMinEdgeNodeLabel.edgeLabel, \"-\").concat(forwardMinEdgeNodeLabel.nodeLabel2)].projected);\n    };\n    var key = \"\".concat(minLabel.nodeLabel1, \"-\").concat(minLabel.edgeLabel, \"-\").concat(minLabel.nodeLabel2);\n    return projectIsMin(root[key].projected);\n  };\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push(clone(graph));\n  };\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p);\n      // backward Line 526\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n        if (backwardEdge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(backwardEdge.label);\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      }\n      // pure forward\n      if (nodeNum >= _this.maxNodeNum) return;\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n      forwardPureEdges.forEach(function (edge) {\n        var key = \"\".concat(maxToC, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      };\n      // rmpath forward\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    });\n    // backward\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n        toNodeId = _a.toNodeId,\n        edgeLabel = _a.edgeLabel;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n      _this.subGraphMining(backwardRoot[key].projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n    // forward\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n        fromNodeId = _a.fromNodeId,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n      _this.subGraphMining(forwardRoot[key].projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n      nodeEdgeNodeCounter = {};\n    // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n    var nodeLableCounted = {};\n    // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap;\n      // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = \"\".concat(key, \"-\").concat(nodeLabel);\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        };\n        // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = \"\".concat(key, \"-\").concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          var nodeEdgeNodeKey = \"\".concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    });\n    // 计算频繁的节点\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g);\n      // if (minNodeNum <= 1) reportSize1 TODO\n    });\n\n    return frequentSize1Subgraphs;\n  };\n  GSpan.prototype.run = function () {\n    var _this = this;\n    // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed;\n    // PDFS 数组的 map Line 304\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap;\n      // Line 306\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node);\n        // Line 308\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(toNode.label);\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    });\n    // Line 313\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n        projected = _a.projected,\n        nodeLabel1 = _a.nodeLabel1,\n        edgeLabel = _a.edgeLabel,\n        nodeLabel2 = _a.nodeLabel2;\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n      _this.subGraphMining(projected);\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n  return GSpan;\n}();\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n      graphData.nodes.push((_a = {\n        id: \"\".concat(node.id)\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n      graphData.edges.push((_a = {\n        source: \"\".concat(edge.from),\n        target: \"\".concat(edge.to)\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n    _a = params.directed,\n    directed = _a === void 0 ? false : _a,\n    _b = params.nodeLabelProp,\n    nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n    _c = params.edgeLabelProp,\n    edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n    maxNodeNum = params.maxNodeNum,\n    minNodeNum = params.minNodeNum,\n    verbose = params.verbose,\n    top = params.top;\n  // ------- 初始化与执行算法 -------\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\nexport default gSpan;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}