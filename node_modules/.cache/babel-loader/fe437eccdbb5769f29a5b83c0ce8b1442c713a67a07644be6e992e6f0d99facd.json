{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isFunction, uniqueId } from '@antv/util';\nimport { CanvasEvent, ComboEvent, CommonEvent, EdgeEvent, NodeEvent } from '../constants';\nimport { BaseBehavior } from './base-behavior';\nconst ASSIST_EDGE_ID = 'g6-create-edge-assist-edge-id';\nconst ASSIST_NODE_ID = 'g6-create-edge-assist-node-id';\n/**\n * <zh/> 创建边交互\n *\n * <en/> Create edge behavior\n * @remarks\n * <zh/> 通过拖拽或点击节点创建边，支持自定义边样式。\n *\n * <en/> Create edges by dragging or clicking nodes, and support custom edge styles.\n */\nexport class CreateEdge extends BaseBehavior {\n  constructor(context, options) {\n    super(context, Object.assign({}, CreateEdge.defaultOptions, options));\n    this.drop = event => __awaiter(this, void 0, void 0, function* () {\n      const {\n        targetType\n      } = event;\n      if (['combo', 'node'].includes(targetType) && this.source) {\n        yield this.handleCreateEdge(event);\n      } else {\n        yield this.cancelEdge();\n      }\n    });\n    this.handleCreateEdge = event => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c;\n      if (!this.validate(event)) return;\n      const {\n        graph,\n        canvas,\n        batch,\n        element\n      } = this.context;\n      const {\n        style\n      } = this.options;\n      if (this.source) {\n        this.createEdge(event);\n        yield this.cancelEdge();\n        return;\n      }\n      batch.startBatch();\n      canvas.setCursor('crosshair');\n      this.source = this.getSelectedNodeIDs([event.target.id])[0];\n      const sourceNode = graph.getElementData(this.source);\n      graph.addNodeData([{\n        id: ASSIST_NODE_ID,\n        style: {\n          visibility: 'hidden',\n          ports: [{\n            key: 'port-1',\n            placement: [0.5, 0.5]\n          }],\n          x: (_a = sourceNode.style) === null || _a === void 0 ? void 0 : _a.x,\n          y: (_b = sourceNode.style) === null || _b === void 0 ? void 0 : _b.y\n        }\n      }]);\n      graph.addEdgeData([{\n        id: ASSIST_EDGE_ID,\n        source: this.source,\n        target: ASSIST_NODE_ID,\n        style: Object.assign({\n          pointerEvents: 'none'\n        }, style)\n      }]);\n      yield (_c = element.draw({\n        animation: false\n      })) === null || _c === void 0 ? void 0 : _c.finished;\n    });\n    this.updateAssistEdge = event => __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      if (!this.source) return;\n      const {\n        model,\n        element\n      } = this.context;\n      model.translateNodeTo(ASSIST_NODE_ID, [event.canvas.x, event.canvas.y]);\n      yield (_a = element.draw({\n        animation: false,\n        silence: true\n      })) === null || _a === void 0 ? void 0 : _a.finished;\n    });\n    this.createEdge = event => {\n      var _a, _b;\n      const {\n        graph\n      } = this.context;\n      const {\n        style,\n        onFinish,\n        onCreate\n      } = this.options;\n      const targetId = (_a = event.target) === null || _a === void 0 ? void 0 : _a.id;\n      if (targetId === undefined || this.source === undefined) return;\n      const target = (_b = this.getSelectedNodeIDs([event.target.id])) === null || _b === void 0 ? void 0 : _b[0];\n      const id = `${this.source}-${target}-${uniqueId()}`;\n      const edgeData = onCreate({\n        id,\n        source: this.source,\n        target,\n        style\n      });\n      if (edgeData) {\n        graph.addEdgeData([edgeData]);\n        onFinish(edgeData);\n      }\n    };\n    this.cancelEdge = () => __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      if (!this.source) return;\n      const {\n        graph,\n        element,\n        batch\n      } = this.context;\n      graph.removeNodeData([ASSIST_NODE_ID]);\n      this.source = undefined;\n      yield (_a = element.draw({\n        animation: false\n      })) === null || _a === void 0 ? void 0 : _a.finished;\n      batch.endBatch();\n    });\n    this.bindEvents();\n  }\n  /**\n   * Update options\n   * @param options - The options to update\n   * @internal\n   */\n  update(options) {\n    super.update(options);\n    this.bindEvents();\n  }\n  bindEvents() {\n    const {\n      graph\n    } = this.context;\n    const {\n      trigger\n    } = this.options;\n    this.unbindEvents();\n    if (trigger === 'click') {\n      graph.on(NodeEvent.CLICK, this.handleCreateEdge);\n      graph.on(ComboEvent.CLICK, this.handleCreateEdge);\n      graph.on(CanvasEvent.CLICK, this.cancelEdge);\n      graph.on(EdgeEvent.CLICK, this.cancelEdge);\n    } else {\n      graph.on(NodeEvent.DRAG_START, this.handleCreateEdge);\n      graph.on(ComboEvent.DRAG_START, this.handleCreateEdge);\n      graph.on(CommonEvent.POINTER_UP, this.drop);\n    }\n    graph.on(CommonEvent.POINTER_MOVE, this.updateAssistEdge);\n  }\n  getSelectedNodeIDs(currTarget) {\n    return Array.from(new Set(this.context.graph.getElementDataByState('node', this.options.state).map(node => node.id).concat(currTarget)));\n  }\n  validate(event) {\n    if (this.destroyed) return false;\n    const {\n      enable\n    } = this.options;\n    if (isFunction(enable)) return enable(event);\n    return !!enable;\n  }\n  unbindEvents() {\n    const {\n      graph\n    } = this.context;\n    graph.off(NodeEvent.CLICK, this.handleCreateEdge);\n    graph.off(ComboEvent.CLICK, this.handleCreateEdge);\n    graph.off(CanvasEvent.CLICK, this.cancelEdge);\n    graph.off(EdgeEvent.CLICK, this.cancelEdge);\n    graph.off(NodeEvent.DRAG_START, this.handleCreateEdge);\n    graph.off(ComboEvent.DRAG_START, this.handleCreateEdge);\n    graph.off(CommonEvent.POINTER_UP, this.drop);\n    graph.off(CommonEvent.POINTER_MOVE, this.updateAssistEdge);\n  }\n  destroy() {\n    this.unbindEvents();\n    super.destroy();\n  }\n}\nCreateEdge.defaultOptions = {\n  animation: true,\n  enable: true,\n  style: {},\n  trigger: 'drag',\n  onCreate: data => data,\n  onFinish: () => {}\n};","map":{"version":3,"names":["isFunction","uniqueId","CanvasEvent","ComboEvent","CommonEvent","EdgeEvent","NodeEvent","BaseBehavior","ASSIST_EDGE_ID","ASSIST_NODE_ID","CreateEdge","constructor","context","options","Object","assign","defaultOptions","drop","event","__awaiter","targetType","includes","source","handleCreateEdge","cancelEdge","validate","graph","canvas","batch","element","style","createEdge","startBatch","setCursor","getSelectedNodeIDs","target","id","sourceNode","getElementData","addNodeData","visibility","ports","key","placement","x","_a","y","_b","addEdgeData","pointerEvents","_c","draw","animation","finished","updateAssistEdge","model","translateNodeTo","silence","onFinish","onCreate","targetId","undefined","edgeData","removeNodeData","endBatch","bindEvents","update","trigger","unbindEvents","on","CLICK","DRAG_START","POINTER_UP","POINTER_MOVE","currTarget","Array","from","Set","getElementDataByState","state","map","node","concat","destroyed","enable","off","destroy","data"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/behaviors/create-edge.ts"],"sourcesContent":["import { isFunction, uniqueId } from '@antv/util';\nimport { CanvasEvent, ComboEvent, CommonEvent, EdgeEvent, NodeEvent } from '../constants';\nimport type { RuntimeContext } from '../runtime/types';\nimport type { EdgeData } from '../spec';\nimport type { EdgeStyle } from '../spec/element/edge';\nimport type { ID, IElementEvent, IPointerEvent, NodeLikeData } from '../types';\nimport type { BaseBehaviorOptions } from './base-behavior';\nimport { BaseBehavior } from './base-behavior';\n\nconst ASSIST_EDGE_ID = 'g6-create-edge-assist-edge-id';\nconst ASSIST_NODE_ID = 'g6-create-edge-assist-node-id';\n\n/**\n * <zh/> 创建边交互配置项\n *\n * <en/> Create edge behavior options\n */\nexport interface CreateEdgeOptions extends BaseBehaviorOptions {\n  /**\n   * <zh/> 是否启用创建边的功能\n   *\n   * <en/> Whether to enable the function of creating edges\n   * @defaultValue true\n   */\n  enable?: boolean | ((event: IPointerEvent) => boolean);\n  /**\n   * <zh/> 新建边的样式配置\n   *\n   * <en/> Style configs of the new edge\n   */\n  style?: EdgeStyle;\n  /**\n   * <zh/> 交互配置 点击 或 拖拽\n   *\n   * <en/> trigger click or drag.\n   * @defaultValue 'drag'\n   */\n  trigger?: 'click' | 'drag';\n  /**\n   * <zh/> 成功创建边回调\n   *\n   * <en/> Callback when create is completed.\n   */\n  onFinish?: (edge: EdgeData) => void;\n  /**\n   * <zh/> 创建边回调，返回边数据。如果返回 undefined，则不创建该边。\n   *\n   * <en/> Callback when create edge, return EdgeData. If returns undefined, the edge will not be created.\n   */\n  onCreate?: (edge: EdgeData) => EdgeData | undefined;\n}\n\n/**\n * <zh/> 创建边交互\n *\n * <en/> Create edge behavior\n * @remarks\n * <zh/> 通过拖拽或点击节点创建边，支持自定义边样式。\n *\n * <en/> Create edges by dragging or clicking nodes, and support custom edge styles.\n */\nexport class CreateEdge extends BaseBehavior<CreateEdgeOptions> {\n  static defaultOptions: Partial<CreateEdgeOptions> = {\n    animation: true,\n    enable: true,\n    style: {},\n    trigger: 'drag',\n    onCreate: (data) => data,\n    onFinish: () => {},\n  };\n\n  public source?: ID;\n\n  constructor(context: RuntimeContext, options: CreateEdgeOptions) {\n    super(context, Object.assign({}, CreateEdge.defaultOptions, options));\n    this.bindEvents();\n  }\n\n  /**\n   * Update options\n   * @param options - The options to update\n   * @internal\n   */\n  public update(options: Partial<CreateEdgeOptions>): void {\n    super.update(options);\n    this.bindEvents();\n  }\n\n  private bindEvents() {\n    const { graph } = this.context;\n    const { trigger } = this.options;\n    this.unbindEvents();\n\n    if (trigger === 'click') {\n      graph.on(NodeEvent.CLICK, this.handleCreateEdge);\n      graph.on(ComboEvent.CLICK, this.handleCreateEdge);\n      graph.on(CanvasEvent.CLICK, this.cancelEdge);\n      graph.on(EdgeEvent.CLICK, this.cancelEdge);\n    } else {\n      graph.on(NodeEvent.DRAG_START, this.handleCreateEdge);\n      graph.on(ComboEvent.DRAG_START, this.handleCreateEdge);\n      graph.on(CommonEvent.POINTER_UP, this.drop);\n    }\n\n    graph.on(CommonEvent.POINTER_MOVE, this.updateAssistEdge);\n  }\n\n  private drop = async (event: IElementEvent) => {\n    const { targetType } = event;\n    if (['combo', 'node'].includes(targetType) && this.source) {\n      await this.handleCreateEdge(event);\n    } else {\n      await this.cancelEdge();\n    }\n  };\n\n  private handleCreateEdge = async (event: IElementEvent) => {\n    if (!this.validate(event)) return;\n    const { graph, canvas, batch, element } = this.context;\n    const { style } = this.options;\n\n    if (this.source) {\n      this.createEdge(event);\n      await this.cancelEdge();\n      return;\n    }\n\n    batch!.startBatch();\n    canvas.setCursor('crosshair');\n    this.source = this.getSelectedNodeIDs([event.target.id])[0];\n    const sourceNode = graph.getElementData(this.source) as NodeLikeData;\n\n    graph.addNodeData([\n      {\n        id: ASSIST_NODE_ID,\n        style: {\n          visibility: 'hidden',\n          ports: [{ key: 'port-1', placement: [0.5, 0.5] }],\n          x: sourceNode.style?.x,\n          y: sourceNode.style?.y,\n        },\n      },\n    ]);\n\n    graph.addEdgeData([\n      {\n        id: ASSIST_EDGE_ID,\n        source: this.source,\n        target: ASSIST_NODE_ID,\n        style: {\n          pointerEvents: 'none',\n          ...style,\n        },\n      },\n    ]);\n    await element!.draw({ animation: false })?.finished;\n  };\n\n  private updateAssistEdge = async (event: IPointerEvent) => {\n    if (!this.source) return;\n    const { model, element } = this.context;\n\n    model.translateNodeTo(ASSIST_NODE_ID, [event.canvas.x, event.canvas.y]);\n\n    await element!.draw({ animation: false, silence: true })?.finished;\n  };\n\n  private createEdge = (event: IElementEvent) => {\n    const { graph } = this.context;\n    const { style, onFinish, onCreate } = this.options;\n    const targetId = event.target?.id;\n    if (targetId === undefined || this.source === undefined) return;\n\n    const target = this.getSelectedNodeIDs([event.target.id])?.[0];\n    const id = `${this.source}-${target}-${uniqueId()}`;\n\n    const edgeData = onCreate({ id, source: this.source, target, style });\n    if (edgeData) {\n      graph.addEdgeData([edgeData]);\n      onFinish(edgeData);\n    }\n  };\n\n  private cancelEdge = async () => {\n    if (!this.source) return;\n    const { graph, element, batch } = this.context;\n\n    graph.removeNodeData([ASSIST_NODE_ID]);\n\n    this.source = undefined;\n\n    await element!.draw({ animation: false })?.finished;\n    batch!.endBatch();\n  };\n\n  private getSelectedNodeIDs(currTarget: ID[]) {\n    return Array.from(\n      new Set(\n        this.context.graph\n          .getElementDataByState('node', this.options.state)\n          .map((node) => node.id)\n          .concat(currTarget),\n      ),\n    );\n  }\n\n  private validate(event: IPointerEvent) {\n    if (this.destroyed) return false;\n    const { enable } = this.options;\n    if (isFunction(enable)) return enable(event);\n    return !!enable;\n  }\n\n  private unbindEvents() {\n    const { graph } = this.context;\n\n    graph.off(NodeEvent.CLICK, this.handleCreateEdge);\n    graph.off(ComboEvent.CLICK, this.handleCreateEdge);\n    graph.off(CanvasEvent.CLICK, this.cancelEdge);\n    graph.off(EdgeEvent.CLICK, this.cancelEdge);\n    graph.off(NodeEvent.DRAG_START, this.handleCreateEdge);\n    graph.off(ComboEvent.DRAG_START, this.handleCreateEdge);\n    graph.off(CommonEvent.POINTER_UP, this.drop);\n    graph.off(CommonEvent.POINTER_MOVE, this.updateAssistEdge);\n  }\n\n  public destroy() {\n    this.unbindEvents();\n    super.destroy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}