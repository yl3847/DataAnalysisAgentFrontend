{"ast":null,"code":"import { deepMix } from '@antv/util';\nimport { isUnset } from '../utils/helper';\n/**\n * Infer tooltip channel from specified channel.\n */\nexport const MaybeTooltip = options => {\n  const {\n    channel\n  } = options;\n  return (I, mark) => {\n    const {\n      encode,\n      tooltip\n    } = mark;\n    if (isUnset(tooltip)) return [I, mark];\n    const {\n      items = []\n    } = tooltip;\n    if (!items || items.length > 0) return [I, mark];\n    const channels = Array.isArray(channel) ? channel : [channel];\n    const newItems = channels.flatMap(channel => Object.keys(encode).filter(key => key.startsWith(channel)).map(key => {\n      const {\n        field,\n        value,\n        inferred = false,\n        aggregate\n      } = encode[key];\n      if (inferred) return null;\n      // Do not show inferred column.\n      if (aggregate && value) return {\n        channel: key\n      };\n      if (field) return {\n        field\n      };\n      if (value) return {\n        channel: key\n      };\n      return null;\n    }).filter(d => d !== null));\n    return [I, deepMix({}, mark, {\n      tooltip: {\n        items: newItems\n      }\n    })];\n  };\n};\nMaybeTooltip.props = {};","map":{"version":3,"names":["deepMix","isUnset","MaybeTooltip","options","channel","I","mark","encode","tooltip","items","length","channels","Array","isArray","newItems","flatMap","Object","keys","filter","key","startsWith","map","field","value","inferred","aggregate","d","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/transform/maybeTooltip.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { isUnset } from '../utils/helper';\nimport { TransformComponent as TC } from '../runtime';\n\nexport type MaybeTooltipOptions = {\n  channel: string | string[];\n};\n\n/**\n * Infer tooltip channel from specified channel.\n */\nexport const MaybeTooltip: TC<MaybeTooltipOptions> = (options) => {\n  const { channel } = options;\n  return (I, mark) => {\n    const { encode, tooltip } = mark;\n    if (isUnset(tooltip)) return [I, mark];\n    const { items = [] } = tooltip;\n    if (!items || items.length > 0) return [I, mark];\n    const channels = Array.isArray(channel) ? channel : [channel];\n    const newItems = channels.flatMap((channel) =>\n      Object.keys(encode)\n        .filter((key) => key.startsWith(channel))\n        .map((key) => {\n          const { field, value, inferred = false, aggregate } = encode[key];\n          if (inferred) return null;\n          // Do not show inferred column.\n          if (aggregate && value) return { channel: key };\n          if (field) return { field };\n          if (value) return { channel: key };\n          return null;\n        })\n        .filter((d) => d !== null),\n    );\n    return [I, deepMix({}, mark, { tooltip: { items: newItems } })];\n  };\n};\n\nMaybeTooltip.props = {};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,OAAO,QAAQ,iBAAiB;AAOzC;;;AAGA,OAAO,MAAMC,YAAY,GAA6BC,OAAO,IAAI;EAC/D,MAAM;IAAEC;EAAO,CAAE,GAAGD,OAAO;EAC3B,OAAO,CAACE,CAAC,EAAEC,IAAI,KAAI;IACjB,MAAM;MAAEC,MAAM;MAAEC;IAAO,CAAE,GAAGF,IAAI;IAChC,IAAIL,OAAO,CAACO,OAAO,CAAC,EAAE,OAAO,CAACH,CAAC,EAAEC,IAAI,CAAC;IACtC,MAAM;MAAEG,KAAK,GAAG;IAAE,CAAE,GAAGD,OAAO;IAC9B,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,CAACL,CAAC,EAAEC,IAAI,CAAC;IAChD,MAAMK,QAAQ,GAAGC,KAAK,CAACC,OAAO,CAACT,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IAC7D,MAAMU,QAAQ,GAAGH,QAAQ,CAACI,OAAO,CAAEX,OAAO,IACxCY,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAChBW,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAChB,OAAO,CAAC,CAAC,CACxCiB,GAAG,CAAEF,GAAG,IAAI;MACX,MAAM;QAAEG,KAAK;QAAEC,KAAK;QAAEC,QAAQ,GAAG,KAAK;QAAEC;MAAS,CAAE,GAAGlB,MAAM,CAACY,GAAG,CAAC;MACjE,IAAIK,QAAQ,EAAE,OAAO,IAAI;MACzB;MACA,IAAIC,SAAS,IAAIF,KAAK,EAAE,OAAO;QAAEnB,OAAO,EAAEe;MAAG,CAAE;MAC/C,IAAIG,KAAK,EAAE,OAAO;QAAEA;MAAK,CAAE;MAC3B,IAAIC,KAAK,EAAE,OAAO;QAAEnB,OAAO,EAAEe;MAAG,CAAE;MAClC,OAAO,IAAI;IACb,CAAC,CAAC,CACDD,MAAM,CAAEQ,CAAC,IAAKA,CAAC,KAAK,IAAI,CAAC,CAC7B;IACD,OAAO,CAACrB,CAAC,EAAEL,OAAO,CAAC,EAAE,EAAEM,IAAI,EAAE;MAAEE,OAAO,EAAE;QAAEC,KAAK,EAAEK;MAAQ;IAAE,CAAE,CAAC,CAAC;EACjE,CAAC;AACH,CAAC;AAEDZ,YAAY,CAACyB,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}