{"ast":null,"code":"import { AABB } from '@antv/g';\nimport { clone } from '@antv/util';\nimport { isPoint } from './is';\nimport { isBetween } from './math';\nimport { parsePadding } from './padding';\n/**\n * <zh/> 获取包围盒的宽度\n *\n * <en/> Retrieves the width of a bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的宽度 | <en/> Width of box\n */\nexport function getBBoxWidth(bbox) {\n  return bbox.max[0] - bbox.min[0];\n}\n/**\n * <zh/> 获取包围盒的高度\n *\n * <en/> Retrieve the height of a bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的高度 | <en/> Height of box\n */\nexport function getBBoxHeight(bbox) {\n  return bbox.max[1] - bbox.min[1];\n}\n/**\n * <zh/> 获取包围盒的尺寸\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的尺寸 | <en/> Size of box\n */\nexport function getBBoxSize(bbox) {\n  return [getBBoxWidth(bbox), getBBoxHeight(bbox)];\n}\n/**\n * <zh/> 获取节点的包围盒，兼容节点为点的情况\n *\n * <en/> Get the bounding box of the node, compatible with the case where the node is a point\n * @param node - <zh/> 节点或者点 | <en/> node or point\n * @param padding - <zh/> 内边距 | <en/> padding\n * @returns <zh/> 包围盒 | <en/> bounding box\n */\nexport function getNodeBBox(node, padding) {\n  const bbox = isPoint(node) ? getPointBBox(node) : node.getShape('key').getBounds();\n  return padding ? getExpandedBBox(bbox, padding) : bbox;\n}\n/**\n * <zh/> 获取单点的包围盒\n *\n * <en/> Get the bounding box of a single point\n * @param point - <zh/> 点 | <en/> Point\n * @returns <zh/> 包围盒 | <en/> Bounding box\n */\nexport function getPointBBox(point) {\n  const [x, y, z = 0] = point;\n  const bbox = new AABB();\n  bbox.setMinMax([x, y, z], [x, y, z]);\n  return bbox;\n}\n/**\n * <zh/> 获取扩大后的包围盒\n *\n * <en/> Get the expanded bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param padding - <zh/> 内边距 | <en/> Padding\n * @returns <zh/> 扩大后的包围盒 | <en/> The expanded bounding box\n */\nexport function getExpandedBBox(bbox, padding) {\n  const [top, right, bottom, left] = parsePadding(padding);\n  const [minX, minY, minZ] = bbox.min;\n  const [maxX, maxY, maxZ] = bbox.max;\n  const eBbox = new AABB();\n  eBbox.setMinMax([minX - left, minY - top, minZ], [maxX + right, maxY + bottom, maxZ]);\n  return eBbox;\n}\n/**\n * <zh/> 计算整体包围盒\n *\n * <en/> Calculate the overall bounding box\n * @param bboxes - <zh/> 包围盒列表 | <en/> List of bounding boxes\n * @returns <zh/> 整体包围盒 | <en/> Overall bounding box\n */\nexport function getCombinedBBox(bboxes) {\n  if (bboxes.length === 0) return new AABB();\n  if (bboxes.length === 1) return bboxes[0];\n  const bbox = new AABB();\n  bbox.setMinMax(bboxes[0].min, bboxes[0].max);\n  for (let i = 1; i < bboxes.length; i++) {\n    const b2 = bboxes[i];\n    bbox.setMinMax([Math.min(bbox.min[0], b2.min[0]), Math.min(bbox.min[1], b2.min[1]), Math.min(bbox.min[2], b2.min[2])], [Math.max(bbox.max[0], b2.max[0]), Math.max(bbox.max[1], b2.max[1]), Math.max(bbox.max[2], b2.max[2])]);\n  }\n  return bbox;\n}\n/**\n * <zh/> 判断 bbox1 是否完全包含在 bbox2 内\n *\n * <en/> Determine whether bbox1 is completely contained in bbox2\n * @param bbox1 - <zh/> 目标包围盒 | <en/> Target bounding box\n * @param bbox2 - <zh/> 参考包围盒 | <en/> Reference bounding box\n * @returns <zh/> 如果 bbox1 完全包含在 bbox2 内返回 true，否则返回 false | <en/> Returns true if bbox1 is completely contained in bbox2, false otherwise\n */\nexport function isBBoxInside(bbox1, bbox2) {\n  const [minX1, minY1] = bbox1.min;\n  const [maxX1, maxY1] = bbox1.max;\n  const [minX2, minY2] = bbox2.min;\n  const [maxX2, maxY2] = bbox2.max;\n  return minX1 >= minX2 && maxX1 <= maxX2 && minY1 >= minY2 && maxY1 <= maxY2;\n}\n/**\n * <zh/> 判断点是否在给定的包围盒内\n *\n * <en/> Whether the point is contained in the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns  <zh/> 如果点在包围盒内返回 true，否则返回 false | <en/> Returns true if the point is inside the bounding box, false otherwise\n */\nexport function isPointInBBox(point, bbox) {\n  return isBetween(point[0], bbox.min[0], bbox.max[0]) && isBetween(point[1], bbox.min[1], bbox.max[1]);\n}\n/**\n * <zh/> 判断点是否在给定的包围盒的边界或边界的延长线上\n *\n * <en/> Whether the point is on the boundary or extension line of the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param extended - <zh/> 是否判断边界的延长线 | <en/> Whether to judge the extension line of the boundary\n * @returns <zh/> 如果点在包围盒的边界或边界的延长线上返回 true，否则返回 false | <en/> Returns true if the point is on the boundary or extension line of the bounding box, false otherwise\n */\nexport function isPointOnBBoxBoundary(point, bbox, extended = false) {\n  const {\n    min: [minX, minY],\n    max: [maxX, maxY]\n  } = bbox;\n  const onTopOrBottomLine = (point[1] === minY || point[1] === maxY) && (extended || isBetween(point[0], minX, maxX));\n  const onLeftOrRightLine = (point[0] === minX || point[0] === maxX) && (extended || isBetween(point[1], minY, maxY));\n  return onTopOrBottomLine || onLeftOrRightLine;\n}\n/**\n * <zh/> 判断点是否在给定的包围盒外\n *\n * <en/> Whether the point is outside the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 如果点在包围盒外返回 true，否则返回 false | <en/> Returns true if the point is outside the bounding box, false otherwise\n */\nexport function isPointOutsideBBox(point, bbox) {\n  return !isPointInBBox(point, bbox);\n}\n/**\n * <zh/> 判断点是否位于包围盒中心\n *\n * <en/> When the point is at the center of the bounding box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 如果点在包围盒中心返回 true，否则返回 false | <en/> Returns true if the point is at the center of the bounding box, false otherwise\n */\nexport function isPointBBoxCenter(point, bbox) {\n  const {\n    center\n  } = bbox;\n  return point[0] === center[0] && point[1] === center[1];\n}\n/**\n * <zh/> 获取包围盒上离点 `p` 最近的边\n *\n * <en/> Get a side of the boundary which is nearest to the point `p`\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param p - <zh/> 点 | <en/> Point\n * @returns <zh/> 离点 `p` 最近的边 | <en/> The side nearest to the point `p`\n */\nexport function getNearestBoundarySide(p, bbox) {\n  const [x, y] = p;\n  const [minX, minY] = bbox.min;\n  const [maxX, maxY] = bbox.max;\n  const left = x - minX;\n  const right = maxX - x;\n  const top = y - minY;\n  const bottom = maxY - y;\n  const min = Math.min(left, right, top, bottom);\n  return min === left ? 'left' : min === right ? 'right' : min === top ? 'top' : min === bottom ? 'bottom' : 'left';\n}\n/**\n * <zh/> 获取包围盒上离点 `p` 最近的边界点\n *\n * <en/> Get a point on the boundary nearest to the point `p`\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param p - <zh/> 点 | <en/> Point\n * @returns <zh/> 离点 `p` 最近的点 | <en/> The point nearest to the point `p`\n */\nexport function getNearestBoundaryPoint(p, bbox) {\n  const ref = clone(p);\n  if (isPointInBBox(p, bbox)) {\n    const side = getNearestBoundarySide(p, bbox);\n    switch (side) {\n      case 'left':\n        ref[0] = bbox.min[0];\n        break;\n      case 'right':\n        ref[0] = bbox.max[0];\n        break;\n      case 'top':\n        ref[1] = bbox.min[1];\n        break;\n      case 'bottom':\n        ref[1] = bbox.max[1];\n        break;\n    }\n  } else {\n    const [x, y] = p;\n    const [minX, minY] = bbox.min;\n    const [maxX, maxY] = bbox.max;\n    ref[0] = isBetween(x, minX, maxX) ? x : x < minX ? minX : maxX;\n    ref[1] = isBetween(y, minY, maxY) ? y : y < minY ? minY : maxY;\n  }\n  return ref;\n}\n/**\n * The triangle center point of the bounding box\n * @param bbox - bounding box\n * @param direction - direction\n * @returns Point\n */\nexport function getTriangleCenter(bbox, direction) {\n  // todo 算法只对矩形有效\n  const {\n    center\n  } = bbox;\n  const [width, height] = getBBoxSize(bbox);\n  const x = direction === 'up' || direction === 'down' ? center[0] : direction === 'right' ? center[0] - width / 6 : center[0] + width / 6;\n  const y = direction === 'left' || direction === 'right' ? center[1] : direction === 'down' ? center[1] - height / 6 : center[1] + height / 6;\n  return [x, y];\n}\n/**\n * Get incircle radius\n * @param bbox - bounding box\n * @param direction - direction\n * @returns number\n */\nexport function getIncircleRadius(bbox, direction) {\n  let [w, h] = getBBoxSize(bbox);\n  [w, h] = direction === 'up' || direction === 'down' ? [w, h] : [h, w];\n  // 三角形的内切圆半径\n  return (Math.pow(h, 2) - Math.pow(Math.sqrt(Math.pow(w / 2, 2) + Math.pow(h, 2)) - w / 2, 2)) / (2 * h);\n}\n/**\n * <zh/> 获取包围盒的四条边，顺序依次为上、右、下、左\n *\n * <en/> Get the four segments of the bounding box, in order from top, right, bottom, left\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的四条边 | <en/> The four segments of the bounding box\n */\nexport function getBBoxSegments(bbox) {\n  const {\n    min: [minX, minY],\n    max: [maxX, maxY]\n  } = bbox;\n  const topLeftCorner = [minX, maxY];\n  const topRightCorner = [maxX, maxY];\n  const bottomRightCorner = [maxX, minY];\n  const bottomLeftCorner = [minX, minY];\n  const top = [topLeftCorner, topRightCorner];\n  const right = [topRightCorner, bottomRightCorner];\n  const bottom = [bottomRightCorner, bottomLeftCorner];\n  const left = [bottomLeftCorner, topLeftCorner];\n  return [top, right, bottom, left];\n}","map":{"version":3,"names":["AABB","clone","isPoint","isBetween","parsePadding","getBBoxWidth","bbox","max","min","getBBoxHeight","getBBoxSize","getNodeBBox","node","padding","getPointBBox","getShape","getBounds","getExpandedBBox","point","x","y","z","setMinMax","top","right","bottom","left","minX","minY","minZ","maxX","maxY","maxZ","eBbox","getCombinedBBox","bboxes","length","i","b2","Math","isBBoxInside","bbox1","bbox2","minX1","minY1","maxX1","maxY1","minX2","minY2","maxX2","maxY2","isPointInBBox","isPointOnBBoxBoundary","extended","onTopOrBottomLine","onLeftOrRightLine","isPointOutsideBBox","isPointBBoxCenter","center","getNearestBoundarySide","p","getNearestBoundaryPoint","ref","side","getTriangleCenter","direction","width","height","getIncircleRadius","w","h","pow","sqrt","getBBoxSegments","topLeftCorner","topRightCorner","bottomRightCorner","bottomLeftCorner"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/bbox.ts"],"sourcesContent":["import { AABB } from '@antv/g';\nimport { clone } from '@antv/util';\nimport type { Node, Padding, Point, TriangleDirection } from '../types';\nimport { isPoint } from './is';\nimport { isBetween } from './math';\nimport { parsePadding } from './padding';\n\n/**\n * <zh/> 获取包围盒的宽度\n *\n * <en/> Retrieves the width of a bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的宽度 | <en/> Width of box\n */\nexport function getBBoxWidth(bbox: AABB): number {\n  return bbox.max[0] - bbox.min[0];\n}\n\n/**\n * <zh/> 获取包围盒的高度\n *\n * <en/> Retrieve the height of a bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的高度 | <en/> Height of box\n */\nexport function getBBoxHeight(bbox: AABB): number {\n  return bbox.max[1] - bbox.min[1];\n}\n\n/**\n * <zh/> 获取包围盒的尺寸\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的尺寸 | <en/> Size of box\n */\nexport function getBBoxSize(bbox: AABB): [number, number] {\n  return [getBBoxWidth(bbox), getBBoxHeight(bbox)];\n}\n\n/**\n * <zh/> 获取节点的包围盒，兼容节点为点的情况\n *\n * <en/> Get the bounding box of the node, compatible with the case where the node is a point\n * @param node - <zh/> 节点或者点 | <en/> node or point\n * @param padding - <zh/> 内边距 | <en/> padding\n * @returns <zh/> 包围盒 | <en/> bounding box\n */\nexport function getNodeBBox(node: Point | Node, padding?: Padding): AABB {\n  const bbox = isPoint(node) ? getPointBBox(node) : node.getShape('key').getBounds();\n  return padding ? getExpandedBBox(bbox, padding) : bbox;\n}\n\n/**\n * <zh/> 获取单点的包围盒\n *\n * <en/> Get the bounding box of a single point\n * @param point - <zh/> 点 | <en/> Point\n * @returns <zh/> 包围盒 | <en/> Bounding box\n */\nexport function getPointBBox(point: Point): AABB {\n  const [x, y, z = 0] = point;\n  const bbox = new AABB();\n  bbox.setMinMax([x, y, z], [x, y, z]);\n  return bbox;\n}\n\n/**\n * <zh/> 获取扩大后的包围盒\n *\n * <en/> Get the expanded bounding box\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param padding - <zh/> 内边距 | <en/> Padding\n * @returns <zh/> 扩大后的包围盒 | <en/> The expanded bounding box\n */\nexport function getExpandedBBox(bbox: AABB, padding: Padding): AABB {\n  const [top, right, bottom, left] = parsePadding(padding);\n  const [minX, minY, minZ] = bbox.min;\n  const [maxX, maxY, maxZ] = bbox.max;\n  const eBbox = new AABB();\n  eBbox.setMinMax([minX - left, minY - top, minZ], [maxX + right, maxY + bottom, maxZ]);\n  return eBbox;\n}\n\n/**\n * <zh/> 计算整体包围盒\n *\n * <en/> Calculate the overall bounding box\n * @param bboxes - <zh/> 包围盒列表 | <en/> List of bounding boxes\n * @returns <zh/> 整体包围盒 | <en/> Overall bounding box\n */\nexport function getCombinedBBox(bboxes: AABB[]): AABB {\n  if (bboxes.length === 0) return new AABB();\n  if (bboxes.length === 1) return bboxes[0];\n\n  const bbox = new AABB();\n  bbox.setMinMax(bboxes[0].min, bboxes[0].max);\n\n  for (let i = 1; i < bboxes.length; i++) {\n    const b2 = bboxes[i];\n    bbox.setMinMax(\n      [Math.min(bbox.min[0], b2.min[0]), Math.min(bbox.min[1], b2.min[1]), Math.min(bbox.min[2], b2.min[2])],\n      [Math.max(bbox.max[0], b2.max[0]), Math.max(bbox.max[1], b2.max[1]), Math.max(bbox.max[2], b2.max[2])],\n    );\n  }\n\n  return bbox;\n}\n\n/**\n * <zh/> 判断 bbox1 是否完全包含在 bbox2 内\n *\n * <en/> Determine whether bbox1 is completely contained in bbox2\n * @param bbox1 - <zh/> 目标包围盒 | <en/> Target bounding box\n * @param bbox2 - <zh/> 参考包围盒 | <en/> Reference bounding box\n * @returns <zh/> 如果 bbox1 完全包含在 bbox2 内返回 true，否则返回 false | <en/> Returns true if bbox1 is completely contained in bbox2, false otherwise\n */\nexport function isBBoxInside(bbox1: AABB, bbox2: AABB): boolean {\n  const [minX1, minY1] = bbox1.min;\n  const [maxX1, maxY1] = bbox1.max;\n  const [minX2, minY2] = bbox2.min;\n  const [maxX2, maxY2] = bbox2.max;\n\n  return minX1 >= minX2 && maxX1 <= maxX2 && minY1 >= minY2 && maxY1 <= maxY2;\n}\n\n/**\n * <zh/> 判断点是否在给定的包围盒内\n *\n * <en/> Whether the point is contained in the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns  <zh/> 如果点在包围盒内返回 true，否则返回 false | <en/> Returns true if the point is inside the bounding box, false otherwise\n */\nexport function isPointInBBox(point: Point, bbox: AABB) {\n  return isBetween(point[0], bbox.min[0], bbox.max[0]) && isBetween(point[1], bbox.min[1], bbox.max[1]);\n}\n\n/**\n * <zh/> 判断点是否在给定的包围盒的边界或边界的延长线上\n *\n * <en/> Whether the point is on the boundary or extension line of the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param extended - <zh/> 是否判断边界的延长线 | <en/> Whether to judge the extension line of the boundary\n * @returns <zh/> 如果点在包围盒的边界或边界的延长线上返回 true，否则返回 false | <en/> Returns true if the point is on the boundary or extension line of the bounding box, false otherwise\n */\nexport function isPointOnBBoxBoundary(point: Point, bbox: AABB, extended = false): boolean {\n  const {\n    min: [minX, minY],\n    max: [maxX, maxY],\n  } = bbox;\n\n  const onTopOrBottomLine = (point[1] === minY || point[1] === maxY) && (extended || isBetween(point[0], minX, maxX));\n  const onLeftOrRightLine = (point[0] === minX || point[0] === maxX) && (extended || isBetween(point[1], minY, maxY));\n\n  return onTopOrBottomLine || onLeftOrRightLine;\n}\n\n/**\n * <zh/> 判断点是否在给定的包围盒外\n *\n * <en/> Whether the point is outside the given box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 如果点在包围盒外返回 true，否则返回 false | <en/> Returns true if the point is outside the bounding box, false otherwise\n */\nexport function isPointOutsideBBox(point: Point, bbox: AABB) {\n  return !isPointInBBox(point, bbox);\n}\n\n/**\n * <zh/> 判断点是否位于包围盒中心\n *\n * <en/> When the point is at the center of the bounding box\n * @param point - <zh/> 点 | <en/> Point\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 如果点在包围盒中心返回 true，否则返回 false | <en/> Returns true if the point is at the center of the bounding box, false otherwise\n */\nexport function isPointBBoxCenter(point: Point, bbox: AABB) {\n  const { center } = bbox;\n  return point[0] === center[0] && point[1] === center[1];\n}\n\n/**\n * <zh/> 获取包围盒上离点 `p` 最近的边\n *\n * <en/> Get a side of the boundary which is nearest to the point `p`\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param p - <zh/> 点 | <en/> Point\n * @returns <zh/> 离点 `p` 最近的边 | <en/> The side nearest to the point `p`\n */\nexport function getNearestBoundarySide(p: Point, bbox: AABB): 'left' | 'right' | 'top' | 'bottom' {\n  const [x, y] = p;\n  const [minX, minY] = bbox.min;\n  const [maxX, maxY] = bbox.max;\n  const left = x - minX;\n  const right = maxX - x;\n  const top = y - minY;\n  const bottom = maxY - y;\n  const min = Math.min(left, right, top, bottom);\n  return min === left ? 'left' : min === right ? 'right' : min === top ? 'top' : min === bottom ? 'bottom' : 'left';\n}\n\n/**\n * <zh/> 获取包围盒上离点 `p` 最近的边界点\n *\n * <en/> Get a point on the boundary nearest to the point `p`\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @param p - <zh/> 点 | <en/> Point\n * @returns <zh/> 离点 `p` 最近的点 | <en/> The point nearest to the point `p`\n */\nexport function getNearestBoundaryPoint(p: Point, bbox: AABB): Point {\n  const ref = clone(p);\n  if (isPointInBBox(p, bbox)) {\n    const side = getNearestBoundarySide(p, bbox);\n    switch (side) {\n      case 'left':\n        ref[0] = bbox.min[0];\n        break;\n      case 'right':\n        ref[0] = bbox.max[0];\n        break;\n      case 'top':\n        ref[1] = bbox.min[1];\n        break;\n      case 'bottom':\n        ref[1] = bbox.max[1];\n        break;\n    }\n  } else {\n    const [x, y] = p;\n    const [minX, minY] = bbox.min;\n    const [maxX, maxY] = bbox.max;\n    ref[0] = isBetween(x, minX, maxX) ? x : x < minX ? minX : maxX;\n    ref[1] = isBetween(y, minY, maxY) ? y : y < minY ? minY : maxY;\n  }\n  return ref;\n}\n\n/**\n * The triangle center point of the bounding box\n * @param bbox - bounding box\n * @param direction - direction\n * @returns Point\n */\nexport function getTriangleCenter(bbox: AABB, direction: TriangleDirection): Point {\n  // todo 算法只对矩形有效\n  const { center } = bbox;\n  const [width, height] = getBBoxSize(bbox);\n\n  const x =\n    direction === 'up' || direction === 'down'\n      ? center[0]\n      : direction === 'right'\n        ? center[0] - width / 6\n        : center[0] + width / 6;\n  const y =\n    direction === 'left' || direction === 'right'\n      ? center[1]\n      : direction === 'down'\n        ? center[1] - height / 6\n        : center[1] + height / 6;\n\n  return [x, y];\n}\n\n/**\n * Get incircle radius\n * @param bbox - bounding box\n * @param direction - direction\n * @returns number\n */\nexport function getIncircleRadius(bbox: AABB, direction: TriangleDirection): number {\n  let [w, h] = getBBoxSize(bbox);\n\n  [w, h] = direction === 'up' || direction === 'down' ? [w, h] : [h, w];\n\n  // 三角形的内切圆半径\n  return (h ** 2 - (Math.sqrt((w / 2) ** 2 + h ** 2) - w / 2) ** 2) / (2 * h);\n}\n\n/**\n * <zh/> 获取包围盒的四条边，顺序依次为上、右、下、左\n *\n * <en/> Get the four segments of the bounding box, in order from top, right, bottom, left\n * @param bbox - <zh/> 包围盒 | <en/> Bounding box\n * @returns <zh/> 包围盒的四条边 | <en/> The four segments of the bounding box\n */\nexport function getBBoxSegments(bbox: AABB): [Point, Point][] {\n  const {\n    min: [minX, minY],\n    max: [maxX, maxY],\n  } = bbox;\n  const topLeftCorner: Point = [minX, maxY];\n  const topRightCorner: Point = [maxX, maxY];\n  const bottomRightCorner: Point = [maxX, minY];\n  const bottomLeftCorner: Point = [minX, minY];\n\n  const top = [topLeftCorner, topRightCorner];\n  const right = [topRightCorner, bottomRightCorner];\n  const bottom = [bottomRightCorner, bottomLeftCorner];\n  const left = [bottomLeftCorner, topLeftCorner];\n  return [top, right, bottom, left] as [Point, Point][];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}