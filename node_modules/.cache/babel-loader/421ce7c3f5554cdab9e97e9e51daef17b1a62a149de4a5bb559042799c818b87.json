{"ast":null,"code":"import { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\n/**\n * 如果更新了节点 / combo，需要更新连接的边\n * If the node / combo is updated, the connected edge and the combo it is in need to be updated\n */\nexport class UpdateRelatedEdge extends BaseTransform {\n  beforeDraw(input, context) {\n    const {\n      stage\n    } = context;\n    if (stage === 'visibility') return input;\n    const {\n      model\n    } = this.context;\n    const {\n      update: {\n        nodes,\n        edges,\n        combos\n      }\n    } = input;\n    const addRelatedEdges = (_, id) => {\n      const relatedEdgesData = model.getRelatedEdgesData(id);\n      relatedEdgesData.forEach(edge => !edges.has(idOf(edge)) && edges.set(idOf(edge), edge));\n    };\n    nodes.forEach(addRelatedEdges);\n    combos.forEach(addRelatedEdges);\n    return input;\n  }\n}","map":{"version":3,"names":["idOf","BaseTransform","UpdateRelatedEdge","beforeDraw","input","context","stage","model","update","nodes","edges","combos","addRelatedEdges","_","id","relatedEdgesData","getRelatedEdgesData","forEach","edge","has","set"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/transforms/update-related-edge.ts"],"sourcesContent":["import type { DrawContext } from '../runtime/element';\nimport type { ID, NodeLikeData } from '../types';\nimport { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\nimport type { DrawData } from './types';\n\n/**\n * 如果更新了节点 / combo，需要更新连接的边\n * If the node / combo is updated, the connected edge and the combo it is in need to be updated\n */\nexport class UpdateRelatedEdge extends BaseTransform {\n  public beforeDraw(input: DrawData, context: DrawContext): DrawData {\n    const { stage } = context;\n    if (stage === 'visibility') return input;\n\n    const { model } = this.context;\n    const {\n      update: { nodes, edges, combos },\n    } = input;\n\n    const addRelatedEdges = (_: NodeLikeData, id: ID) => {\n      const relatedEdgesData = model.getRelatedEdgesData(id);\n      relatedEdgesData.forEach((edge) => !edges.has(idOf(edge)) && edges.set(idOf(edge), edge));\n    };\n\n    nodes.forEach(addRelatedEdges);\n    combos.forEach(addRelatedEdges);\n\n    return input;\n  }\n}\n"],"mappings":"AAEA,SAASA,IAAI,QAAQ,aAAa;AAClC,SAASC,aAAa,QAAQ,kBAAkB;AAGhD;;;;AAIA,OAAM,MAAOC,iBAAkB,SAAQD,aAAa;EAC3CE,UAAUA,CAACC,KAAe,EAAEC,OAAoB;IACrD,MAAM;MAAEC;IAAK,CAAE,GAAGD,OAAO;IACzB,IAAIC,KAAK,KAAK,YAAY,EAAE,OAAOF,KAAK;IAExC,MAAM;MAAEG;IAAK,CAAE,GAAG,IAAI,CAACF,OAAO;IAC9B,MAAM;MACJG,MAAM,EAAE;QAAEC,KAAK;QAAEC,KAAK;QAAEC;MAAM;IAAE,CACjC,GAAGP,KAAK;IAET,MAAMQ,eAAe,GAAGA,CAACC,CAAe,EAAEC,EAAM,KAAI;MAClD,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,mBAAmB,CAACF,EAAE,CAAC;MACtDC,gBAAgB,CAACE,OAAO,CAAEC,IAAI,IAAK,CAACR,KAAK,CAACS,GAAG,CAACnB,IAAI,CAACkB,IAAI,CAAC,CAAC,IAAIR,KAAK,CAACU,GAAG,CAACpB,IAAI,CAACkB,IAAI,CAAC,EAAEA,IAAI,CAAC,CAAC;IAC3F,CAAC;IAEDT,KAAK,CAACQ,OAAO,CAACL,eAAe,CAAC;IAC9BD,MAAM,CAACM,OAAO,CAACL,eAAe,CAAC;IAE/B,OAAOR,KAAK;EACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}