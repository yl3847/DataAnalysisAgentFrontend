{"ast":null,"code":"import { TextShape, TextBadge, TextTag } from '../shape';\nimport { MaybeTuple, MaybeVisualPosition } from '../transform';\nimport { baseGeometryChannels, basePostInference, basePreInference, createBandOffset, tooltip2d, visualMark } from './utils';\nconst shape = {\n  text: TextShape,\n  badge: TextBadge,\n  tag: TextTag\n};\nexport const Text = options => {\n  const {\n    cartesian = false\n  } = options;\n  if (cartesian) return visualMark;\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y\n    } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, i => {\n      const p = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))];\n    });\n    return [index, P];\n  };\n};\nText.props = {\n  defaultShape: 'text',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'text',\n    scale: 'identity'\n  }, {\n    name: 'fontSize',\n    scale: 'identity'\n  }, {\n    name: 'rotate',\n    scale: 'identity'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeTuple\n  }, {\n    type: MaybeVisualPosition\n  }],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["TextShape","TextBadge","TextTag","MaybeTuple","MaybeVisualPosition","baseGeometryChannels","basePostInference","basePreInference","createBandOffset","tooltip2d","visualMark","shape","text","badge","tag","Text","options","cartesian","index","scale","value","coordinate","x","X","y","Y","offset","P","Array","from","i","p","map","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","type","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/text.ts"],"sourcesContent":["import { MarkComponent as MC, Vector2, Mark } from '../runtime';\nimport { TextMark } from '../spec';\nimport { TextShape, TextBadge, TextTag } from '../shape';\nimport { MaybeTuple, MaybeVisualPosition } from '../transform';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  createBandOffset,\n  tooltip2d,\n  visualMark,\n} from './utils';\n\nconst shape = {\n  text: TextShape,\n  badge: TextBadge,\n  tag: TextTag,\n};\n\nexport type TextOptions = Omit<TextMark, 'type'>;\n\nexport const Text: MC<TextOptions> = (options) => {\n  const { cartesian = false } = options;\n  if (cartesian) return visualMark as Mark;\n  return ((index, scale, value, coordinate) => {\n    const { x: X, y: Y } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, (i) => {\n      const p: Vector2 = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))] as Vector2[];\n    });\n    return [index, P];\n  }) as Mark;\n};\n\nText.props = {\n  defaultShape: 'text',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', required: true },\n    { name: 'y', required: true },\n    { name: 'text', scale: 'identity' },\n    { name: 'fontSize', scale: 'identity' },\n    { name: 'rotate', scale: 'identity' },\n  ],\n  preInference: [\n    ...basePreInference(),\n    { type: MaybeTuple },\n    { type: MaybeVisualPosition },\n  ],\n  postInference: [...basePostInference(), ...tooltip2d()],\n};\n"],"mappings":"AAEA,SAASA,SAAS,EAAEC,SAAS,EAAEC,OAAO,QAAQ,UAAU;AACxD,SAASC,UAAU,EAAEC,mBAAmB,QAAQ,cAAc;AAC9D,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACTC,UAAU,QACL,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEZ,SAAS;EACfa,KAAK,EAAEZ,SAAS;EAChBa,GAAG,EAAEZ;CACN;AAID,OAAO,MAAMa,IAAI,GAAqBC,OAAO,IAAI;EAC/C,MAAM;IAAEC,SAAS,GAAG;EAAK,CAAE,GAAGD,OAAO;EACrC,IAAIC,SAAS,EAAE,OAAOP,UAAkB;EACxC,OAAQ,CAACQ,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IAC1C,MAAM;MAAEC,CAAC,EAAEC,CAAC;MAAEC,CAAC,EAAEC;IAAC,CAAE,GAAGL,KAAK;IAC5B,MAAMM,MAAM,GAAGlB,gBAAgB,CAACW,KAAK,EAAEC,KAAK,EAAEJ,OAAO,CAAC;IACtD,MAAMW,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACX,KAAK,EAAGY,CAAC,IAAI;MAChC,MAAMC,CAAC,GAAY,CAAC,CAACR,CAAC,CAACO,CAAC,CAAC,EAAE,CAACL,CAAC,CAACK,CAAC,CAAC,CAAC;MACjC,OAAO,CAACT,UAAU,CAACW,GAAG,CAACN,MAAM,CAACK,CAAC,EAAED,CAAC,CAAC,CAAC,CAAc;IACpD,CAAC,CAAC;IACF,OAAO,CAACZ,KAAK,EAAES,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDZ,IAAI,CAACkB,KAAK,GAAG;EACXC,YAAY,EAAE,MAAM;EACpBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBzB,KAAK;EACL0B,QAAQ,EAAE,CACR,GAAGhC,oBAAoB,CAAC;IAAEiC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAAC7B,KAAK;EAAC,CAAE,CAAC,EACvD;IAAE8B,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,MAAM;IAAEtB,KAAK,EAAE;EAAU,CAAE,EACnC;IAAEsB,IAAI,EAAE,UAAU;IAAEtB,KAAK,EAAE;EAAU,CAAE,EACvC;IAAEsB,IAAI,EAAE,QAAQ;IAAEtB,KAAK,EAAE;EAAU,CAAE,CACtC;EACDwB,YAAY,EAAE,CACZ,GAAGpC,gBAAgB,EAAE,EACrB;IAAEqC,IAAI,EAAEzC;EAAU,CAAE,EACpB;IAAEyC,IAAI,EAAExC;EAAmB,CAAE,CAC9B;EACDyC,aAAa,EAAE,CAAC,GAAGvC,iBAAiB,EAAE,EAAE,GAAGG,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}