{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { sendToLambda } from '../services/lambdaClient';\nimport { getMockResponse } from '../services/mockData';\nexport const useApi = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const useMockData = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n  const sendQuery = useCallback(async (query, options = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let response;\n      if (useMockData) {\n        // Use mock data for local testing\n        console.log('Using mock data for query:', query);\n        response = await getMockResponse(query);\n      } else {\n        // Send to Lambda\n        console.log('Sending to Lambda:', query);\n        response = await sendToLambda({\n          query,\n          ...options\n        });\n      }\n      setLoading(false);\n      return response;\n    } catch (err) {\n      console.error('API Error:', err);\n      setError(err.message || 'An error occurred');\n      setLoading(false);\n\n      // Return a fallback response\n      return {\n        success: false,\n        message: err.message || 'Failed to process query',\n        data: null,\n        charts: null\n      };\n    }\n  }, [useMockData]);\n  const reset = useCallback(() => {\n    setLoading(false);\n    setError(null);\n  }, []);\n  return {\n    sendQuery,\n    loading,\n    error,\n    reset\n  };\n};\n_s(useApi, \"/0lYuAi50J79GLrXp+mMJ/AF5Ww=\");","map":{"version":3,"names":["useState","useCallback","sendToLambda","getMockResponse","useApi","_s","loading","setLoading","error","setError","useMockData","process","env","REACT_APP_USE_MOCK_DATA","sendQuery","query","options","response","console","log","err","message","success","data","charts","reset"],"sources":["/Users/yizelu/Desktop/mcp/frontend/src/hooks/useApi.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { sendToLambda } from '../services/lambdaClient';\nimport { getMockResponse } from '../services/mockData';\n\nexport const useApi = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const useMockData = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n  const sendQuery = useCallback(async (query, options = {}) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let response;\n      \n      if (useMockData) {\n        // Use mock data for local testing\n        console.log('Using mock data for query:', query);\n        response = await getMockResponse(query);\n      } else {\n        // Send to Lambda\n        console.log('Sending to Lambda:', query);\n        response = await sendToLambda({\n          query,\n          ...options\n        });\n      }\n      \n      setLoading(false);\n      return response;\n    } catch (err) {\n      console.error('API Error:', err);\n      setError(err.message || 'An error occurred');\n      setLoading(false);\n      \n      // Return a fallback response\n      return {\n        success: false,\n        message: err.message || 'Failed to process query',\n        data: null,\n        charts: null\n      };\n    }\n  }, [useMockData]);\n\n  const reset = useCallback(() => {\n    setLoading(false);\n    setError(null);\n  }, []);\n\n  return {\n    sendQuery,\n    loading,\n    error,\n    reset\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMU,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB,KAAK,MAAM;EAElE,MAAMC,SAAS,GAAGb,WAAW,CAAC,OAAOc,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3DT,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,IAAIQ,QAAQ;MAEZ,IAAIP,WAAW,EAAE;QACf;QACAQ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,KAAK,CAAC;QAChDE,QAAQ,GAAG,MAAMd,eAAe,CAACY,KAAK,CAAC;MACzC,CAAC,MAAM;QACL;QACAG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,KAAK,CAAC;QACxCE,QAAQ,GAAG,MAAMf,YAAY,CAAC;UAC5Ba,KAAK;UACL,GAAGC;QACL,CAAC,CAAC;MACJ;MAEAT,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOU,QAAQ;IACjB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZF,OAAO,CAACV,KAAK,CAAC,YAAY,EAAEY,GAAG,CAAC;MAChCX,QAAQ,CAACW,GAAG,CAACC,OAAO,IAAI,mBAAmB,CAAC;MAC5Cd,UAAU,CAAC,KAAK,CAAC;;MAEjB;MACA,OAAO;QACLe,OAAO,EAAE,KAAK;QACdD,OAAO,EAAED,GAAG,CAACC,OAAO,IAAI,yBAAyB;QACjDE,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC,EAAE,CAACd,WAAW,CAAC,CAAC;EAEjB,MAAMe,KAAK,GAAGxB,WAAW,CAAC,MAAM;IAC9BM,UAAU,CAAC,KAAK,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLK,SAAS;IACTR,OAAO;IACPE,KAAK;IACLiB;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CAtDWD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}