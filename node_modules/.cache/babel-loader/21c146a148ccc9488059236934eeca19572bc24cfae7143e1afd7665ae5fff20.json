{"ast":null,"code":"import { identity } from '@antv/util';\nimport { Base } from './base';\nimport { createInterpolateNumber, createInterpolateRound, createClamp, createNormalize, bisect, compose, d3LinearNice, isValid } from '../utils';\n/** 当 domain 和 range 只有一段的时候的 map 的 工厂函数 */\nconst createBiMap = (domain, range, createInterpolate) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  let normalize;\n  let interpolate;\n  if (d0 < d1) {\n    normalize = createNormalize(d0, d1);\n    interpolate = createInterpolate(r0, r1);\n  } else {\n    normalize = createNormalize(d1, d0);\n    interpolate = createInterpolate(r1, r0);\n  }\n  return compose(interpolate, normalize);\n};\n/** 当 domain 和 range 有多段时候的 map 的 工厂函数 */\nconst createPolyMap = (domain, range, createInterpolate) => {\n  const len = Math.min(domain.length, range.length) - 1;\n  const normalizeList = new Array(len);\n  const interpolateList = new Array(len);\n  const reverse = domain[0] > domain[len];\n  const ascendingDomain = reverse ? [...domain].reverse() : domain;\n  const ascendingRange = reverse ? [...range].reverse() : range;\n  // 每一段都生成 normalize 和 interpolate\n  for (let i = 0; i < len; i += 1) {\n    normalizeList[i] = createNormalize(ascendingDomain[i], ascendingDomain[i + 1]);\n    interpolateList[i] = createInterpolate(ascendingRange[i], ascendingRange[i + 1]);\n  }\n  // 二分最右查找到相应的 normalize 和 interpolate\n  return x => {\n    const i = bisect(domain, x, 1, len) - 1;\n    const normalize = normalizeList[i];\n    const interpolate = interpolateList[i];\n    return compose(interpolate, normalize)(x);\n  };\n};\n/** 选择一个分段映射的函数 */\nconst choosePiecewise = (domain, range, interpolate, shouldRound) => {\n  const n = Math.min(domain.length, range.length);\n  const createPiecewise = n > 2 ? createPolyMap : createBiMap;\n  const createInterpolate = shouldRound ? createInterpolateRound : interpolate;\n  return createPiecewise(domain, range, createInterpolate);\n};\n/**\n * Continuous 比例尺 的输入 x 和输出 y 满足：y = a * f(x) + b\n * 通过函数柯里化和复合函数可以在映射过程中去掉分支，提高性能。\n * 参考：https://github.com/d3/d3-scale/blob/master/src/continuous.js\n */\nexport class Continuous extends Base {\n  getDefaultOptions() {\n    return {\n      domain: [0, 1],\n      range: [0, 1],\n      nice: false,\n      clamp: false,\n      round: false,\n      interpolate: createInterpolateNumber,\n      tickCount: 5\n    };\n  }\n  /**\n   * y = interpolate(normalize(clamp(transform(x))))\n   */\n  map(x) {\n    if (!isValid(x)) return this.options.unknown;\n    return this.output(x);\n  }\n  /**\n   * x = transform(clamp(interpolate(normalize(y))))\n   */\n  invert(x) {\n    if (!isValid(x)) return this.options.unknown;\n    return this.input(x);\n  }\n  nice() {\n    if (!this.options.nice) return;\n    const [min, max, tickCount, ...rest] = this.getTickMethodOptions();\n    this.options.domain = this.chooseNice()(min, max, tickCount, ...rest);\n  }\n  getTicks() {\n    const {\n      tickMethod\n    } = this.options;\n    const [min, max, tickCount, ...rest] = this.getTickMethodOptions();\n    return tickMethod(min, max, tickCount, ...rest);\n  }\n  getTickMethodOptions() {\n    const {\n      domain,\n      tickCount\n    } = this.options;\n    const min = domain[0];\n    const max = domain[domain.length - 1];\n    return [min, max, tickCount];\n  }\n  chooseNice() {\n    return d3LinearNice;\n  }\n  rescale() {\n    this.nice();\n    const [transform, untransform] = this.chooseTransforms();\n    this.composeOutput(transform, this.chooseClamp(transform));\n    this.composeInput(transform, untransform, this.chooseClamp(untransform));\n  }\n  chooseClamp(transform) {\n    const {\n      clamp: shouldClamp,\n      range\n    } = this.options;\n    const domain = this.options.domain.map(transform);\n    const n = Math.min(domain.length, range.length);\n    return shouldClamp ? createClamp(domain[0], domain[n - 1]) : identity;\n  }\n  composeOutput(transform, clamp) {\n    const {\n      domain,\n      range,\n      round,\n      interpolate\n    } = this.options;\n    const piecewise = choosePiecewise(domain.map(transform), range, interpolate, round);\n    this.output = compose(piecewise, clamp, transform);\n  }\n  composeInput(transform, untransform, clamp) {\n    const {\n      domain,\n      range\n    } = this.options;\n    const piecewise = choosePiecewise(range, domain.map(transform), createInterpolateNumber);\n    this.input = compose(untransform, clamp, piecewise);\n  }\n}","map":{"version":3,"names":["identity","Base","createInterpolateNumber","createInterpolateRound","createClamp","createNormalize","bisect","compose","d3LinearNice","isValid","createBiMap","domain","range","createInterpolate","d0","d1","r0","r1","normalize","interpolate","createPolyMap","len","Math","min","length","normalizeList","Array","interpolateList","reverse","ascendingDomain","ascendingRange","i","x","choosePiecewise","shouldRound","n","createPiecewise","Continuous","getDefaultOptions","nice","clamp","round","tickCount","map","options","unknown","output","invert","input","max","rest","getTickMethodOptions","chooseNice","getTicks","tickMethod","rescale","transform","untransform","chooseTransforms","composeOutput","chooseClamp","composeInput","shouldClamp","piecewise"],"sources":["scales/continuous.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}