{"ast":null,"code":"import { finalizeSegment } from './finalize-segment';\nimport { paramsCount } from './params-count';\nimport { scanFlag } from './scan-flag';\nimport { scanParam } from './scan-param';\nimport { skipSpaces } from './skip-spaces';\nimport { isPathCommand } from './is-path-command';\nimport { isDigitStart } from './is-digit-start';\nimport { isArcCommand } from './is-arc-command';\n/**\n * Scans every character in the path string to determine\n * where a segment starts and where it ends.\n */\nexport function scanSegment(path) {\n  var max = path.max,\n    pathValue = path.pathValue,\n    index = path.index;\n  var cmdCode = pathValue.charCodeAt(index);\n  var reqParams = paramsCount[pathValue[index].toLowerCase()];\n  path.segmentStart = index;\n  if (!isPathCommand(cmdCode)) {\n    path.err = \"[path-util]: Invalid path value \\\"\".concat(pathValue[index], \"\\\" is not a path command\");\n    return;\n  }\n  path.index += 1;\n  skipSpaces(path);\n  path.data = [];\n  if (!reqParams) {\n    // Z\n    finalizeSegment(path);\n    return;\n  }\n  for (;;) {\n    for (var i = reqParams; i > 0; i -= 1) {\n      if (isArcCommand(cmdCode) && (i === 3 || i === 4)) scanFlag(path);else scanParam(path);\n      if (path.err.length) {\n        return;\n      }\n      path.data.push(path.param);\n      skipSpaces(path);\n      // after ',' param is mandatory\n      if (path.index < max && pathValue.charCodeAt(path.index) === 0x2c /* , */) {\n        path.index += 1;\n        skipSpaces(path);\n      }\n    }\n    if (path.index >= path.max) {\n      break;\n    }\n    // Stop on next segment\n    if (!isDigitStart(pathValue.charCodeAt(path.index))) {\n      break;\n    }\n  }\n  finalizeSegment(path);\n}","map":{"version":3,"names":["finalizeSegment","paramsCount","scanFlag","scanParam","skipSpaces","isPathCommand","isDigitStart","isArcCommand","scanSegment","path","max","pathValue","index","cmdCode","charCodeAt","reqParams","toLowerCase","segmentStart","err","concat","data","i","length","push","param"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/parser/scan-segment.ts"],"sourcesContent":["import { finalizeSegment } from './finalize-segment';\nimport { paramsCount } from './params-count';\nimport { scanFlag } from './scan-flag';\nimport { scanParam } from './scan-param';\nimport { skipSpaces } from './skip-spaces';\nimport { isPathCommand } from './is-path-command';\nimport { isDigitStart } from './is-digit-start';\nimport { isArcCommand } from './is-arc-command';\nimport type { PathParser } from './path-parser';\n\n/**\n * Scans every character in the path string to determine\n * where a segment starts and where it ends.\n */\nexport function scanSegment(path: PathParser) {\n  const { max, pathValue, index } = path;\n  const cmdCode = pathValue.charCodeAt(index);\n  const reqParams = paramsCount[pathValue[index].toLowerCase()];\n\n  path.segmentStart = index;\n\n  if (!isPathCommand(cmdCode)) {\n    path.err = `[path-util]: Invalid path value \"${pathValue[index]}\" is not a path command`;\n    return;\n  }\n\n  path.index += 1;\n  skipSpaces(path);\n\n  path.data = [];\n\n  if (!reqParams) {\n    // Z\n    finalizeSegment(path);\n    return;\n  }\n\n  for (;;) {\n    for (let i = reqParams; i > 0; i -= 1) {\n      if (isArcCommand(cmdCode) && (i === 3 || i === 4)) scanFlag(path);\n      else scanParam(path);\n\n      if (path.err.length) {\n        return;\n      }\n      path.data.push(path.param);\n\n      skipSpaces(path);\n\n      // after ',' param is mandatory\n      if (path.index < max && pathValue.charCodeAt(path.index) === 0x2c /* , */) {\n        path.index += 1;\n        skipSpaces(path);\n      }\n    }\n\n    if (path.index >= path.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(pathValue.charCodeAt(path.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(path);\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,YAAY,QAAQ,kBAAkB;AAG/C;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,IAAgB;EAClC,IAAAC,GAAG,GAAuBD,IAAI,CAAAC,GAA3B;IAAEC,SAAS,GAAYF,IAAI,CAAAE,SAAhB;IAAEC,KAAK,GAAKH,IAAI,CAAAG,KAAT;EAC7B,IAAMC,OAAO,GAAGF,SAAS,CAACG,UAAU,CAACF,KAAK,CAAC;EAC3C,IAAMG,SAAS,GAAGd,WAAW,CAACU,SAAS,CAACC,KAAK,CAAC,CAACI,WAAW,EAAE,CAAC;EAE7DP,IAAI,CAACQ,YAAY,GAAGL,KAAK;EAEzB,IAAI,CAACP,aAAa,CAACQ,OAAO,CAAC,EAAE;IAC3BJ,IAAI,CAACS,GAAG,GAAG,qCAAAC,MAAA,CAAoCR,SAAS,CAACC,KAAK,CAAC,6BAAyB;IACxF;EACF;EAEAH,IAAI,CAACG,KAAK,IAAI,CAAC;EACfR,UAAU,CAACK,IAAI,CAAC;EAEhBA,IAAI,CAACW,IAAI,GAAG,EAAE;EAEd,IAAI,CAACL,SAAS,EAAE;IACd;IACAf,eAAe,CAACS,IAAI,CAAC;IACrB;EACF;EAEA,SAAS;IACP,KAAK,IAAIY,CAAC,GAAGN,SAAS,EAAEM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACrC,IAAId,YAAY,CAACM,OAAO,CAAC,KAAKQ,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,EAAEnB,QAAQ,CAACO,IAAI,CAAC,CAAC,KAC7DN,SAAS,CAACM,IAAI,CAAC;MAEpB,IAAIA,IAAI,CAACS,GAAG,CAACI,MAAM,EAAE;QACnB;MACF;MACAb,IAAI,CAACW,IAAI,CAACG,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC;MAE1BpB,UAAU,CAACK,IAAI,CAAC;MAEhB;MACA,IAAIA,IAAI,CAACG,KAAK,GAAGF,GAAG,IAAIC,SAAS,CAACG,UAAU,CAACL,IAAI,CAACG,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS;QACzEH,IAAI,CAACG,KAAK,IAAI,CAAC;QACfR,UAAU,CAACK,IAAI,CAAC;MAClB;IACF;IAEA,IAAIA,IAAI,CAACG,KAAK,IAAIH,IAAI,CAACC,GAAG,EAAE;MAC1B;IACF;IAEA;IACA,IAAI,CAACJ,YAAY,CAACK,SAAS,CAACG,UAAU,CAACL,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE;MACnD;IACF;EACF;EAEAZ,eAAe,CAACS,IAAI,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}