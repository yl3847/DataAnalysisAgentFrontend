{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Category } from '@antv/component';\nimport { get, isFunction } from '@antv/util';\nimport { GraphEvent } from '../constants';\nimport { BasePlugin } from './base-plugin';\nimport { createPluginCanvas } from './utils/canvas';\n/**\n * <zh/> 图例\n *\n * <en/> Legend\n * @remarks\n * <zh/> 图例插件用于展示图中元素的分类信息，支持节点、边、组合的分类信息展示。\n *\n * <en/> The legend plugin is used to display the classification information of elements in the graph, and supports the display of classification information of nodes, edges, and combos.\n */\nexport class Legend extends BasePlugin {\n  constructor(context, options) {\n    super(context, Object.assign({}, Legend.defaultOptions, options));\n    this.typePrefix = '__data__';\n    this.draw = false;\n    this.fieldMap = {\n      node: new Map(),\n      edge: new Map(),\n      combo: new Map()\n    };\n    this.selectedItems = [];\n    this.bindEvents = () => {\n      const {\n        graph\n      } = this.context;\n      graph.on(GraphEvent.AFTER_DRAW, this.createElement);\n    };\n    this.changeState = (el, state) => {\n      const {\n        graph\n      } = this.context;\n      const {\n        typePrefix\n      } = this;\n      const composeId = get(el, [typePrefix, 'id']);\n      const category = get(el, [typePrefix, 'style', 'labelText']);\n      const [type] = composeId.split('__');\n      const ids = this.fieldMap[type].get(category) || [];\n      graph.setElementState(Object.fromEntries(ids === null || ids === void 0 ? void 0 : ids.map(id => [id, state])));\n    };\n    /**\n     * <zh/> 图例元素点击事件\n     *\n     * <en/> Legend element click event\n     * @param event - <zh/> 点击的元素 | <en/> The element that is clicked\n     */\n    this.click = event => {\n      if (this.options.trigger === 'hover') return;\n      const composeId = get(event, [this.typePrefix, 'id']);\n      if (!this.selectedItems.includes(composeId)) {\n        this.selectedItems.push(composeId);\n        this.changeState(event, 'selected');\n      } else {\n        this.selectedItems = this.selectedItems.filter(item => item !== composeId);\n        this.changeState(event, []);\n      }\n    };\n    /**\n     * <zh/> 图例元素移出事件\n     *\n     * <en/> Legend element mouseleave event\n     * @param event - <zh/> 移出的元素 | <en/> The element that is moved out\n     */\n    this.mouseleave = event => {\n      if (this.options.trigger === 'click') return;\n      this.selectedItems = [];\n      this.changeState(event, []);\n    };\n    /**\n     * <zh/> 图例元素移入事件\n     *\n     * <en/> Legend element mouseenter event\n     * @param event - <zh/> 移入的元素 | <en/> The element that is moved in\n     */\n    this.mouseenter = event => {\n      if (this.options.trigger === 'click') return;\n      const composeId = get(event, [this.typePrefix, 'id']);\n      if (!this.selectedItems.includes(composeId)) {\n        this.selectedItems.push(composeId);\n        this.changeState(event, 'active');\n      } else {\n        this.selectedItems = this.selectedItems.filter(item => item !== composeId);\n      }\n    };\n    this.setFieldMap = (field, id, type) => {\n      if (!field) return;\n      const map = this.fieldMap[type];\n      if (!map) return;\n      if (!map.has(field)) {\n        map.set(field, [id]);\n      } else {\n        const ids = map.get(field);\n        if (ids) {\n          ids.push(id);\n          map.set(field, ids);\n        }\n      }\n    };\n    this.getEvents = () => {\n      return {\n        mouseenter: this.mouseenter,\n        mouseleave: this.mouseleave,\n        click: this.click\n      };\n    };\n    this.getMarkerData = (field, elementType) => {\n      if (!field) return [];\n      const {\n        model,\n        element\n      } = this.context;\n      const {\n        nodes,\n        edges,\n        combos\n      } = model.getData();\n      const items = {};\n      const getField = item => {\n        if (isFunction(field)) return field(item);\n        return field;\n      };\n      const defaultType = {\n        node: 'circle',\n        edge: 'line',\n        combo: 'rect'\n      };\n      // 用于将 G6 element 转换为 components 支持的类型\n      // Used to convert G6 element to types supported by components\n      const markerMapping = {\n        circle: 'circle',\n        ellipse: 'circle',\n        // 待 components 支持 ellipse\n        image: 'bowtie',\n        rect: 'square',\n        star: 'cross',\n        triangle: 'triangle',\n        diamond: 'diamond',\n        cubic: 'dot',\n        line: 'hyphen',\n        polyline: 'hyphen',\n        quadratic: 'hv',\n        'cubic-horizontal': 'hyphen',\n        'cubic-vertical': 'line'\n      };\n      const getElementStyle = (type, datum) => {\n        const style = element === null || element === void 0 ? void 0 : element.getElementComputedStyle(type, datum);\n        return style;\n      };\n      const getElementModel = (data, type) => {\n        data.forEach(item => {\n          const {\n            id\n          } = item;\n          const value = get(item, ['data', getField(item)]);\n          const marker = (element === null || element === void 0 ? void 0 : element.getElementType(type, item)) || 'circle';\n          const style = getElementStyle(type, item);\n          const color = (type === 'edge' ? style === null || style === void 0 ? void 0 : style.stroke : style === null || style === void 0 ? void 0 : style.fill) || '#1783ff';\n          if (id && value && value.replace(/\\s+/g, '')) {\n            this.setFieldMap(value, id, type);\n            if (!items[value]) {\n              items[value] = {\n                id: `${type}__${id}`,\n                label: value,\n                marker: markerMapping[marker] || defaultType[type],\n                elementType: type,\n                lineWidth: 1,\n                stroke: color,\n                fill: color\n              };\n            }\n          }\n        });\n      };\n      switch (elementType) {\n        case 'node':\n          getElementModel(nodes, 'node');\n          break;\n        case 'edge':\n          getElementModel(edges, 'edge');\n          break;\n        case 'combo':\n          getElementModel(combos, 'combo');\n          break;\n        default:\n          return [];\n      }\n      return Object.values(items);\n    };\n    this.createElement = () => {\n      if (this.draw) {\n        this.updateElement();\n        return;\n      }\n      const _a = this.options,\n        {\n          width,\n          height,\n          nodeField,\n          edgeField,\n          comboField,\n          trigger,\n          position,\n          container,\n          containerStyle,\n          className\n        } = _a,\n        rest = __rest(_a, [\"width\", \"height\", \"nodeField\", \"edgeField\", \"comboField\", \"trigger\", \"position\", \"container\", \"containerStyle\", \"className\"]);\n      const nodeItems = this.getMarkerData(nodeField, 'node');\n      const edgeItems = this.getMarkerData(edgeField, 'edge');\n      const comboItems = this.getMarkerData(comboField, 'combo');\n      const items = [...nodeItems, ...comboItems, ...edgeItems];\n      const categoryStyle = Object.assign({\n        width,\n        height,\n        data: items,\n        itemMarkerLineWidth: ({\n          lineWidth\n        }) => lineWidth,\n        itemMarker: ({\n          marker\n        }) => marker,\n        itemMarkerStroke: ({\n          stroke\n        }) => stroke,\n        itemMarkerFill: ({\n          fill\n        }) => fill,\n        gridCol: nodeItems.length\n      }, rest, this.getEvents());\n      const category = new Category({\n        className: 'legend',\n        style: categoryStyle\n      });\n      this.category = category;\n      const canvas = this.upsertCanvas();\n      canvas.appendChild(category);\n      this.draw = true;\n    };\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 更新图例配置\n   *\n   * <en/> Update the legend configuration\n   * @param options - <zh/> 图例配置项 | <en/> Legend options\n   * @internal\n   */\n  update(options) {\n    super.update(options);\n    this.clear();\n    this.createElement();\n  }\n  clear() {\n    var _a, _b;\n    (_a = this.canvas) === null || _a === void 0 ? void 0 : _a.destroy();\n    (_b = this.container) === null || _b === void 0 ? void 0 : _b.remove();\n    this.canvas = undefined;\n    this.container = undefined;\n    this.draw = false;\n  }\n  /**\n   * <zh/> 刷新图例元素状态\n   *\n   * <en/> Refresh the status of the legend element\n   */\n  updateElement() {\n    if (!this.category) return;\n    this.category.update({\n      itemMarkerOpacity: ({\n        id\n      }) => {\n        if (!this.selectedItems.length || this.selectedItems.includes(id)) return 1;\n        return 0.5;\n      },\n      itemLabelOpacity: ({\n        id\n      }) => {\n        if (!this.selectedItems.length || this.selectedItems.includes(id)) return 1;\n        return 0.5;\n      }\n    });\n  }\n  upsertCanvas() {\n    if (this.canvas) return this.canvas;\n    const graphCanvas = this.context.canvas;\n    const [canvasWidth, canvasHeight] = graphCanvas.getSize();\n    const {\n      width = canvasWidth,\n      height = canvasHeight,\n      position,\n      container,\n      containerStyle,\n      className\n    } = this.options;\n    const [$container, canvas] = createPluginCanvas({\n      width,\n      height,\n      graphCanvas,\n      container,\n      containerStyle,\n      placement: position,\n      className: 'legend'\n    });\n    this.container = $container;\n    if (className) $container.classList.add(className);\n    this.canvas = canvas;\n    return this.canvas;\n  }\n  /**\n   * <zh/>销毁图例\n   *\n   * <en/> Destroy the legend\n   * @internal\n   */\n  destroy() {\n    this.clear();\n    this.context.graph.off(GraphEvent.AFTER_DRAW, this.createElement);\n    super.destroy();\n  }\n}\nLegend.defaultOptions = {\n  position: 'bottom',\n  trigger: 'hover',\n  orientation: 'horizontal',\n  layout: 'flex',\n  itemSpacing: 4,\n  rowPadding: 10,\n  colPadding: 10,\n  itemMarkerSize: 16,\n  itemLabelFontSize: 16,\n  width: 240,\n  height: 160\n};","map":{"version":3,"names":["Category","get","isFunction","GraphEvent","BasePlugin","createPluginCanvas","Legend","constructor","context","options","Object","assign","defaultOptions","typePrefix","draw","fieldMap","node","Map","edge","combo","selectedItems","bindEvents","graph","on","AFTER_DRAW","createElement","changeState","el","state","composeId","category","type","split","ids","setElementState","fromEntries","map","id","click","event","trigger","includes","push","filter","item","mouseleave","mouseenter","setFieldMap","field","has","set","getEvents","getMarkerData","elementType","model","element","nodes","edges","combos","getData","items","getField","defaultType","markerMapping","circle","ellipse","image","rect","star","triangle","diamond","cubic","line","polyline","quadratic","getElementStyle","datum","style","getElementComputedStyle","getElementModel","data","forEach","value","marker","getElementType","color","stroke","fill","replace","label","lineWidth","values","updateElement","_a","width","height","nodeField","edgeField","comboField","position","container","containerStyle","className","rest","__rest","nodeItems","edgeItems","comboItems","categoryStyle","itemMarkerLineWidth","itemMarker","itemMarkerStroke","itemMarkerFill","gridCol","length","canvas","upsertCanvas","appendChild","update","clear","destroy","_b","remove","undefined","itemMarkerOpacity","itemLabelOpacity","graphCanvas","canvasWidth","canvasHeight","getSize","$container","placement","classList","add","off","orientation","layout","itemSpacing","rowPadding","colPadding","itemMarkerSize","itemLabelFontSize"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/legend.ts"],"sourcesContent":["import { Category, Selection } from '@antv/component';\nimport { CategoryStyleProps } from '@antv/component/lib/ui/legend/types';\nimport { Canvas } from '@antv/g';\nimport { get, isFunction } from '@antv/util';\nimport { GraphEvent } from '../constants';\nimport type { RuntimeContext } from '../runtime/types';\nimport type { ElementDatum, ElementType, ID, State } from '../types';\nimport type { CardinalPlacement } from '../types/placement';\nimport type { BasePluginOptions } from './base-plugin';\nimport { BasePlugin } from './base-plugin';\nimport { createPluginCanvas } from './utils/canvas';\n\ninterface Datum extends Record<string, any> {\n  id?: string;\n  label?: string;\n  color?: string;\n  marker?: string;\n  elementType?: ElementType;\n}\n\n/**\n * <zh/> 图例配置项\n *\n * <en/> Legend options\n */\nexport interface LegendOptions extends BasePluginOptions, Omit<CategoryStyleProps, 'data'> {\n  /**\n   * <zh/> 图例触发行为\n   * - `'hover'`：鼠标移入图例项时触发\n   * - `'click'`：鼠标点击图例项时触发\n   *\n   * <en/> Legend trigger behavior\n   * - `'hover'`：mouseover the legend item\n   * - `'click'`：click the legend item\n   * @defaultValue 'hover'\n   */\n  trigger?: 'hover' | 'click';\n  /**\n   * <zh/> 图例在画布中的相对位置，默认为 'bottom'，代表在画布正下方\n   *\n   * <en/> Relative position of the legend in the canvas, defaults to 'bottom', representing the bottom of the canvas\n   * @defaultValue 'bottom'\n   */\n  position?: CardinalPlacement;\n  /**\n   * <zh/> 图例挂载的容器，无则挂载到 Graph 所在容器\n   *\n   * <en/> The container where the legend is mounted, if not, it will be mounted to the container where the Graph is located\n   */\n  container?: HTMLElement | string;\n  /**\n   * <zh/> 图例画布类名，传入外置容器时不生效\n   *\n   * <en/> The class name of the legend canvas, which does not take effect when an external container is passed in\n   */\n  className?: string;\n  /**\n   * <zh/> 图例的容器样式，传入外置容器时不生效\n   *\n   * <en/> The style of the legend container, which does not take effect when an external container is passed in\n   */\n  containerStyle?: Partial<CSSStyleDeclaration>;\n  /**\n   * <zh/> 节点分类标识\n   *\n   * <en/> Node Classification Identifier\n   */\n  nodeField?: string | ((item: ElementDatum) => string);\n  /**\n   * <zh/> 边分类标识\n   *\n   * <en/> Edge Classification Identifier\n   */\n  edgeField?: string | ((item: ElementDatum) => string);\n  /**\n   * <zh/> 组合分类标识\n   *\n   * <en/> Combo Classification Identifier\n   */\n  comboField?: string | ((item: ElementDatum) => string);\n}\n\n/**\n * <zh/> 图例\n *\n * <en/> Legend\n * @remarks\n * <zh/> 图例插件用于展示图中元素的分类信息，支持节点、边、组合的分类信息展示。\n *\n * <en/> The legend plugin is used to display the classification information of elements in the graph, and supports the display of classification information of nodes, edges, and combos.\n */\nexport class Legend extends BasePlugin<LegendOptions> {\n  static defaultOptions: Partial<LegendOptions> = {\n    position: 'bottom',\n    trigger: 'hover',\n    orientation: 'horizontal',\n    layout: 'flex',\n    itemSpacing: 4,\n    rowPadding: 10,\n    colPadding: 10,\n    itemMarkerSize: 16,\n    itemLabelFontSize: 16,\n    width: 240,\n    height: 160,\n  };\n  private typePrefix = '__data__';\n  private draw = false;\n  private fieldMap = {\n    node: new Map<string, ID[]>(),\n    edge: new Map<string, ID[]>(),\n    combo: new Map<string, ID[]>(),\n  };\n  private selectedItems: string[] = [];\n  private category?: Category;\n  private container?: HTMLElement;\n  private canvas?: Canvas;\n\n  constructor(context: RuntimeContext, options: LegendOptions) {\n    super(context, Object.assign({}, Legend.defaultOptions, options));\n    this.bindEvents();\n  }\n\n  /**\n   * <zh/> 更新图例配置\n   *\n   * <en/> Update the legend configuration\n   * @param options - <zh/> 图例配置项 | <en/> Legend options\n   * @internal\n   */\n  public update(options: Partial<LegendOptions>) {\n    super.update(options);\n    this.clear();\n    this.createElement();\n  }\n\n  private clear() {\n    this.canvas?.destroy();\n    this.container?.remove();\n    this.canvas = undefined;\n    this.container = undefined;\n\n    this.draw = false;\n  }\n\n  private bindEvents = () => {\n    const { graph } = this.context;\n    graph.on(GraphEvent.AFTER_DRAW, this.createElement);\n  };\n\n  private changeState = (el: Selection, state: State | State[]) => {\n    const { graph } = this.context;\n    const { typePrefix } = this;\n    const composeId = get(el, [typePrefix, 'id']);\n    const category = get(el, [typePrefix, 'style', 'labelText']);\n    const [type] = composeId.split('__');\n    const ids = this.fieldMap[type as keyof typeof this.fieldMap].get(category) || [];\n\n    graph.setElementState(Object.fromEntries(ids?.map((id) => [id, state])));\n  };\n\n  /**\n   * <zh/> 图例元素点击事件\n   *\n   * <en/> Legend element click event\n   * @param event - <zh/> 点击的元素 | <en/> The element that is clicked\n   */\n  public click = (event: Selection) => {\n    if (this.options.trigger === 'hover') return;\n    const composeId = get(event, [this.typePrefix, 'id']);\n    if (!this.selectedItems.includes(composeId)) {\n      this.selectedItems.push(composeId);\n      this.changeState(event, 'selected');\n    } else {\n      this.selectedItems = this.selectedItems.filter((item) => item !== composeId);\n      this.changeState(event, []);\n    }\n  };\n\n  /**\n   * <zh/> 图例元素移出事件\n   *\n   * <en/> Legend element mouseleave event\n   * @param event - <zh/> 移出的元素 | <en/> The element that is moved out\n   */\n  public mouseleave = (event: Selection) => {\n    if (this.options.trigger === 'click') return;\n    this.selectedItems = [];\n    this.changeState(event, []);\n  };\n\n  /**\n   * <zh/> 图例元素移入事件\n   *\n   * <en/> Legend element mouseenter event\n   * @param event - <zh/> 移入的元素 | <en/> The element that is moved in\n   */\n  public mouseenter = (event: Selection) => {\n    if (this.options.trigger === 'click') return;\n    const composeId = get(event, [this.typePrefix, 'id']);\n    if (!this.selectedItems.includes(composeId)) {\n      this.selectedItems.push(composeId);\n      this.changeState(event, 'active');\n    } else {\n      this.selectedItems = this.selectedItems.filter((item) => item !== composeId);\n    }\n  };\n\n  /**\n   * <zh/> 刷新图例元素状态\n   *\n   * <en/> Refresh the status of the legend element\n   */\n  public updateElement() {\n    if (!this.category) return;\n\n    this.category.update({\n      itemMarkerOpacity: ({ id }) => {\n        if (!this.selectedItems.length || this.selectedItems.includes(id)) return 1;\n        return 0.5;\n      },\n      itemLabelOpacity: ({ id }) => {\n        if (!this.selectedItems.length || this.selectedItems.includes(id)) return 1;\n        return 0.5;\n      },\n    });\n  }\n\n  private setFieldMap = (field: string, id: ID, type: ElementType) => {\n    if (!field) return;\n    const map = this.fieldMap[type];\n    if (!map) return;\n    if (!map.has(field)) {\n      map.set(field, [id]);\n    } else {\n      const ids = map.get(field);\n      if (ids) {\n        ids.push(id);\n        map.set(field, ids);\n      }\n    }\n  };\n\n  private getEvents = () => {\n    return {\n      mouseenter: this.mouseenter,\n      mouseleave: this.mouseleave,\n      click: this.click,\n    };\n  };\n\n  private getMarkerData = (field: string | ((item: ElementDatum) => string), elementType: ElementType) => {\n    if (!field) return [];\n    const { model, element } = this.context;\n    const { nodes, edges, combos } = model.getData();\n    const items: { [key: string]: Datum } = {};\n\n    const getField = (item: ElementDatum) => {\n      if (isFunction(field)) return field(item);\n      return field;\n    };\n\n    const defaultType = {\n      node: 'circle',\n      edge: 'line',\n      combo: 'rect',\n    };\n\n    // 用于将 G6 element 转换为 components 支持的类型\n    // Used to convert G6 element to types supported by components\n    const markerMapping: { [key: string]: string } = {\n      circle: 'circle',\n      ellipse: 'circle', // 待 components 支持 ellipse\n      image: 'bowtie',\n      rect: 'square',\n      star: 'cross',\n      triangle: 'triangle',\n      diamond: 'diamond',\n      cubic: 'dot',\n      line: 'hyphen',\n      polyline: 'hyphen',\n      quadratic: 'hv',\n      'cubic-horizontal': 'hyphen',\n      'cubic-vertical': 'line',\n    };\n\n    const getElementStyle = (type: ElementType, datum: ElementDatum) => {\n      const style = element?.getElementComputedStyle(type, datum);\n      return style;\n    };\n\n    const getElementModel = (data: ElementDatum[], type: ElementType) => {\n      data.forEach((item) => {\n        const { id } = item;\n        const value = get(item, ['data', getField(item)]);\n        const marker = element?.getElementType(type, item) || 'circle';\n        const style = getElementStyle(type, item);\n        const color = (type === 'edge' ? style?.stroke : style?.fill) || '#1783ff';\n\n        if (id && value && value.replace(/\\s+/g, '')) {\n          this.setFieldMap(value, id, type);\n          if (!items[value]) {\n            items[value] = {\n              id: `${type}__${id}`,\n              label: value,\n              marker: markerMapping[marker] || defaultType[type],\n              elementType: type,\n              lineWidth: 1,\n              stroke: color,\n              fill: color,\n            };\n          }\n        }\n      });\n    };\n\n    switch (elementType) {\n      case 'node':\n        getElementModel(nodes, 'node');\n        break;\n      case 'edge':\n        getElementModel(edges, 'edge');\n        break;\n      case 'combo':\n        getElementModel(combos, 'combo');\n        break;\n      default:\n        return [];\n    }\n\n    return Object.values(items);\n  };\n\n  private upsertCanvas() {\n    if (this.canvas) return this.canvas;\n\n    const graphCanvas = this.context.canvas;\n    const [canvasWidth, canvasHeight] = graphCanvas.getSize();\n\n    const { width = canvasWidth, height = canvasHeight, position, container, containerStyle, className } = this.options;\n    const [$container, canvas] = createPluginCanvas({\n      width,\n      height,\n      graphCanvas,\n      container,\n      containerStyle,\n      placement: position,\n      className: 'legend',\n    });\n\n    this.container = $container;\n    if (className) $container.classList.add(className);\n    this.canvas = canvas;\n\n    return this.canvas;\n  }\n\n  private createElement = () => {\n    if (this.draw) {\n      this.updateElement();\n      return;\n    }\n    const {\n      width,\n      height,\n      nodeField,\n      edgeField,\n      comboField,\n      trigger,\n      position,\n      container,\n      containerStyle,\n      className,\n      ...rest\n    } = this.options;\n    const nodeItems = this.getMarkerData(nodeField, 'node');\n    const edgeItems = this.getMarkerData(edgeField, 'edge');\n    const comboItems = this.getMarkerData(comboField, 'combo');\n    const items = [...nodeItems, ...comboItems, ...edgeItems];\n\n    const categoryStyle = Object.assign(\n      {\n        width,\n        height,\n        data: items,\n        itemMarkerLineWidth: ({ lineWidth }: Datum) => lineWidth,\n        itemMarker: ({ marker }: Datum) => marker,\n        itemMarkerStroke: ({ stroke }: Datum) => stroke,\n        itemMarkerFill: ({ fill }: Datum) => fill,\n        gridCol: nodeItems.length,\n      },\n      rest,\n      this.getEvents(),\n    );\n\n    const category = new Category({\n      className: 'legend',\n      style: categoryStyle,\n    });\n    this.category = category;\n\n    const canvas = this.upsertCanvas();\n    canvas.appendChild(category);\n\n    this.draw = true;\n  };\n\n  /**\n   * <zh/>销毁图例\n   *\n   * <en/> Destroy the legend\n   * @internal\n   */\n  public destroy(): void {\n    this.clear();\n    this.context.graph.off(GraphEvent.AFTER_DRAW, this.createElement);\n    super.destroy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}