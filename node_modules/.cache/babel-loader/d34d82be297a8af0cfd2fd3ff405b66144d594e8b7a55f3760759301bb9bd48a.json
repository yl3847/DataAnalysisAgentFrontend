{"ast":null,"code":"'use strict';\n\nimport robustOrientation from './robust-orientation';\nconst orient = robustOrientation[3];\nexport function monotoneConvexHull2D(points) {\n  const n = points.length;\n  // Handle special cases when the input contains fewer than 3 points\n  if (n < 3) {\n    const result = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      result[i] = i;\n    }\n    // Special case for exactly 2 identical points\n    if (n === 2 && points[0][0] === points[1][0] && points[0][1] === points[1][1]) {\n      return [0];\n    }\n    return result;\n  }\n  // Sort point indices along the x-axis (breaking ties with y-axis)\n  const sorted = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    sorted[i] = i;\n  }\n  sorted.sort((a, b) => {\n    const d = points[a][0] - points[b][0];\n    if (d) {\n      return d;\n    }\n    return points[a][1] - points[b][1];\n  });\n  // Construct the upper and lower hulls\n  const lower = [sorted[0], sorted[1]];\n  const upper = [sorted[0], sorted[1]];\n  for (let i = 2; i < n; ++i) {\n    const idx = sorted[i];\n    const p = points[idx];\n    // Insert into the lower hull\n    let m = lower.length;\n    while (m > 1 && orient(points[lower[m - 2]], points[lower[m - 1]], p) <= 0) {\n      m -= 1;\n      lower.pop();\n    }\n    lower.push(idx);\n    // Insert into the upper hull\n    m = upper.length;\n    while (m > 1 && orient(points[upper[m - 2]], points[upper[m - 1]], p) >= 0) {\n      m -= 1;\n      upper.pop();\n    }\n    upper.push(idx);\n  }\n  // Merge the lower and upper hulls into the final result\n  const result = new Array(upper.length + lower.length - 2);\n  let ptr = 0;\n  for (let i = 0, nl = lower.length; i < nl; ++i) {\n    result[ptr++] = lower[i];\n  }\n  for (let j = upper.length - 2; j > 0; --j) {\n    result[ptr++] = upper[j];\n  }\n  // Return the final convex hull\n  return result;\n}","map":{"version":3,"names":["robustOrientation","orient","monotoneConvexHull2D","points","n","length","result","Array","i","sorted","sort","a","b","d","lower","upper","idx","p","m","pop","push","ptr","nl","j"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/hull/hull/monotone-convex-hull-2d.ts"],"sourcesContent":["'use strict';\n\nimport type { Point } from '../../../types';\nimport robustOrientation from './robust-orientation';\n\nconst orient = robustOrientation[3];\n\nexport function monotoneConvexHull2D(points: Point[]): number[] {\n  const n = points.length;\n\n  // Handle special cases when the input contains fewer than 3 points\n  if (n < 3) {\n    const result = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      result[i] = i;\n    }\n\n    // Special case for exactly 2 identical points\n    if (n === 2 && points[0][0] === points[1][0] && points[0][1] === points[1][1]) {\n      return [0];\n    }\n\n    return result;\n  }\n\n  // Sort point indices along the x-axis (breaking ties with y-axis)\n  const sorted = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    sorted[i] = i;\n  }\n  sorted.sort((a, b) => {\n    const d = points[a][0] - points[b][0];\n    if (d) {\n      return d;\n    }\n    return points[a][1] - points[b][1];\n  });\n\n  // Construct the upper and lower hulls\n  const lower: number[] = [sorted[0], sorted[1]];\n  const upper: number[] = [sorted[0], sorted[1]];\n\n  for (let i = 2; i < n; ++i) {\n    const idx = sorted[i];\n    const p = points[idx];\n\n    // Insert into the lower hull\n    let m = lower.length;\n    while (m > 1 && orient(points[lower[m - 2]], points[lower[m - 1]], p) <= 0) {\n      m -= 1;\n      lower.pop();\n    }\n    lower.push(idx);\n\n    // Insert into the upper hull\n    m = upper.length;\n    while (m > 1 && orient(points[upper[m - 2]], points[upper[m - 1]], p) >= 0) {\n      m -= 1;\n      upper.pop();\n    }\n    upper.push(idx);\n  }\n\n  // Merge the lower and upper hulls into the final result\n  const result = new Array(upper.length + lower.length - 2);\n  let ptr = 0;\n  for (let i = 0, nl = lower.length; i < nl; ++i) {\n    result[ptr++] = lower[i];\n  }\n  for (let j = upper.length - 2; j > 0; --j) {\n    result[ptr++] = upper[j];\n  }\n\n  // Return the final convex hull\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AAGZ,OAAOA,iBAAiB,MAAM,sBAAsB;AAEpD,MAAMC,MAAM,GAAGD,iBAAiB,CAAC,CAAC,CAAC;AAEnC,OAAM,SAAUE,oBAAoBA,CAACC,MAAe;EAClD,MAAMC,CAAC,GAAGD,MAAM,CAACE,MAAM;EAEvB;EACA,IAAID,CAAC,GAAG,CAAC,EAAE;IACT,MAAME,MAAM,GAAG,IAAIC,KAAK,CAACH,CAAC,CAAC;IAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAE,EAAEI,CAAC,EAAE;MAC1BF,MAAM,CAACE,CAAC,CAAC,GAAGA,CAAC;IACf;IAEA;IACA,IAAIJ,CAAC,KAAK,CAAC,IAAID,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC7E,OAAO,CAAC,CAAC,CAAC;IACZ;IAEA,OAAOG,MAAM;EACf;EAEA;EACA,MAAMG,MAAM,GAAG,IAAIF,KAAK,CAACH,CAAC,CAAC;EAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAE,EAAEI,CAAC,EAAE;IAC1BC,MAAM,CAACD,CAAC,CAAC,GAAGA,CAAC;EACf;EACAC,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;IACnB,MAAMC,CAAC,GAAGV,MAAM,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGR,MAAM,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,IAAIC,CAAC,EAAE;MACL,OAAOA,CAAC;IACV;IACA,OAAOV,MAAM,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGR,MAAM,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC;EAEF;EACA,MAAME,KAAK,GAAa,CAACL,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAMM,KAAK,GAAa,CAACN,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;EAE9C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAE,EAAEI,CAAC,EAAE;IAC1B,MAAMQ,GAAG,GAAGP,MAAM,CAACD,CAAC,CAAC;IACrB,MAAMS,CAAC,GAAGd,MAAM,CAACa,GAAG,CAAC;IAErB;IACA,IAAIE,CAAC,GAAGJ,KAAK,CAACT,MAAM;IACpB,OAAOa,CAAC,GAAG,CAAC,IAAIjB,MAAM,CAACE,MAAM,CAACW,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEf,MAAM,CAACW,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAED,CAAC,CAAC,IAAI,CAAC,EAAE;MAC1EC,CAAC,IAAI,CAAC;MACNJ,KAAK,CAACK,GAAG,EAAE;IACb;IACAL,KAAK,CAACM,IAAI,CAACJ,GAAG,CAAC;IAEf;IACAE,CAAC,GAAGH,KAAK,CAACV,MAAM;IAChB,OAAOa,CAAC,GAAG,CAAC,IAAIjB,MAAM,CAACE,MAAM,CAACY,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEf,MAAM,CAACY,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAED,CAAC,CAAC,IAAI,CAAC,EAAE;MAC1EC,CAAC,IAAI,CAAC;MACNH,KAAK,CAACI,GAAG,EAAE;IACb;IACAJ,KAAK,CAACK,IAAI,CAACJ,GAAG,CAAC;EACjB;EAEA;EACA,MAAMV,MAAM,GAAG,IAAIC,KAAK,CAACQ,KAAK,CAACV,MAAM,GAAGS,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC;EACzD,IAAIgB,GAAG,GAAG,CAAC;EACX,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEc,EAAE,GAAGR,KAAK,CAACT,MAAM,EAAEG,CAAC,GAAGc,EAAE,EAAE,EAAEd,CAAC,EAAE;IAC9CF,MAAM,CAACe,GAAG,EAAE,CAAC,GAAGP,KAAK,CAACN,CAAC,CAAC;EAC1B;EACA,KAAK,IAAIe,CAAC,GAAGR,KAAK,CAACV,MAAM,GAAG,CAAC,EAAEkB,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;IACzCjB,MAAM,CAACe,GAAG,EAAE,CAAC,GAAGN,KAAK,CAACQ,CAAC,CAAC;EAC1B;EAEA;EACA,OAAOjB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}