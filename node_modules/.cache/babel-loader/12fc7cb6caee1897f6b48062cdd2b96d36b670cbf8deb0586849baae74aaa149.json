{"ast":null,"code":"var WILDCARD = '*';\n/* event-emitter */\nvar EventEmitter = /** @class */function () {\n  function EventEmitter() {\n    this._events = {};\n  }\n  /**\n   * 监听一个事件\n   * @param evt\n   * @param callback\n   * @param once\n   */\n  EventEmitter.prototype.on = function (evt, callback, once) {\n    if (!this._events[evt]) {\n      this._events[evt] = [];\n    }\n    this._events[evt].push({\n      callback: callback,\n      once: !!once\n    });\n    return this;\n  };\n  /**\n   * 监听一个事件一次\n   * @param evt\n   * @param callback\n   */\n  EventEmitter.prototype.once = function (evt, callback) {\n    return this.on(evt, callback, true);\n  };\n  /**\n   * 触发一个事件\n   * @param evt\n   * @param args\n   */\n  EventEmitter.prototype.emit = function (evt) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var events = this._events[evt] || [];\n    var wildcardEvents = this._events[WILDCARD] || [];\n    // 实际的处理 emit 方法\n    var doEmit = function (es) {\n      var length = es.length;\n      for (var i = 0; i < length; i++) {\n        if (!es[i]) {\n          continue;\n        }\n        var _a = es[i],\n          callback = _a.callback,\n          once = _a.once;\n        if (once) {\n          es.splice(i, 1);\n          if (es.length === 0) {\n            delete _this._events[evt];\n          }\n          length--;\n          i--;\n        }\n        callback.apply(_this, args);\n      }\n    };\n    doEmit(events);\n    doEmit(wildcardEvents);\n  };\n  /**\n   * 取消监听一个事件，或者一个channel\n   * @param evt\n   * @param callback\n   */\n  EventEmitter.prototype.off = function (evt, callback) {\n    if (!evt) {\n      // evt 为空全部清除\n      this._events = {};\n    } else {\n      if (!callback) {\n        // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n      } else {\n        // evt 存在，callback 存在，清除匹配的\n        var events = this._events[evt] || [];\n        var length_1 = events.length;\n        for (var i = 0; i < length_1; i++) {\n          if (events[i].callback === callback) {\n            events.splice(i, 1);\n            length_1--;\n            i--;\n          }\n        }\n        if (events.length === 0) {\n          delete this._events[evt];\n        }\n      }\n    }\n    return this;\n  };\n  /* 当前所有的事件 */\n  EventEmitter.prototype.getEvents = function () {\n    return this._events;\n  };\n  return EventEmitter;\n}();\nexport default EventEmitter;","map":{"version":3,"names":["WILDCARD","EventEmitter","_events","prototype","on","evt","callback","once","push","emit","_this","args","_i","arguments","length","events","wildcardEvents","doEmit","es","i","_a","splice","apply","off","length_1","getEvents"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/event-emitter/src/index.ts"],"sourcesContent":["interface EventType {\n  readonly callback: Function;\n  readonly once: boolean;\n}\n\ntype EventsType = Record<string, EventType[]>;\n\nconst WILDCARD = '*';\n\n/* event-emitter */\nexport default class EventEmitter {\n  private _events: EventsType = {};\n\n  /**\n   * 监听一个事件\n   * @param evt\n   * @param callback\n   * @param once\n   */\n  on(evt: string, callback: Function, once?: boolean) {\n    if (!this._events[evt]) {\n      this._events[evt] = [];\n    }\n    this._events[evt].push({\n      callback,\n      once: !!once,\n    });\n    return this;\n  }\n\n  /**\n   * 监听一个事件一次\n   * @param evt\n   * @param callback\n   */\n  once(evt: string, callback: Function) {\n    return this.on(evt, callback, true);\n  }\n\n  /**\n   * 触发一个事件\n   * @param evt\n   * @param args\n   */\n  emit(evt: string, ...args: any[]) {\n    const events = this._events[evt] || [];\n    const wildcardEvents = this._events[WILDCARD] || [];\n\n    // 实际的处理 emit 方法\n    const doEmit = (es: EventType[]) => {\n      let length = es.length;\n      for (let i = 0; i < length; i++) {\n        if (!es[i]) {\n          continue;\n        }\n        const { callback, once } = es[i];\n\n        if (once) {\n          es.splice(i, 1);\n\n          if (es.length === 0) {\n            delete this._events[evt];\n          }\n\n          length--;\n          i--;\n        }\n\n        callback.apply(this, args);\n      }\n    };\n\n    doEmit(events);\n    doEmit(wildcardEvents);\n  }\n\n  /**\n   * 取消监听一个事件，或者一个channel\n   * @param evt\n   * @param callback\n   */\n  off(evt?: string, callback?: Function) {\n    if (!evt) {\n      // evt 为空全部清除\n      this._events = {};\n    } else {\n      if (!callback) {\n        // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n      } else {\n        // evt 存在，callback 存在，清除匹配的\n        const events = this._events[evt] || [];\n\n        let length = events.length;\n        for (let i = 0; i < length; i++) {\n          if (events[i].callback === callback) {\n            events.splice(i, 1);\n            length--;\n            i--;\n          }\n        }\n\n        if (events.length === 0) {\n          delete this._events[evt];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /* 当前所有的事件 */\n  getEvents() {\n    return this._events;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}