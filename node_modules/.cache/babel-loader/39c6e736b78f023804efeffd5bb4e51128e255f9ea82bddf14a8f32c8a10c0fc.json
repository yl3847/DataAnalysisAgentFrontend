{"ast":null,"code":"import { deepMix } from '@antv/util';\nimport { LineXY } from '../shape';\nimport { MaybeTupleY } from '../transform';\nimport { baseAnnotationChannels, basePreInference, basePostInference, createBandOffset } from './utils';\nconst shape = {\n  line: LineXY\n};\nexport const LineY = options => {\n  return (index, scale, value, coordinate) => {\n    const {\n      y: Y\n    } = value;\n    const offset = createBandOffset(scale, value, deepMix({\n      style: {\n        bandOffset: 0\n      }\n    }, options));\n    const P = Array.from(index, i => {\n      const p1 = [0, Y[i]];\n      const p2 = [1, Y[i]];\n      return [p1, p2].map(d => coordinate.map(offset(d, i)));\n    });\n    return [index, P];\n  };\n};\nLineY.props = {\n  defaultShape: 'line',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseAnnotationChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'y',\n    required: true\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeTupleY\n  }],\n  postInference: [...basePostInference()]\n};","map":{"version":3,"names":["deepMix","LineXY","MaybeTupleY","baseAnnotationChannels","basePreInference","basePostInference","createBandOffset","shape","line","LineY","options","index","scale","value","coordinate","y","Y","offset","style","bandOffset","P","Array","from","i","p1","p2","map","d","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","type","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/lineY.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { MarkComponent as MC, Vector2 } from '../runtime';\nimport { LineYMark } from '../spec';\nimport { LineXY } from '../shape';\nimport { MaybeTupleY } from '../transform';\nimport {\n  baseAnnotationChannels,\n  basePreInference,\n  basePostInference,\n  createBandOffset,\n} from './utils';\n\nconst shape = {\n  line: LineXY,\n};\n\nexport type LineYOptions = Omit<LineYMark, 'type'>;\n\nexport const LineY: MC<LineYOptions> = (options) => {\n  return (index, scale, value, coordinate) => {\n    const { y: Y } = value;\n    const offset = createBandOffset(\n      scale,\n      value,\n      deepMix({ style: { bandOffset: 0 } }, options),\n    );\n    const P = Array.from(index, (i) => {\n      const p1 = [0, Y[i]] as Vector2;\n      const p2 = [1, Y[i]] as Vector2;\n      return [p1, p2].map((d) => coordinate.map(offset(d, i))) as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nLineY.props = {\n  defaultShape: 'line',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseAnnotationChannels({ shapes: Object.keys(shape) }),\n    { name: 'y', required: true },\n  ],\n  preInference: [...basePreInference(), { type: MaybeTupleY }],\n  postInference: [...basePostInference()],\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AAGpC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SACEC,sBAAsB,EACtBC,gBAAgB,EAChBC,iBAAiB,EACjBC,gBAAgB,QACX,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEP;CACP;AAID,OAAO,MAAMQ,KAAK,GAAsBC,OAAO,IAAI;EACjD,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAM;MAAEC,CAAC,EAAEC;IAAC,CAAE,GAAGH,KAAK;IACtB,MAAMI,MAAM,GAAGX,gBAAgB,CAC7BM,KAAK,EACLC,KAAK,EACLb,OAAO,CAAC;MAAEkB,KAAK,EAAE;QAAEC,UAAU,EAAE;MAAC;IAAE,CAAE,EAAET,OAAO,CAAC,CAC/C;IACD,MAAMU,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACX,KAAK,EAAGY,CAAC,IAAI;MAChC,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAER,CAAC,CAACO,CAAC,CAAC,CAAY;MAC/B,MAAME,EAAE,GAAG,CAAC,CAAC,EAAET,CAAC,CAACO,CAAC,CAAC,CAAY;MAC/B,OAAO,CAACC,EAAE,EAAEC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKb,UAAU,CAACY,GAAG,CAACT,MAAM,CAACU,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAc;IACvE,CAAC,CAAC;IACF,OAAO,CAACZ,KAAK,EAAES,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDX,KAAK,CAACmB,KAAK,GAAG;EACZC,YAAY,EAAE,MAAM;EACpBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBxB,KAAK;EACLyB,QAAQ,EAAE,CACR,GAAG7B,sBAAsB,CAAC;IAAE8B,MAAM,EAAEC,MAAM,CAACC,IAAI,CAAC5B,KAAK;EAAC,CAAE,CAAC,EACzD;IAAE6B,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,CAC9B;EACDC,YAAY,EAAE,CAAC,GAAGlC,gBAAgB,EAAE,EAAE;IAAEmC,IAAI,EAAErC;EAAW,CAAE,CAAC;EAC5DsC,aAAa,EAAE,CAAC,GAAGnC,iBAAiB,EAAE;CACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}