{"ast":null,"code":"import degree from './degree';\nimport { getNeighbors } from \"./util\";\n/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nvar pageRank = function pageRank(graphData, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var _a = graphData.nodes,\n    nodes = _a === void 0 ? [] : _a,\n    _b = graphData.edges,\n    edges = _b === void 0 ? [] : _b;\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {};\n  // Initialize pageranks 初始化\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.id;\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n  var nodeDegree = degree(graphData);\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = 0;\n      if (nodeDegree[node.id].inDegree === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = getNeighbors(nodeId, edges, 'source');\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = nodeDegree[neighbor].outDegree;\n          if (outDegree > 0) currentRank += prevRanks[neighbor] / outDegree;\n        }\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n    maxIterations -= 1;\n  }\n  return prevRanks;\n};\nexport default pageRank;","map":{"version":3,"names":["degree","getNeighbors","pageRank","graphData","epsilon","linkProb","distance","leakedRank","maxIterations","_a","nodes","_b","edges","nodesCount","length","currentRank","curRanks","prevRanks","j","node","nodeId","id","nodeDegree","inDegree","neighbors","i","neighbor","outDegree","Math","abs"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/pageRank.js"],"sourcesContent":["import degree from './degree';\nimport { getNeighbors } from \"./util\";\n/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nvar pageRank = function pageRank(graphData, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var _a = graphData.nodes,\n    nodes = _a === void 0 ? [] : _a,\n    _b = graphData.edges,\n    edges = _b === void 0 ? [] : _b;\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {};\n  // Initialize pageranks 初始化\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.id;\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n  var nodeDegree = degree(graphData);\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = 0;\n      if (nodeDegree[node.id].inDegree === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = getNeighbors(nodeId, edges, 'source');\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = nodeDegree[neighbor].outDegree;\n          if (outDegree > 0) currentRank += prevRanks[neighbor] / outDegree;\n        }\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.id;\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n    maxIterations -= 1;\n  }\n  return prevRanks;\n};\nexport default pageRank;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}