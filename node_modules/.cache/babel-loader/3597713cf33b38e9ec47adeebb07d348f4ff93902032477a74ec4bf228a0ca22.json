{"ast":null,"code":"import { Circle as GCircle } from '@antv/g';\nimport { getBBoxSize } from '../../utils/bbox';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { subStyleProps } from '../../utils/prefix';\nimport { parseSize } from '../../utils/size';\nimport { BaseCombo } from './base-combo';\n/**\n * <zh/> 圆形组合\n *\n * <en/> Circle combo\n */\nexport class CircleCombo extends BaseCombo {\n  constructor(options) {\n    super(options);\n  }\n  drawKeyShape(attributes, container) {\n    return this.upsert('key', GCircle, this.getKeyStyle(attributes), container);\n  }\n  getKeyStyle(attributes) {\n    const {\n      collapsed\n    } = attributes;\n    const keyStyle = super.getKeyStyle(attributes);\n    const [width] = this.getKeySize(attributes);\n    return Object.assign(Object.assign(Object.assign({}, keyStyle), collapsed && subStyleProps(keyStyle, 'collapsed')), {\n      r: width / 2\n    });\n  }\n  getCollapsedKeySize(attributes) {\n    const [collapsedWidth, collapsedHeight] = parseSize(attributes.collapsedSize);\n    const collapsedR = Math.max(collapsedWidth, collapsedHeight) / 2;\n    return [collapsedR * 2, collapsedR * 2, 0];\n  }\n  getExpandedKeySize(attributes) {\n    const contentBBox = this.getContentBBox(attributes);\n    const [width, height] = getBBoxSize(contentBBox);\n    const expandedR = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)) / 2;\n    return [expandedR * 2, expandedR * 2, 0];\n  }\n  getIntersectPoint(point, useExtendedLine = false) {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}","map":{"version":3,"names":["Circle","GCircle","getBBoxSize","getEllipseIntersectPoint","subStyleProps","parseSize","BaseCombo","CircleCombo","constructor","options","drawKeyShape","attributes","container","upsert","getKeyStyle","collapsed","keyStyle","width","getKeySize","Object","assign","r","getCollapsedKeySize","collapsedWidth","collapsedHeight","collapsedSize","collapsedR","Math","max","getExpandedKeySize","contentBBox","getContentBBox","height","expandedR","sqrt","pow","getIntersectPoint","point","useExtendedLine","keyShapeBounds","getShape","getBounds"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/combos/circle.ts"],"sourcesContent":["import type { DisplayObjectConfig, CircleStyleProps as GCircleStyleProps } from '@antv/g';\nimport { Circle as GCircle, Group } from '@antv/g';\nimport type { Point, STDSize } from '../../types';\nimport { getBBoxSize } from '../../utils/bbox';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { subStyleProps } from '../../utils/prefix';\nimport { parseSize } from '../../utils/size';\nimport type { BaseComboStyleProps } from './base-combo';\nimport { BaseCombo } from './base-combo';\n\n/**\n * <zh/> 圆形组合样式配置项\n *\n * <en/> Circle combo style props\n */\nexport interface CircleComboStyleProps extends BaseComboStyleProps {}\n\n/**\n * <zh/> 圆形组合\n *\n * <en/> Circle combo\n */\nexport class CircleCombo extends BaseCombo<CircleComboStyleProps> {\n  constructor(options: DisplayObjectConfig<CircleComboStyleProps>) {\n    super(options);\n  }\n\n  protected drawKeyShape(attributes: Required<CircleComboStyleProps>, container: Group): GCircle | undefined {\n    return this.upsert('key', GCircle, this.getKeyStyle(attributes), container);\n  }\n\n  protected getKeyStyle(attributes: Required<CircleComboStyleProps>): GCircleStyleProps {\n    const { collapsed } = attributes;\n    const keyStyle = super.getKeyStyle(attributes);\n\n    const [width] = this.getKeySize(attributes);\n    return {\n      ...keyStyle,\n      ...(collapsed && subStyleProps(keyStyle, 'collapsed')),\n      r: width / 2,\n    };\n  }\n\n  protected getCollapsedKeySize(attributes: Required<CircleComboStyleProps>): STDSize {\n    const [collapsedWidth, collapsedHeight] = parseSize(attributes.collapsedSize);\n    const collapsedR = Math.max(collapsedWidth, collapsedHeight) / 2;\n    return [collapsedR * 2, collapsedR * 2, 0];\n  }\n\n  protected getExpandedKeySize(attributes: Required<CircleComboStyleProps>): STDSize {\n    const contentBBox = this.getContentBBox(attributes);\n    const [width, height] = getBBoxSize(contentBBox);\n    const expandedR = Math.sqrt(width ** 2 + height ** 2) / 2;\n    return [expandedR * 2, expandedR * 2, 0];\n  }\n\n  public getIntersectPoint(point: Point, useExtendedLine = false): Point {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}\n"],"mappings":"AACA,SAASA,MAAM,IAAIC,OAAO,QAAe,SAAS;AAElD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,wBAAwB,QAAQ,mBAAmB;AAC5D,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,SAAS,QAAQ,cAAc;AASxC;;;;;AAKA,OAAM,MAAOC,WAAY,SAAQD,SAAgC;EAC/DE,YAAYC,OAAmD;IAC7D,KAAK,CAACA,OAAO,CAAC;EAChB;EAEUC,YAAYA,CAACC,UAA2C,EAAEC,SAAgB;IAClF,OAAO,IAAI,CAACC,MAAM,CAAC,KAAK,EAAEZ,OAAO,EAAE,IAAI,CAACa,WAAW,CAACH,UAAU,CAAC,EAAEC,SAAS,CAAC;EAC7E;EAEUE,WAAWA,CAACH,UAA2C;IAC/D,MAAM;MAAEI;IAAS,CAAE,GAAGJ,UAAU;IAChC,MAAMK,QAAQ,GAAG,KAAK,CAACF,WAAW,CAACH,UAAU,CAAC;IAE9C,MAAM,CAACM,KAAK,CAAC,GAAG,IAAI,CAACC,UAAU,CAACP,UAAU,CAAC;IAC3C,OAAAQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKJ,QAAQ,GACPD,SAAS,IAAIX,aAAa,CAACY,QAAQ,EAAE,WAAW,CAAE;MACtDK,CAAC,EAAEJ,KAAK,GAAG;IAAC;EAEhB;EAEUK,mBAAmBA,CAACX,UAA2C;IACvE,MAAM,CAACY,cAAc,EAAEC,eAAe,CAAC,GAAGnB,SAAS,CAACM,UAAU,CAACc,aAAa,CAAC;IAC7E,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACL,cAAc,EAAEC,eAAe,CAAC,GAAG,CAAC;IAChE,OAAO,CAACE,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;EAC5C;EAEUG,kBAAkBA,CAAClB,UAA2C;IACtE,MAAMmB,WAAW,GAAG,IAAI,CAACC,cAAc,CAACpB,UAAU,CAAC;IACnD,MAAM,CAACM,KAAK,EAAEe,MAAM,CAAC,GAAG9B,WAAW,CAAC4B,WAAW,CAAC;IAChD,MAAMG,SAAS,GAAGN,IAAI,CAACO,IAAI,CAACP,IAAA,CAAAQ,GAAA,CAAAlB,KAAK,EAAI,CAAC,IAAGU,IAAA,CAAAQ,GAAA,CAAAH,MAAM,EAAI,CAAC,EAAC,GAAG,CAAC;IACzD,OAAO,CAACC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAE,CAAC,CAAC;EAC1C;EAEOG,iBAAiBA,CAACC,KAAY,EAAEC,eAAe,GAAG,KAAK;IAC5D,MAAMC,cAAc,GAAG,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,CAACC,SAAS,EAAE;IACvD,OAAOtC,wBAAwB,CAACkC,KAAK,EAAEE,cAAc,EAAED,eAAe,CAAC;EACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}