{"ast":null,"code":"/**\n * <zh/> 执行深度优先遍历\n *\n * <en/> perform depth first traversal\n * @param node - <zh/> 起始节点 | <en/> start node\n * @param visitor - <zh/> 访问节点函数 | <en/> visitor function\n * @param navigator - <zh/> 获取子节点函数 | <en/> get children function\n * @param mode - <zh/> 访问模式，BT: 自底向上访问，TB: 自顶向下访问 | <en/> traverse mode, BT: bottom to top, TB: top to bottom\n * @param depth - <zh/> 当前深度 | <en/> current depth\n */\nexport function dfs(node, visitor, navigator, mode, depth = 0) {\n  if (mode === 'TB') visitor(node, depth);\n  const children = navigator(node);\n  if (children) {\n    for (const child of children) {\n      dfs(child, visitor, navigator, mode, depth + 1);\n    }\n  }\n  if (mode === 'BT') visitor(node, depth);\n}\n/**\n * <zh/> 执行广度优先遍历\n *\n * <en/> perform breadth first traversal\n * @param node - <zh/> 起始节点 | <en/> start node\n * @param visitor - <zh/> 访问节点函数 | <en/> visitor function\n * @param navigator - <zh/> 获取子节点函数 | <en/> get children function\n */\nexport function bfs(node, visitor, navigator) {\n  const queue = [[node, 0]];\n  while (queue.length) {\n    const [current, depth] = queue.shift();\n    visitor(current, depth);\n    const children = navigator(current);\n    if (children) {\n      for (const child of children) {\n        queue.push([child, depth + 1]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["dfs","node","visitor","navigator","mode","depth","children","child","bfs","queue","length","current","shift","push"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/traverse.ts"],"sourcesContent":["export type HierarchyStructure<T> = T & {\n  children?: HierarchyStructure<T>[];\n};\n\n/**\n * <zh/> 执行深度优先遍历\n *\n * <en/> perform depth first traversal\n * @param node - <zh/> 起始节点 | <en/> start node\n * @param visitor - <zh/> 访问节点函数 | <en/> visitor function\n * @param navigator - <zh/> 获取子节点函数 | <en/> get children function\n * @param mode - <zh/> 访问模式，BT: 自底向上访问，TB: 自顶向下访问 | <en/> traverse mode, BT: bottom to top, TB: top to bottom\n * @param depth - <zh/> 当前深度 | <en/> current depth\n */\nexport function dfs<N>(\n  node: N,\n  visitor: (node: N, depth: number) => void,\n  navigator: (node: N) => N[] | undefined,\n  mode: 'BT' | 'TB',\n  depth: number = 0,\n) {\n  if (mode === 'TB') visitor(node, depth);\n\n  const children = navigator(node);\n\n  if (children) {\n    for (const child of children) {\n      dfs(child, visitor, navigator, mode, depth + 1);\n    }\n  }\n\n  if (mode === 'BT') visitor(node, depth);\n}\n\n/**\n * <zh/> 执行广度优先遍历\n *\n * <en/> perform breadth first traversal\n * @param node - <zh/> 起始节点 | <en/> start node\n * @param visitor - <zh/> 访问节点函数 | <en/> visitor function\n * @param navigator - <zh/> 获取子节点函数 | <en/> get children function\n */\nexport function bfs<N>(node: N, visitor: (node: N, depth: number) => void, navigator: (node: N) => N[] | undefined) {\n  const queue: [N, number][] = [[node, 0]];\n\n  while (queue.length) {\n    const [current, depth] = queue.shift()!;\n\n    visitor(current, depth);\n\n    const children = navigator(current);\n\n    if (children) {\n      for (const child of children) {\n        queue.push([child, depth + 1]);\n      }\n    }\n  }\n}\n"],"mappings":"AAIA;;;;;;;;;;AAUA,OAAM,SAAUA,GAAGA,CACjBC,IAAO,EACPC,OAAyC,EACzCC,SAAuC,EACvCC,IAAiB,EACjBC,KAAA,GAAgB,CAAC;EAEjB,IAAID,IAAI,KAAK,IAAI,EAAEF,OAAO,CAACD,IAAI,EAAEI,KAAK,CAAC;EAEvC,MAAMC,QAAQ,GAAGH,SAAS,CAACF,IAAI,CAAC;EAEhC,IAAIK,QAAQ,EAAE;IACZ,KAAK,MAAMC,KAAK,IAAID,QAAQ,EAAE;MAC5BN,GAAG,CAACO,KAAK,EAAEL,OAAO,EAAEC,SAAS,EAAEC,IAAI,EAAEC,KAAK,GAAG,CAAC,CAAC;IACjD;EACF;EAEA,IAAID,IAAI,KAAK,IAAI,EAAEF,OAAO,CAACD,IAAI,EAAEI,KAAK,CAAC;AACzC;AAEA;;;;;;;;AAQA,OAAM,SAAUG,GAAGA,CAAIP,IAAO,EAAEC,OAAyC,EAAEC,SAAuC;EAChH,MAAMM,KAAK,GAAkB,CAAC,CAACR,IAAI,EAAE,CAAC,CAAC,CAAC;EAExC,OAAOQ,KAAK,CAACC,MAAM,EAAE;IACnB,MAAM,CAACC,OAAO,EAAEN,KAAK,CAAC,GAAGI,KAAK,CAACG,KAAK,EAAG;IAEvCV,OAAO,CAACS,OAAO,EAAEN,KAAK,CAAC;IAEvB,MAAMC,QAAQ,GAAGH,SAAS,CAACQ,OAAO,CAAC;IAEnC,IAAIL,QAAQ,EAAE;MACZ,KAAK,MAAMC,KAAK,IAAID,QAAQ,EAAE;QAC5BG,KAAK,CAACI,IAAI,CAAC,CAACN,KAAK,EAAEF,KAAK,GAAG,CAAC,CAAC,CAAC;MAChC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}