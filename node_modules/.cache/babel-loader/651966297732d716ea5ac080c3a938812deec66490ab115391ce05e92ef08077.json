{"ast":null,"code":"import axios from 'axios';\nconst LAMBDA_URL = process.env.REACT_APP_LAMBDA_URL;\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION || 'us-east-1';\n\n// Lambda function invocation\nexport const sendToLambda = async payload => {\n  if (!LAMBDA_URL) {\n    throw new Error('Lambda URL is not configured');\n  }\n  try {\n    const response = await axios.post(LAMBDA_URL, payload, {\n      headers: {\n        'Content-Type': 'application/json',\n        // Add CORS headers if needed\n        'Access-Control-Allow-Origin': '*'\n      },\n      timeout: 25000 // 25 seconds (Lambda timeout is usually 30s)\n    });\n\n    // Parse Lambda response\n    if (response.data) {\n      // Handle Lambda proxy integration response\n      if (response.data.statusCode && response.data.body) {\n        const body = typeof response.data.body === 'string' ? JSON.parse(response.data.body) : response.data.body;\n        if (response.data.statusCode !== 200) {\n          throw new Error(body.error || 'Lambda function error');\n        }\n        return body;\n      }\n\n      // Direct Lambda response\n      return response.data;\n    }\n    throw new Error('Invalid Lambda response');\n  } catch (error) {\n    console.error('Lambda invocation error:', error);\n\n    // Format error message\n    if (error.response) {\n      var _error$response$data;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Lambda function error');\n    } else if (error.request) {\n      throw new Error('Network error: Unable to reach Lambda function');\n    } else {\n      throw new Error(error.message || 'Unknown error occurred');\n    }\n  }\n};\n\n// Lambda function for specific operations\nexport const lambdaOperations = {\n  // Query database\n  async queryDatabase(sqlQuery) {\n    return sendToLambda({\n      operation: 'query',\n      query: sqlQuery\n    });\n  },\n  // Generate chart\n  async generateChart(data, chartType, config) {\n    return sendToLambda({\n      operation: 'generateChart',\n      data,\n      chartType,\n      config\n    });\n  },\n  // Process natural language query\n  async processNLQuery(query) {\n    return sendToLambda({\n      operation: 'nlQuery',\n      query\n    });\n  },\n  // Get schema information\n  async getSchema() {\n    return sendToLambda({\n      operation: 'getSchema'\n    });\n  },\n  // Analyze data\n  async analyzeData(data, analysisType) {\n    return sendToLambda({\n      operation: 'analyze',\n      data,\n      analysisType\n    });\n  }\n};\nexport default {\n  sendToLambda,\n  ...lambdaOperations\n};","map":{"version":3,"names":["axios","LAMBDA_URL","process","env","REACT_APP_LAMBDA_URL","AWS_REGION","REACT_APP_AWS_REGION","sendToLambda","payload","Error","response","post","headers","timeout","data","statusCode","body","JSON","parse","error","console","_error$response$data","request","message","lambdaOperations","queryDatabase","sqlQuery","operation","query","generateChart","chartType","config","processNLQuery","getSchema","analyzeData","analysisType"],"sources":["/Users/yizelu/Desktop/mcp/frontend/src/services/lambdaClient.js"],"sourcesContent":["import axios from 'axios';\n\nconst LAMBDA_URL = process.env.REACT_APP_LAMBDA_URL;\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION || 'us-east-1';\n\n// Lambda function invocation\nexport const sendToLambda = async (payload) => {\n  if (!LAMBDA_URL) {\n    throw new Error('Lambda URL is not configured');\n  }\n\n  try {\n    const response = await axios.post(LAMBDA_URL, payload, {\n      headers: {\n        'Content-Type': 'application/json',\n        // Add CORS headers if needed\n        'Access-Control-Allow-Origin': '*',\n      },\n      timeout: 25000, // 25 seconds (Lambda timeout is usually 30s)\n    });\n\n    // Parse Lambda response\n    if (response.data) {\n      // Handle Lambda proxy integration response\n      if (response.data.statusCode && response.data.body) {\n        const body = typeof response.data.body === 'string' \n          ? JSON.parse(response.data.body) \n          : response.data.body;\n        \n        if (response.data.statusCode !== 200) {\n          throw new Error(body.error || 'Lambda function error');\n        }\n        \n        return body;\n      }\n      \n      // Direct Lambda response\n      return response.data;\n    }\n\n    throw new Error('Invalid Lambda response');\n  } catch (error) {\n    console.error('Lambda invocation error:', error);\n    \n    // Format error message\n    if (error.response) {\n      throw new Error(error.response.data?.error || 'Lambda function error');\n    } else if (error.request) {\n      throw new Error('Network error: Unable to reach Lambda function');\n    } else {\n      throw new Error(error.message || 'Unknown error occurred');\n    }\n  }\n};\n\n// Lambda function for specific operations\nexport const lambdaOperations = {\n  // Query database\n  async queryDatabase(sqlQuery) {\n    return sendToLambda({\n      operation: 'query',\n      query: sqlQuery,\n    });\n  },\n\n  // Generate chart\n  async generateChart(data, chartType, config) {\n    return sendToLambda({\n      operation: 'generateChart',\n      data,\n      chartType,\n      config,\n    });\n  },\n\n  // Process natural language query\n  async processNLQuery(query) {\n    return sendToLambda({\n      operation: 'nlQuery',\n      query,\n    });\n  },\n\n  // Get schema information\n  async getSchema() {\n    return sendToLambda({\n      operation: 'getSchema',\n    });\n  },\n\n  // Analyze data\n  async analyzeData(data, analysisType) {\n    return sendToLambda({\n      operation: 'analyze',\n      data,\n      analysisType,\n    });\n  },\n};\n\nexport default {\n  sendToLambda,\n  ...lambdaOperations,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}