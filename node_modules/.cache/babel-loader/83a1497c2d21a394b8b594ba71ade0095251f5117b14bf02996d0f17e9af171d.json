{"ast":null,"code":"const EFFECT_WEAKMAP = new WeakMap();\n/**\n * <zh/> 判定给定样式是否与上一次的样式相同\n *\n * <en/> Determine whether the given style are the same as the previous ones\n * @param target - <zh/> 目标元素 | <en/> Target element\n * @param key - <zh/> 缓存 key | <en/> Cache key\n * @param style - <zh/> 样式属性 | <en/> Style attribute\n * @returns <zh/> 是否执行函数 | <en/> Whether to execute the function\n * @deprecated <zh/> 该方法已废弃，并不能显著提升性能 | <en/> This method is deprecated and does not significantly improve performance\n */\nexport function effect(target, key, style) {\n  // return true;\n  if (!EFFECT_WEAKMAP.has(target)) EFFECT_WEAKMAP.set(target, {});\n  const cache = EFFECT_WEAKMAP.get(target);\n  if (!cache[key]) {\n    cache[key] = style;\n    return true;\n  }\n  const original = cache[key];\n  if (isStyleEqual(original, style)) return false;\n  cache[key] = style;\n  return true;\n}\n/**\n * <zh/> 比较两个样式属性是否相等\n *\n * <en/> Compare whether two style attributes are equal\n * @param a - <zh/> 样式属性 a | <en/> Style attribute a\n * @param b - <zh/> 样式属性 b | <en/> Style attribute b\n * @param depth - <zh/> 比较深度 | <en/> Comparison depth\n * @returns <zh/> 是否相等 | <en/> Whether they are equal\n * @remarks\n * <zh/> 进行第二层浅比较用于比较 badges、ports 等复合图形属性\n *\n * <en/> Perform a second-level shallow comparison to compare complex shape attributes such as badges and ports\n */\nconst isStyleEqual = (a, b, depth = 2) => {\n  if (typeof a !== 'object' || typeof b !== 'object') return a === b;\n  const keys1 = Object.keys(a);\n  const keys2 = Object.keys(b);\n  if (keys1.length !== keys2.length) return false;\n  for (const key of keys1) {\n    const val1 = a[key];\n    const val2 = b[key];\n    if (depth > 1 && typeof val1 === 'object' && typeof val2 === 'object') {\n      if (!isStyleEqual(val1, val2, depth - 1)) return false;\n    } else if (val1 !== val2) return false;\n  }\n  return true;\n};","map":{"version":3,"names":["EFFECT_WEAKMAP","WeakMap","effect","target","key","style","has","set","cache","get","original","isStyleEqual","a","b","depth","keys1","Object","keys","keys2","length","val1","val2"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/effect.ts"],"sourcesContent":["import type { Element } from '../types';\n\nconst EFFECT_WEAKMAP = new WeakMap<Element, Record<string, any>>();\n\n/**\n * <zh/> 判定给定样式是否与上一次的样式相同\n *\n * <en/> Determine whether the given style are the same as the previous ones\n * @param target - <zh/> 目标元素 | <en/> Target element\n * @param key - <zh/> 缓存 key | <en/> Cache key\n * @param style - <zh/> 样式属性 | <en/> Style attribute\n * @returns <zh/> 是否执行函数 | <en/> Whether to execute the function\n * @deprecated <zh/> 该方法已废弃，并不能显著提升性能 | <en/> This method is deprecated and does not significantly improve performance\n */\nexport function effect<T extends false | Record<string, any>>(target: Element, key: string, style: T): boolean {\n  // return true;\n  if (!EFFECT_WEAKMAP.has(target)) EFFECT_WEAKMAP.set(target, {});\n  const cache = EFFECT_WEAKMAP.get(target)!;\n  if (!cache[key]) {\n    cache[key] = style;\n    return true;\n  }\n  const original = cache[key];\n  if (isStyleEqual(original, style)) return false;\n  cache[key] = style;\n  return true;\n}\n\n/**\n * <zh/> 比较两个样式属性是否相等\n *\n * <en/> Compare whether two style attributes are equal\n * @param a - <zh/> 样式属性 a | <en/> Style attribute a\n * @param b - <zh/> 样式属性 b | <en/> Style attribute b\n * @param depth - <zh/> 比较深度 | <en/> Comparison depth\n * @returns <zh/> 是否相等 | <en/> Whether they are equal\n * @remarks\n * <zh/> 进行第二层浅比较用于比较 badges、ports 等复合图形属性\n *\n * <en/> Perform a second-level shallow comparison to compare complex shape attributes such as badges and ports\n */\nconst isStyleEqual = (a: false | Record<string, unknown>, b: false | Record<string, unknown>, depth = 2): boolean => {\n  if (typeof a !== 'object' || typeof b !== 'object') return a === b;\n\n  const keys1 = Object.keys(a);\n  const keys2 = Object.keys(b);\n\n  if (keys1.length !== keys2.length) return false;\n\n  for (const key of keys1) {\n    const val1 = a[key];\n    const val2 = b[key];\n    if (depth > 1 && typeof val1 === 'object' && typeof val2 === 'object') {\n      if (!isStyleEqual(val1 as Record<string, unknown>, val2 as Record<string, unknown>, depth - 1)) return false;\n    } else if (val1 !== val2) return false;\n  }\n\n  return true;\n};\n"],"mappings":"AAEA,MAAMA,cAAc,GAAG,IAAIC,OAAO,EAAgC;AAElE;;;;;;;;;;AAUA,OAAM,SAAUC,MAAMA,CAAwCC,MAAe,EAAEC,GAAW,EAAEC,KAAQ;EAClG;EACA,IAAI,CAACL,cAAc,CAACM,GAAG,CAACH,MAAM,CAAC,EAAEH,cAAc,CAACO,GAAG,CAACJ,MAAM,EAAE,EAAE,CAAC;EAC/D,MAAMK,KAAK,GAAGR,cAAc,CAACS,GAAG,CAACN,MAAM,CAAE;EACzC,IAAI,CAACK,KAAK,CAACJ,GAAG,CAAC,EAAE;IACfI,KAAK,CAACJ,GAAG,CAAC,GAAGC,KAAK;IAClB,OAAO,IAAI;EACb;EACA,MAAMK,QAAQ,GAAGF,KAAK,CAACJ,GAAG,CAAC;EAC3B,IAAIO,YAAY,CAACD,QAAQ,EAAEL,KAAK,CAAC,EAAE,OAAO,KAAK;EAC/CG,KAAK,CAACJ,GAAG,CAAC,GAAGC,KAAK;EAClB,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;;;AAaA,MAAMM,YAAY,GAAGA,CAACC,CAAkC,EAAEC,CAAkC,EAAEC,KAAK,GAAG,CAAC,KAAa;EAClH,IAAI,OAAOF,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE,OAAOD,CAAC,KAAKC,CAAC;EAElE,MAAME,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACL,CAAC,CAAC;EAC5B,MAAMM,KAAK,GAAGF,MAAM,CAACC,IAAI,CAACJ,CAAC,CAAC;EAE5B,IAAIE,KAAK,CAACI,MAAM,KAAKD,KAAK,CAACC,MAAM,EAAE,OAAO,KAAK;EAE/C,KAAK,MAAMf,GAAG,IAAIW,KAAK,EAAE;IACvB,MAAMK,IAAI,GAAGR,CAAC,CAACR,GAAG,CAAC;IACnB,MAAMiB,IAAI,GAAGR,CAAC,CAACT,GAAG,CAAC;IACnB,IAAIU,KAAK,GAAG,CAAC,IAAI,OAAOM,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MACrE,IAAI,CAACV,YAAY,CAACS,IAA+B,EAAEC,IAA+B,EAAEP,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,KAAK;IAC9G,CAAC,MAAM,IAAIM,IAAI,KAAKC,IAAI,EAAE,OAAO,KAAK;EACxC;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}