{"ast":null,"code":"import { arrayDiff } from '../../utils/diff';\nimport { parseExtensions } from '../../utils/extension';\nimport { print } from '../../utils/print';\nimport { getExtension } from '../get';\nexport class ExtensionController {\n  constructor(context) {\n    this.extensions = [];\n    this.extensionMap = {};\n    this.context = context;\n  }\n  setExtensions(extensions) {\n    const stdExtensions = parseExtensions(this.context.graph, this.category, extensions);\n    const {\n      enter,\n      update,\n      exit,\n      keep\n    } = arrayDiff(this.extensions, stdExtensions, extension => extension.key);\n    this.createExtensions(enter);\n    this.updateExtensions([...update, ...keep]);\n    this.destroyExtensions(exit);\n    this.extensions = stdExtensions;\n  }\n  createExtension(extension) {\n    const {\n      category\n    } = this;\n    const {\n      key,\n      type\n    } = extension;\n    const Ctor = getExtension(category, type);\n    if (!Ctor) return print.warn(`The extension ${type} of ${category} is not registered.`);\n    const instance = new Ctor(this.context, extension);\n    instance.initialized = true;\n    this.extensionMap[key] = instance;\n  }\n  createExtensions(extensions) {\n    extensions.forEach(extension => this.createExtension(extension));\n  }\n  updateExtension(extension) {\n    const {\n      key\n    } = extension;\n    const instance = this.extensionMap[key];\n    if (instance) {\n      instance.update(extension);\n    }\n  }\n  updateExtensions(extensions) {\n    extensions.forEach(extension => this.updateExtension(extension));\n  }\n  destroyExtension(key) {\n    const instance = this.extensionMap[key];\n    if (!instance) return;\n    if (instance.initialized && !instance.destroyed) {\n      instance.destroy();\n    }\n    delete this.extensionMap[key];\n  }\n  destroyExtensions(extensions) {\n    extensions.forEach(({\n      key\n    }) => this.destroyExtension(key));\n  }\n  destroy() {\n    this.destroyExtensions(this.extensions);\n    // @ts-expect-error force delete\n    this.context = {};\n    this.extensions = [];\n    this.extensionMap = {};\n  }\n}\n/**\n * <zh/> 模块实例基类\n *\n * <en/> Base class for extension instance\n */\nexport class BaseExtension {\n  constructor(context, options) {\n    this.events = [];\n    this.initialized = false;\n    this.destroyed = false;\n    this.context = context;\n    this.options = options;\n  }\n  update(options) {\n    this.options = Object.assign(this.options, options);\n  }\n  destroy() {\n    // @ts-expect-error force delete\n    this.context = {};\n    // @ts-expect-error force delete\n    this.options = {};\n    this.destroyed = true;\n  }\n}","map":{"version":3,"names":["arrayDiff","parseExtensions","print","getExtension","ExtensionController","constructor","context","extensions","extensionMap","setExtensions","stdExtensions","graph","category","enter","update","exit","keep","extension","key","createExtensions","updateExtensions","destroyExtensions","createExtension","type","Ctor","warn","instance","initialized","forEach","updateExtension","destroyExtension","destroyed","destroy","BaseExtension","options","events","Object","assign"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/registry/extension/index.ts"],"sourcesContent":["import type EventEmitter from '@antv/event-emitter';\nimport type { Graph } from '../../runtime/graph';\nimport type { RuntimeContext } from '../../runtime/types';\nimport type { IEvent } from '../../types';\nimport { arrayDiff } from '../../utils/diff';\nimport { parseExtensions } from '../../utils/extension';\nimport { print } from '../../utils/print';\nimport { getExtension } from '../get';\nimport type { STDExtensionOption } from './types';\n\nexport abstract class ExtensionController<E extends BaseExtension<any>> {\n  protected context: RuntimeContext;\n\n  protected extensions: STDExtensionOption[] = [];\n\n  protected extensionMap: Record<string, E> = {};\n\n  public abstract category: 'plugin' | 'behavior' | 'transform';\n\n  constructor(context: RuntimeContext) {\n    this.context = context;\n  }\n\n  public setExtensions(\n    extensions: (\n      | string\n      | { type: string; [keys: string]: unknown }\n      | ((this: Graph) => { type: string; [keys: string]: unknown })\n    )[],\n  ) {\n    const stdExtensions = parseExtensions(this.context.graph, this.category, extensions) as STDExtensionOption[];\n    const { enter, update, exit, keep } = arrayDiff(this.extensions, stdExtensions, (extension) => extension.key);\n\n    this.createExtensions(enter);\n    this.updateExtensions([...update, ...keep]);\n    this.destroyExtensions(exit);\n\n    this.extensions = stdExtensions;\n  }\n\n  protected createExtension(extension: STDExtensionOption) {\n    const { category } = this;\n\n    const { key, type } = extension;\n    const Ctor = getExtension(category, type);\n    if (!Ctor) return print.warn(`The extension ${type} of ${category} is not registered.`);\n\n    const instance = new Ctor(this.context, extension);\n    instance.initialized = true;\n    this.extensionMap[key] = instance as E;\n  }\n\n  protected createExtensions(extensions: STDExtensionOption[]) {\n    extensions.forEach((extension) => this.createExtension(extension));\n  }\n\n  protected updateExtension(extension: STDExtensionOption) {\n    const { key } = extension;\n    const instance = this.extensionMap[key];\n    if (instance) {\n      instance.update(extension);\n    }\n  }\n\n  protected updateExtensions(extensions: STDExtensionOption[]) {\n    extensions.forEach((extension) => this.updateExtension(extension));\n  }\n\n  protected destroyExtension(key: string) {\n    const instance = this.extensionMap[key];\n\n    if (!instance) return;\n    if (instance.initialized && !instance.destroyed) {\n      instance.destroy();\n    }\n\n    delete this.extensionMap[key];\n  }\n\n  protected destroyExtensions(extensions: STDExtensionOption[]) {\n    extensions.forEach(({ key }) => this.destroyExtension(key));\n  }\n\n  public destroy() {\n    this.destroyExtensions(this.extensions);\n    // @ts-expect-error force delete\n    this.context = {};\n    this.extensions = [];\n    this.extensionMap = {};\n  }\n}\n\n/**\n * <zh/> 模块实例基类\n *\n * <en/> Base class for extension instance\n */\nexport class BaseExtension<T extends { type: string; key?: string; [key: string]: unknown }> {\n  protected context: RuntimeContext;\n\n  protected options: Required<T>;\n\n  protected events: [EventEmitter | HTMLElement, string, (event: IEvent) => void][] = [];\n\n  public initialized = false;\n\n  public destroyed = false;\n\n  constructor(context: RuntimeContext, options: Partial<T>) {\n    this.context = context;\n    this.options = options as Required<T>;\n  }\n\n  public update(options: Partial<T>) {\n    this.options = Object.assign(this.options, options);\n  }\n\n  public destroy() {\n    // @ts-expect-error force delete\n    this.context = {};\n    // @ts-expect-error force delete\n    this.options = {};\n\n    this.destroyed = true;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}