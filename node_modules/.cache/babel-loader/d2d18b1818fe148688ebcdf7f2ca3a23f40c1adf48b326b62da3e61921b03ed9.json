{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Graph as IGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { formatNodeSizeToNumber, formatNumberFn } from '../util';\nimport { forceNBody } from './force-n-body';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  dimensions: 2,\n  maxIteration: 500,\n  gravity: 10,\n  factor: 1,\n  edgeStrength: 50,\n  nodeStrength: 1000,\n  coulombDisScale: 0.005,\n  damping: 0.9,\n  maxSpeed: 200,\n  minMovement: 0.4,\n  interval: 0.02,\n  linkDistance: 200,\n  clusterNodeStrength: 20,\n  preventOverlap: true,\n  distanceThresholdMode: 'mean'\n};\n/**\n * <zh/> 力导向布局\n *\n * <en/> Force-directed layout\n */\nexport class ForceLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'force';\n    /**\n     * time interval for layout force animations\n     */\n    this.timeInterval = 0;\n    /**\n     * compare with minMovement to end the nodes' movement\n     */\n    this.judgingDistance = 0;\n    this.running = false;\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericForceLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericForceLayout(true, graph, options);\n    });\n  }\n  /**\n   * Stop simulation immediately.\n   */\n  stop() {\n    if (this.timeInterval && typeof window !== 'undefined') {\n      window.clearInterval(this.timeInterval);\n    }\n    this.running = false;\n  }\n  /**\n   * Manually steps the simulation by the specified number of iterations.\n   * @see https://github.com/d3/d3-force#simulation_tick\n   */\n  tick(iterations = this.options.maxIteration || 1) {\n    if (this.lastResult) {\n      return this.lastResult;\n    }\n    for (let i = 0; (this.judgingDistance > this.lastOptions.minMovement || i < 1) && i < iterations; i++) {\n      this.runOneStep(this.lastCalcGraph, this.lastGraph, i, this.lastVelMap, this.lastOptions);\n      this.updatePosition(this.lastGraph, this.lastCalcGraph, this.lastVelMap, this.lastOptions);\n    }\n    const result = {\n      nodes: this.lastLayoutNodes,\n      edges: this.lastLayoutEdges\n    };\n    if (this.lastAssign) {\n      result.nodes.forEach(node => this.lastGraph.mergeNodeData(node.id, {\n        x: node.data.x,\n        y: node.data.y,\n        z: this.options.dimensions === 3 ? node.data.z : undefined\n      }));\n    }\n    return result;\n  }\n  genericForceLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      const formattedOptions = this.formatOptions(mergedOptions, graph);\n      const {\n        dimensions,\n        width,\n        height,\n        nodeSize,\n        getMass,\n        nodeStrength,\n        edgeStrength,\n        linkDistance\n      } = formattedOptions;\n      // clones the original data and attaches calculation attributes for this layout algorithm\n      const layoutNodes = nodes.map((node, i) => {\n        return Object.assign(Object.assign({}, node), {\n          data: Object.assign(Object.assign({}, node.data), {\n            // ...randomDistribution(node, dimensions, 30, i),\n            x: isNumber(node.data.x) ? node.data.x : Math.random() * width,\n            y: isNumber(node.data.y) ? node.data.y : Math.random() * height,\n            z: isNumber(node.data.z) ? node.data.z : Math.random() * Math.sqrt(width * height),\n            size: nodeSize(node) || 30,\n            mass: getMass(node),\n            nodeStrength: nodeStrength(node)\n          })\n        });\n      });\n      const layoutEdges = edges.map(edge => Object.assign(Object.assign({}, edge), {\n        data: Object.assign(Object.assign({}, edge.data), {\n          edgeStrength: edgeStrength(edge),\n          linkDistance: linkDistance(edge, graph.getNode(edge.source), graph.getNode(edge.target))\n        })\n      }));\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n        this.lastResult = {\n          nodes: [],\n          edges\n        };\n        return {\n          nodes: [],\n          edges\n        };\n      }\n      const velMap = {};\n      nodes.forEach((node, i) => {\n        velMap[node.id] = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      });\n      const calcGraph = new IGraph({\n        nodes: layoutNodes,\n        edges: layoutEdges\n      });\n      this.formatCentripetal(formattedOptions, calcGraph);\n      const {\n        maxIteration,\n        minMovement,\n        onTick\n      } = formattedOptions;\n      // Use them later in `tick`.\n      this.lastLayoutNodes = layoutNodes;\n      this.lastLayoutEdges = layoutEdges;\n      this.lastAssign = assign;\n      this.lastGraph = graph;\n      this.lastCalcGraph = calcGraph;\n      this.lastOptions = formattedOptions;\n      this.lastVelMap = velMap;\n      if (typeof window === 'undefined') return;\n      let iter = 0;\n      return new Promise(resolve => {\n        // interval for render the result after each iteration\n        this.timeInterval = window.setInterval(() => {\n          if (!nodes || !this.running) {\n            resolve({\n              nodes: formatOutNodes(graph, layoutNodes),\n              edges\n            });\n          }\n          this.runOneStep(calcGraph, graph, iter, velMap, formattedOptions);\n          this.updatePosition(graph, calcGraph, velMap, formattedOptions);\n          if (assign) {\n            layoutNodes.forEach(node => graph.mergeNodeData(node.id, {\n              x: node.data.x,\n              y: node.data.y,\n              z: dimensions === 3 ? node.data.z : undefined\n            }));\n          }\n          onTick === null || onTick === void 0 ? void 0 : onTick({\n            nodes: formatOutNodes(graph, layoutNodes),\n            edges\n          });\n          iter++;\n          if (iter >= maxIteration || this.judgingDistance < minMovement) {\n            window.clearInterval(this.timeInterval);\n            resolve({\n              nodes: formatOutNodes(graph, layoutNodes),\n              edges\n            });\n          }\n        }, 0);\n        this.running = true;\n      });\n    });\n  }\n  /**\n   * Format merged layout options.\n   * @param options merged layout options\n   * @param graph original graph\n   * @returns\n   */\n  formatOptions(options, graph) {\n    const formattedOptions = Object.assign({}, options);\n    const {\n      width: propsWidth,\n      height: propsHeight,\n      getMass\n    } = options;\n    // === formating width, height, and center =====\n    formattedOptions.width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n    formattedOptions.height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n    if (!options.center) {\n      formattedOptions.center = [formattedOptions.width / 2, formattedOptions.height / 2];\n    }\n    // === formating node mass =====\n    if (!getMass) {\n      formattedOptions.getMass = d => {\n        let massWeight = 1;\n        if (isNumber(d === null || d === void 0 ? void 0 : d.data.mass)) massWeight = d === null || d === void 0 ? void 0 : d.data.mass;\n        const degree = graph.getDegree(d.id, 'both');\n        return !degree || degree < 5 ? massWeight : degree * 5 * massWeight;\n      };\n    }\n    // === formating node size =====\n    formattedOptions.nodeSize = formatNodeSizeToNumber(options.nodeSize, options.nodeSpacing);\n    // === formating node / edge strengths =====\n    const linkDistanceFn = options.linkDistance ? formatNumberFn(1, options.linkDistance) : edge => {\n      return 1 + formattedOptions.nodeSize(graph.getNode(edge.source)) + formattedOptions.nodeSize(graph.getNode(edge.target));\n    };\n    formattedOptions.linkDistance = linkDistanceFn;\n    formattedOptions.nodeStrength = formatNumberFn(1, options.nodeStrength);\n    formattedOptions.edgeStrength = formatNumberFn(1, options.edgeStrength);\n    return formattedOptions;\n  }\n  /**\n   * Format centripetalOption in the option.\n   * @param options merged layout options\n   * @param calcGraph calculation graph\n   */\n  formatCentripetal(options, calcGraph) {\n    const {\n      dimensions,\n      centripetalOptions,\n      center,\n      clusterNodeStrength,\n      leafCluster,\n      clustering,\n      nodeClusterBy\n    } = options;\n    const calcNodes = calcGraph.getAllNodes();\n    // === formating centripetalOptions =====\n    const basicCentripetal = centripetalOptions || {\n      leaf: 2,\n      single: 2,\n      others: 1,\n      // eslint-disable-next-line\n      center: n => {\n        return {\n          x: center[0],\n          y: center[1],\n          z: dimensions === 3 ? center[2] : undefined\n        };\n      }\n    };\n    if (typeof clusterNodeStrength !== 'function') {\n      options.clusterNodeStrength = node => clusterNodeStrength;\n    }\n    let sameTypeLeafMap;\n    let clusters;\n    if (leafCluster && nodeClusterBy) {\n      sameTypeLeafMap = getSameTypeLeafMap(calcGraph, nodeClusterBy);\n      clusters = Array.from(new Set(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.map(node => node.data[nodeClusterBy]))) || [];\n      // @ts-ignore\n      options.centripetalOptions = Object.assign(basicCentripetal, {\n        single: 100,\n        leaf: node => {\n          // 找出与它关联的边的起点或终点出发的所有一度节点中同类型的叶子节点\n          const {\n            siblingLeaves,\n            sameTypeLeaves\n          } = sameTypeLeafMap[node.id] || {};\n          // 如果都是同一类型或者每种类型只有1个，则施加默认向心力\n          if ((sameTypeLeaves === null || sameTypeLeaves === void 0 ? void 0 : sameTypeLeaves.length) === (siblingLeaves === null || siblingLeaves === void 0 ? void 0 : siblingLeaves.length) || (clusters === null || clusters === void 0 ? void 0 : clusters.length) === 1) {\n            return 1;\n          }\n          return options.clusterNodeStrength(node);\n        },\n        others: 1,\n        center: node => {\n          const degree = calcGraph.getDegree(node.id, 'both');\n          // 孤点默认给1个远离的中心点\n          if (!degree) {\n            return {\n              x: 100,\n              y: 100,\n              z: 0\n            };\n          }\n          let centerPos;\n          if (degree === 1) {\n            // 如果为叶子节点\n            // 找出与它关联的边的起点出发的所有一度节点中同类型的叶子节点\n            const {\n              sameTypeLeaves = []\n            } = sameTypeLeafMap[node.id] || {};\n            if (sameTypeLeaves.length === 1) {\n              // 如果同类型的叶子节点只有1个，中心位置为undefined\n              centerPos = undefined;\n            } else if (sameTypeLeaves.length > 1) {\n              // 找出同类型节点平均位置作为中心\n              centerPos = getAvgNodePosition(sameTypeLeaves);\n            }\n          } else {\n            centerPos = undefined;\n          }\n          return {\n            x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n            y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n            z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z\n          };\n        }\n      });\n    }\n    if (clustering && nodeClusterBy) {\n      if (!sameTypeLeafMap) {\n        sameTypeLeafMap = getSameTypeLeafMap(calcGraph, nodeClusterBy);\n      }\n      if (!clusters) {\n        clusters = Array.from(new Set(calcNodes.map(node => node.data[nodeClusterBy])));\n      }\n      clusters = clusters.filter(item => item !== undefined);\n      const centerInfo = {};\n      clusters.forEach(cluster => {\n        const sameTypeNodes = calcNodes.filter(node => node.data[nodeClusterBy] === cluster).map(node => calcGraph.getNode(node.id));\n        // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n        centerInfo[cluster] = getAvgNodePosition(sameTypeNodes);\n      });\n      options.centripetalOptions = Object.assign(basicCentripetal, {\n        single: node => options.clusterNodeStrength(node),\n        leaf: node => options.clusterNodeStrength(node),\n        others: node => options.clusterNodeStrength(node),\n        center: node => {\n          // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n          const centerPos = centerInfo[node.data[nodeClusterBy]];\n          return {\n            x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n            y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n            z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z\n          };\n        }\n      });\n    }\n    const {\n      leaf,\n      single,\n      others\n    } = options.centripetalOptions || {};\n    if (leaf && typeof leaf !== 'function') {\n      options.centripetalOptions.leaf = () => leaf;\n    }\n    if (single && typeof single !== 'function') {\n      options.centripetalOptions.single = () => single;\n    }\n    if (others && typeof others !== 'function') {\n      options.centripetalOptions.others = () => others;\n    }\n  }\n  /**\n   * One iteration.\n   * @param calcGraph calculation graph\n   * @param graph origin graph\n   * @param iter current iteration index\n   * @param velMap nodes' velocity map\n   * @param options formatted layout options\n   * @returns\n   */\n  runOneStep(calcGraph, graph, iter, velMap, options) {\n    const accMap = {};\n    const calcNodes = calcGraph.getAllNodes();\n    const calcEdges = calcGraph.getAllEdges();\n    if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return;\n    const {\n      monitor\n    } = options;\n    this.calRepulsive(calcGraph, accMap, options);\n    if (calcEdges) this.calAttractive(calcGraph, accMap, options);\n    this.calGravity(calcGraph, graph, accMap, options);\n    this.updateVelocity(calcGraph, accMap, velMap, options);\n    /** 如果需要监控信息，则提供给用户 */\n    if (monitor) {\n      const energy = this.calTotalEnergy(accMap, calcNodes);\n      monitor({\n        energy,\n        nodes: graph.getAllNodes(),\n        edges: graph.getAllEdges(),\n        iterations: iter\n      });\n    }\n  }\n  /**\n   * Calculate graph energy for monitoring convergence.\n   * @param accMap acceleration map\n   * @param nodes calculation nodes\n   * @returns energy\n   */\n  calTotalEnergy(accMap, nodes) {\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return 0;\n    let energy = 0.0;\n    nodes.forEach((node, i) => {\n      const vx = accMap[node.id].x;\n      const vy = accMap[node.id].y;\n      const vz = this.options.dimensions === 3 ? accMap[node.id].z : 0;\n      const speed2 = vx * vx + vy * vy + vz * vz;\n      const {\n        mass = 1\n      } = node.data;\n      energy += mass * speed2 * 0.5; // p = 1/2*(mv^2)\n    });\n    return energy;\n  }\n  /**\n   * Calculate the repulsive forces according to coulombs law.\n   * @param calcGraph calculation graph\n   * @param accMap acceleration map\n   * @param options formatted layout options\n   */\n  calRepulsive(calcGraph, accMap, options) {\n    const {\n      dimensions,\n      factor,\n      coulombDisScale\n    } = options;\n    forceNBody(calcGraph, factor, coulombDisScale * coulombDisScale, accMap, dimensions);\n  }\n  /**\n   * Calculate the attractive forces according to hooks law.\n   * @param calcGraph calculation graph\n   * @param accMap acceleration map\n   */\n  calAttractive(calcGraph, accMap, options) {\n    const {\n      dimensions,\n      nodeSize\n    } = options;\n    calcGraph.getAllEdges().forEach((edge, i) => {\n      const {\n        source,\n        target\n      } = edge;\n      const sourceNode = calcGraph.getNode(source);\n      const targetNode = calcGraph.getNode(target);\n      if (!sourceNode || !targetNode) return;\n      let vecX = targetNode.data.x - sourceNode.data.x;\n      let vecY = targetNode.data.y - sourceNode.data.y;\n      let vecZ = dimensions === 3 ? targetNode.data.z - sourceNode.data.z : 0;\n      if (!vecX && !vecY) {\n        vecX = Math.random() * 0.01;\n        vecY = Math.random() * 0.01;\n        if (dimensions === 3 && !vecZ) {\n          vecZ = Math.random() * 0.01;\n        }\n      }\n      const vecLength = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ);\n      if (vecLength < nodeSize(sourceNode) + nodeSize(targetNode)) return;\n      const direX = vecX / vecLength;\n      const direY = vecY / vecLength;\n      const direZ = vecZ / vecLength;\n      const {\n        linkDistance = 200,\n        edgeStrength = 200\n      } = edge.data || {};\n      const diff = linkDistance - vecLength;\n      const param = diff * edgeStrength;\n      const massSource = sourceNode.data.mass || 1;\n      const massTarget = targetNode.data.mass || 1;\n      // 质量占比越大，对另一端影响程度越大\n      const sourceMassRatio = 1 / massSource;\n      const targetMassRatio = 1 / massTarget;\n      const disX = direX * param;\n      const disY = direY * param;\n      const disZ = direZ * param;\n      accMap[source].x -= disX * sourceMassRatio;\n      accMap[source].y -= disY * sourceMassRatio;\n      accMap[source].z -= disZ * sourceMassRatio;\n      accMap[target].x += disX * targetMassRatio;\n      accMap[target].y += disY * targetMassRatio;\n      accMap[target].z += disZ * targetMassRatio;\n    });\n  }\n  /**\n   * Calculate the gravity forces toward center.\n   * @param calcGraph calculation graph\n   * @param graph origin graph\n   * @param accMap acceleration map\n   * @param options formatted layout options\n   */\n  calGravity(calcGraph, graph, accMap, options) {\n    const {\n      getCenter\n    } = options;\n    const calcNodes = calcGraph.getAllNodes();\n    const nodes = graph.getAllNodes();\n    const edges = graph.getAllEdges();\n    const {\n      width,\n      height,\n      center,\n      gravity: defaultGravity,\n      centripetalOptions\n    } = options;\n    if (!calcNodes) return;\n    calcNodes.forEach(calcNode => {\n      const {\n        id,\n        data\n      } = calcNode;\n      const {\n        mass,\n        x,\n        y,\n        z\n      } = data;\n      const node = graph.getNode(id);\n      let vecX = 0;\n      let vecY = 0;\n      let vecZ = 0;\n      let gravity = defaultGravity;\n      const inDegree = calcGraph.getDegree(id, 'in');\n      const outDegree = calcGraph.getDegree(id, 'out');\n      const degree = calcGraph.getDegree(id, 'both');\n      const forceCenter = getCenter === null || getCenter === void 0 ? void 0 : getCenter(node, degree);\n      if (forceCenter) {\n        const [centerX, centerY, strength] = forceCenter;\n        vecX = x - centerX;\n        vecY = y - centerY;\n        gravity = strength;\n      } else {\n        vecX = x - center[0];\n        vecY = y - center[1];\n        vecZ = z - center[2];\n      }\n      if (gravity) {\n        accMap[id].x -= gravity * vecX / mass;\n        accMap[id].y -= gravity * vecY / mass;\n        accMap[id].z -= gravity * vecZ / mass;\n      }\n      if (centripetalOptions) {\n        const {\n          leaf,\n          single,\n          others,\n          center: centriCenter\n        } = centripetalOptions;\n        const {\n          x: centriX,\n          y: centriY,\n          z: centriZ,\n          centerStrength\n        } = (centriCenter === null || centriCenter === void 0 ? void 0 : centriCenter(node, nodes, edges, width, height)) || {\n          x: 0,\n          y: 0,\n          z: 0,\n          centerStrength: 0\n        };\n        if (!isNumber(centriX) || !isNumber(centriY)) return;\n        const vx = (x - centriX) / mass;\n        const vy = (y - centriY) / mass;\n        const vz = (z - centriZ) / mass;\n        if (centerStrength) {\n          accMap[id].x -= centerStrength * vx;\n          accMap[id].y -= centerStrength * vy;\n          accMap[id].z -= centerStrength * vz;\n        }\n        // 孤点\n        if (degree === 0) {\n          const singleStrength = single(node);\n          if (!singleStrength) return;\n          accMap[id].x -= singleStrength * vx;\n          accMap[id].y -= singleStrength * vy;\n          accMap[id].z -= singleStrength * vz;\n          return;\n        }\n        // 没有出度或没有入度，都认为是叶子节点\n        if (inDegree === 0 || outDegree === 0) {\n          const leafStrength = leaf(node, nodes, edges);\n          if (!leafStrength) return;\n          accMap[id].x -= leafStrength * vx;\n          accMap[id].y -= leafStrength * vy;\n          accMap[id].z -= leafStrength * vz;\n          return;\n        }\n        /** others */\n        const othersStrength = others(node);\n        if (!othersStrength) return;\n        accMap[id].x -= othersStrength * vx;\n        accMap[id].y -= othersStrength * vy;\n        accMap[id].z -= othersStrength * vz;\n      }\n    });\n  }\n  /**\n   * Update the velocities for nodes.\n   * @param calcGraph calculation graph\n   * @param accMap acceleration map\n   * @param velMap velocity map\n   * @param options formatted layout options\n   * @returns\n   */\n  updateVelocity(calcGraph, accMap, velMap, options) {\n    const {\n      damping,\n      maxSpeed,\n      interval,\n      dimensions\n    } = options;\n    const calcNodes = calcGraph.getAllNodes();\n    if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return;\n    calcNodes.forEach(calcNode => {\n      const {\n        id\n      } = calcNode;\n      let vx = (velMap[id].x + accMap[id].x * interval) * damping || 0.01;\n      let vy = (velMap[id].y + accMap[id].y * interval) * damping || 0.01;\n      let vz = dimensions === 3 ? (velMap[id].z + accMap[id].z * interval) * damping || 0.01 : 0.0;\n      const vLength = Math.sqrt(vx * vx + vy * vy + vz * vz);\n      if (vLength > maxSpeed) {\n        const param2 = maxSpeed / vLength;\n        vx = param2 * vx;\n        vy = param2 * vy;\n        vz = param2 * vz;\n      }\n      velMap[id] = {\n        x: vx,\n        y: vy,\n        z: vz\n      };\n    });\n  }\n  /**\n   * Update nodes' positions.\n   * @param graph origin graph\n   * @param calcGraph calculatition graph\n   * @param velMap velocity map\n   * @param options formatted layou options\n   * @returns\n   */\n  updatePosition(graph, calcGraph, velMap, options) {\n    const {\n      distanceThresholdMode,\n      interval,\n      dimensions\n    } = options;\n    const calcNodes = calcGraph.getAllNodes();\n    if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) {\n      this.judgingDistance = 0;\n      return;\n    }\n    let sum = 0;\n    if (distanceThresholdMode === 'max') this.judgingDistance = -Infinity;else if (distanceThresholdMode === 'min') this.judgingDistance = Infinity;\n    calcNodes.forEach(calcNode => {\n      const {\n        id\n      } = calcNode;\n      const node = graph.getNode(id);\n      if (isNumber(node.data.fx) && isNumber(node.data.fy)) {\n        calcGraph.mergeNodeData(id, {\n          x: node.data.fx,\n          y: node.data.fy,\n          z: dimensions === 3 ? node.data.fz : undefined\n        });\n        return;\n      }\n      const distX = velMap[id].x * interval;\n      const distY = velMap[id].y * interval;\n      const distZ = dimensions === 3 ? velMap[id].z * interval : 0.0;\n      calcGraph.mergeNodeData(id, {\n        x: calcNode.data.x + distX,\n        y: calcNode.data.y + distY,\n        z: calcNode.data.z + distZ\n      });\n      const distanceMagnitude = Math.sqrt(distX * distX + distY * distY + distZ * distZ);\n      switch (distanceThresholdMode) {\n        case 'max':\n          if (this.judgingDistance < distanceMagnitude) {\n            this.judgingDistance = distanceMagnitude;\n          }\n          break;\n        case 'min':\n          if (this.judgingDistance > distanceMagnitude) {\n            this.judgingDistance = distanceMagnitude;\n          }\n          break;\n        default:\n          sum = sum + distanceMagnitude;\n          break;\n      }\n    });\n    if (!distanceThresholdMode || distanceThresholdMode === 'mean') {\n      this.judgingDistance = sum / calcNodes.length;\n    }\n  }\n}\n/**\n * Group the leaf nodes according to nodeClusterBy field.\n * @param calcGraph calculation graph\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns related same group leaf nodes for each leaf node\n */\nconst getSameTypeLeafMap = (calcGraph, nodeClusterBy) => {\n  const calcNodes = calcGraph.getAllNodes();\n  if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return {};\n  const sameTypeLeafMap = {};\n  calcNodes.forEach((node, i) => {\n    const degree = calcGraph.getDegree(node.id, 'both');\n    if (degree === 1) {\n      sameTypeLeafMap[node.id] = getCoreNodeAndSiblingLeaves(calcGraph, 'leaf', node, nodeClusterBy);\n    }\n  });\n  return sameTypeLeafMap;\n};\n/**\n * Find the successor or predecessor of node as coreNode, the sibling leaf nodes\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param node the target node\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns coreNode, sibling leaf nodes, and grouped sibling leaf nodes\n */\nconst getCoreNodeAndSiblingLeaves = (calcGraph, type, node, nodeClusterBy) => {\n  const inDegree = calcGraph.getDegree(node.id, 'in');\n  const outDegree = calcGraph.getDegree(node.id, 'out');\n  // node is not a leaf, coreNode is itself, siblingLeaves is empty\n  let coreNode = node;\n  let siblingLeaves = [];\n  if (inDegree === 0) {\n    // node is a leaf node without out edges, its related(successor) node is coreNode, siblingLeaves is the neighbors of its related node\n    coreNode = calcGraph.getSuccessors(node.id)[0];\n    siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n  } else if (outDegree === 0) {\n    // node is a leaf node without in edges, its related(predecessor) node is coreNode, siblingLeaves is the neighbors of its related node\n    coreNode = calcGraph.getPredecessors(node.id)[0];\n    siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n  }\n  // siblingLeaves are leaf nodes\n  siblingLeaves = siblingLeaves.filter(node => calcGraph.getDegree(node.id, 'in') === 0 || calcGraph.getDegree(node.id, 'out') === 0);\n  const sameTypeLeaves = getSameTypeNodes(calcGraph, type, nodeClusterBy, node, siblingLeaves);\n  return {\n    coreNode,\n    siblingLeaves,\n    sameTypeLeaves\n  };\n};\n/**\n * Find the same type (according to nodeClusterBy field) of node in relativeNodes.\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @param node the target node\n * @param relativeNodes node's related ndoes to be filtered\n * @returns related nodes that meet the filtering conditions\n */\nconst getSameTypeNodes = (calcGraph, type, nodeClusterBy, node, relativeNodes) => {\n  const typeName = node.data[nodeClusterBy] || '';\n  let sameTypeNodes = (relativeNodes === null || relativeNodes === void 0 ? void 0 : relativeNodes.filter(item => item.data[nodeClusterBy] === typeName)) || [];\n  if (type === 'leaf') {\n    sameTypeNodes = sameTypeNodes.filter(item => calcGraph.getDegree(item.id, 'in') === 0 || calcGraph.getDegree(item.id, 'out') === 0);\n  }\n  return sameTypeNodes;\n};\n/**\n * Get the average position of nodes.\n * @param nodes nodes set\n * @returns average ppsition\n */\nconst getAvgNodePosition = nodes => {\n  const totalNodes = {\n    x: 0,\n    y: 0\n  };\n  nodes.forEach(node => {\n    const {\n      x,\n      y\n    } = node.data;\n    totalNodes.x += x || 0;\n    totalNodes.y += y || 0;\n  });\n  // 获取均值向量\n  const length = nodes.length || 1;\n  return {\n    x: totalNodes.x / length,\n    y: totalNodes.y / length\n  };\n};\n/**\n * Format the output nodes from CalcNode[].\n * @param graph origin graph\n * @param layoutNodes calculation nodes\n * @returns output nodes\n */\nconst formatOutNodes = (graph, layoutNodes) => layoutNodes.map(calcNode => {\n  const {\n    id,\n    data\n  } = calcNode;\n  const node = graph.getNode(id);\n  return Object.assign(Object.assign({}, node), {\n    data: Object.assign(Object.assign({}, node.data), {\n      x: data.x,\n      y: data.y,\n      z: data.z\n    })\n  });\n});","map":{"version":3,"names":["Graph","IGraph","isNumber","formatNodeSizeToNumber","formatNumberFn","forceNBody","DEFAULTS_LAYOUT_OPTIONS","dimensions","maxIteration","gravity","factor","edgeStrength","nodeStrength","coulombDisScale","damping","maxSpeed","minMovement","interval","linkDistance","clusterNodeStrength","preventOverlap","distanceThresholdMode","ForceLayout","constructor","options","id","timeInterval","judgingDistance","running","Object","assign","execute","graph","genericForceLayout","stop","window","clearInterval","tick","iterations","lastResult","i","lastOptions","runOneStep","lastCalcGraph","lastGraph","lastVelMap","updatePosition","result","nodes","lastLayoutNodes","edges","lastLayoutEdges","lastAssign","forEach","node","mergeNodeData","x","data","y","z","undefined","mergedOptions","getAllNodes","getAllEdges","formattedOptions","formatOptions","width","height","nodeSize","getMass","layoutNodes","map","Math","random","sqrt","size","mass","layoutEdges","edge","getNode","source","target","length","velMap","calcGraph","formatCentripetal","onTick","iter","Promise","resolve","setInterval","formatOutNodes","propsWidth","propsHeight","innerWidth","innerHeight","center","d","massWeight","degree","getDegree","nodeSpacing","linkDistanceFn","centripetalOptions","leafCluster","clustering","nodeClusterBy","calcNodes","basicCentripetal","leaf","single","others","n","sameTypeLeafMap","clusters","getSameTypeLeafMap","Array","from","Set","siblingLeaves","sameTypeLeaves","centerPos","getAvgNodePosition","filter","item","centerInfo","cluster","sameTypeNodes","accMap","calcEdges","monitor","calRepulsive","calAttractive","calGravity","updateVelocity","energy","calTotalEnergy","vx","vy","vz","speed2","sourceNode","targetNode","vecX","vecY","vecZ","vecLength","direX","direY","direZ","diff","param","massSource","massTarget","sourceMassRatio","targetMassRatio","disX","disY","disZ","getCenter","defaultGravity","calcNode","inDegree","outDegree","forceCenter","centerX","centerY","strength","centriCenter","centriX","centriY","centriZ","centerStrength","singleStrength","leafStrength","othersStrength","vLength","param2","sum","Infinity","fx","fy","fz","distX","distY","distZ","distanceMagnitude","getCoreNodeAndSiblingLeaves","type","coreNode","getSuccessors","getNeighbors","getPredecessors","getSameTypeNodes","relativeNodes","typeName","totalNodes"],"sources":["../../src/force/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}