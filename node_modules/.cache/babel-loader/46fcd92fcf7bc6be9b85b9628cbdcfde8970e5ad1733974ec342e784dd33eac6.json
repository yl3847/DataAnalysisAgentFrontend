{"ast":null,"code":"import { isEqual, isString } from '@antv/util';\nimport { CommonEvent } from '../constants';\nimport { PinchHandler } from './pinch';\nconst lowerCaseKeys = keys => keys.map(key => isString(key) ? key.toLocaleLowerCase() : key);\nexport class Shortcut {\n  constructor(emitter) {\n    this.map = new Map();\n    this.boundHandlePinch = () => {};\n    this.recordKey = new Set();\n    this.onKeyDown = event => {\n      if (!(event === null || event === void 0 ? void 0 : event.key)) return;\n      this.recordKey.add(event.key);\n      this.trigger(event);\n    };\n    this.onKeyUp = event => {\n      if (!(event === null || event === void 0 ? void 0 : event.key)) return;\n      this.recordKey.delete(event.key);\n    };\n    this.onWheel = event => {\n      this.triggerExtendKey(CommonEvent.WHEEL, event);\n    };\n    this.onDrag = event => {\n      this.triggerExtendKey(CommonEvent.DRAG, event);\n    };\n    this.handlePinch = (event, options) => {\n      this.triggerExtendKey(CommonEvent.PINCH, Object.assign(Object.assign({}, event), options));\n    };\n    this.onFocus = () => {\n      this.recordKey.clear();\n    };\n    this.emitter = emitter;\n    this.bindEvents();\n  }\n  bind(key, handler) {\n    if (key.length === 0) return;\n    if (key.includes(CommonEvent.PINCH) && !this.pinchHandler) {\n      this.boundHandlePinch = this.handlePinch.bind(this);\n      this.pinchHandler = new PinchHandler(this.emitter, 'pinchmove', this.boundHandlePinch);\n    }\n    this.map.set(key, handler);\n  }\n  unbind(key, handler) {\n    this.map.forEach((h, k) => {\n      if (isEqual(k, key)) {\n        if (!handler || handler === h) this.map.delete(k);\n      }\n    });\n  }\n  unbindAll() {\n    this.map.clear();\n  }\n  match(key) {\n    // 排序\n    const recordKeyList = lowerCaseKeys(Array.from(this.recordKey)).sort();\n    const keyList = lowerCaseKeys(key).sort();\n    return isEqual(recordKeyList, keyList);\n  }\n  bindEvents() {\n    var _a;\n    const {\n      emitter\n    } = this;\n    emitter.on(CommonEvent.KEY_DOWN, this.onKeyDown);\n    emitter.on(CommonEvent.KEY_UP, this.onKeyUp);\n    emitter.on(CommonEvent.WHEEL, this.onWheel);\n    emitter.on(CommonEvent.DRAG, this.onDrag);\n    // 窗口重新获得焦点后清空按键，避免按键状态异常\n    // Clear the keys when the window regains focus to avoid abnormal key states\n    (_a = globalThis.addEventListener) === null || _a === void 0 ? void 0 : _a.call(globalThis, 'focus', this.onFocus);\n  }\n  trigger(event) {\n    this.map.forEach((handler, key) => {\n      if (this.match(key)) handler(event);\n    });\n  }\n  /**\n   * <zh/> 扩展 wheel, drag 操作\n   *\n   * <en/> Extend wheel, drag operations\n   * @param eventType - event name\n   * @param event - event\n   */\n  triggerExtendKey(eventType, event) {\n    this.map.forEach((handler, key) => {\n      if (key.includes(eventType)) {\n        if (isEqual(Array.from(this.recordKey), key.filter(k => k !== eventType))) {\n          handler(event);\n        }\n      }\n    });\n  }\n  destroy() {\n    var _a, _b;\n    this.unbindAll();\n    this.emitter.off(CommonEvent.KEY_DOWN, this.onKeyDown);\n    this.emitter.off(CommonEvent.KEY_UP, this.onKeyUp);\n    this.emitter.off(CommonEvent.WHEEL, this.onWheel);\n    this.emitter.off(CommonEvent.DRAG, this.onDrag);\n    (_a = this.pinchHandler) === null || _a === void 0 ? void 0 : _a.off('pinchmove', this.boundHandlePinch);\n    (_b = globalThis.removeEventListener) === null || _b === void 0 ? void 0 : _b.call(globalThis, 'blur', this.onFocus);\n  }\n}","map":{"version":3,"names":["isEqual","isString","CommonEvent","PinchHandler","lowerCaseKeys","keys","map","key","toLocaleLowerCase","Shortcut","constructor","emitter","Map","boundHandlePinch","recordKey","Set","onKeyDown","event","add","trigger","onKeyUp","delete","onWheel","triggerExtendKey","WHEEL","onDrag","DRAG","handlePinch","options","PINCH","Object","assign","onFocus","clear","bindEvents","bind","handler","length","includes","pinchHandler","set","unbind","forEach","h","k","unbindAll","match","recordKeyList","Array","from","sort","keyList","on","KEY_DOWN","KEY_UP","_a","globalThis","addEventListener","call","eventType","filter","destroy","off","_b","removeEventListener"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/shortcut.ts"],"sourcesContent":["import EventEmitter from '@antv/event-emitter';\nimport type { FederatedMouseEvent } from '@antv/g';\nimport { isEqual, isString } from '@antv/util';\nimport { CommonEvent } from '../constants';\nimport type { PinchCallback } from './pinch';\nimport { PinchHandler } from './pinch';\n\nexport interface ShortcutOptions {}\n\nexport type ShortcutKey = string[];\n\ntype Handler = (event: any) => void;\n\nconst lowerCaseKeys = (keys: ShortcutKey) => keys.map((key) => (isString(key) ? key.toLocaleLowerCase() : key));\n\nexport class Shortcut {\n  private map: Map<ShortcutKey, Handler> = new Map();\n  public pinchHandler: PinchHandler | undefined;\n  private boundHandlePinch: PinchCallback = () => {};\n\n  private emitter: EventEmitter;\n\n  private recordKey = new Set<string>();\n\n  constructor(emitter: EventEmitter) {\n    this.emitter = emitter;\n    this.bindEvents();\n  }\n\n  public bind(key: ShortcutKey, handler: Handler) {\n    if (key.length === 0) return;\n    if (key.includes(CommonEvent.PINCH) && !this.pinchHandler) {\n      this.boundHandlePinch = this.handlePinch.bind(this);\n      this.pinchHandler = new PinchHandler(this.emitter, 'pinchmove', this.boundHandlePinch);\n    }\n    this.map.set(key, handler);\n  }\n\n  public unbind(key: ShortcutKey, handler?: Handler) {\n    this.map.forEach((h, k) => {\n      if (isEqual(k, key)) {\n        if (!handler || handler === h) this.map.delete(k);\n      }\n    });\n  }\n\n  public unbindAll() {\n    this.map.clear();\n  }\n\n  public match(key: ShortcutKey) {\n    // 排序\n    const recordKeyList = lowerCaseKeys(Array.from(this.recordKey)).sort();\n    const keyList = lowerCaseKeys(key).sort();\n    return isEqual(recordKeyList, keyList);\n  }\n\n  private bindEvents() {\n    const { emitter } = this;\n\n    emitter.on(CommonEvent.KEY_DOWN, this.onKeyDown);\n    emitter.on(CommonEvent.KEY_UP, this.onKeyUp);\n    emitter.on(CommonEvent.WHEEL, this.onWheel);\n    emitter.on(CommonEvent.DRAG, this.onDrag);\n\n    // 窗口重新获得焦点后清空按键，避免按键状态异常\n    // Clear the keys when the window regains focus to avoid abnormal key states\n    globalThis.addEventListener?.('focus', this.onFocus);\n  }\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (!event?.key) return;\n    this.recordKey.add(event.key);\n    this.trigger(event);\n  };\n\n  private onKeyUp = (event: KeyboardEvent) => {\n    if (!event?.key) return;\n    this.recordKey.delete(event.key);\n  };\n\n  private trigger(event: KeyboardEvent) {\n    this.map.forEach((handler, key) => {\n      if (this.match(key)) handler(event);\n    });\n  }\n\n  /**\n   * <zh/> 扩展 wheel, drag 操作\n   *\n   * <en/> Extend wheel, drag operations\n   * @param eventType - event name\n   * @param event - event\n   */\n  private triggerExtendKey(eventType: CommonEvent, event: unknown) {\n    this.map.forEach((handler, key) => {\n      if (key.includes(eventType)) {\n        if (\n          isEqual(\n            Array.from(this.recordKey),\n            key.filter((k) => k !== eventType),\n          )\n        ) {\n          handler(event);\n        }\n      }\n    });\n  }\n\n  private onWheel = (event: WheelEvent) => {\n    this.triggerExtendKey(CommonEvent.WHEEL, event);\n  };\n\n  private onDrag = (event: FederatedMouseEvent) => {\n    this.triggerExtendKey(CommonEvent.DRAG, event);\n  };\n\n  private handlePinch: PinchCallback = (event, options) => {\n    this.triggerExtendKey(CommonEvent.PINCH, { ...event, ...options });\n  };\n\n  private onFocus = () => {\n    this.recordKey.clear();\n  };\n\n  public destroy() {\n    this.unbindAll();\n    this.emitter.off(CommonEvent.KEY_DOWN, this.onKeyDown);\n    this.emitter.off(CommonEvent.KEY_UP, this.onKeyUp);\n    this.emitter.off(CommonEvent.WHEEL, this.onWheel);\n    this.emitter.off(CommonEvent.DRAG, this.onDrag);\n    this.pinchHandler?.off('pinchmove', this.boundHandlePinch);\n    globalThis.removeEventListener?.('blur', this.onFocus);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}