{"ast":null,"code":"var defaultComparator = function defaultComparator(a, b) {\n  if (a === b) {\n    return true;\n  }\n  return false;\n};\n/**\n * 链表中单个元素节点\n */\nvar LinkedListNode = /** @class */function () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n    this.value = value;\n    this.next = next;\n  }\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\".concat(this.value);\n  };\n  return LinkedListNode;\n}();\nexport { LinkedListNode };\nvar LinkedList = /** @class */function () {\n  function LinkedList(comparator) {\n    if (comparator === void 0) {\n      comparator = defaultComparator;\n    }\n    this.head = null;\n    this.tail = null;\n    this.compare = comparator;\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value);\n    // 如果不存在头节点，则将创建的新节点作为头节点\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    // 将新节点附加到链表末尾\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n    var deleteNode = null;\n    // 如果删除的是头部元素，则将next作为头元素\n    while (this.head && this.compare(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n    var currentNode = this.head;\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    }\n    // 检查尾部节点是否被删除\n    if (this.compare(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n      value = _b === void 0 ? undefined : _b,\n      _c = _a.callback,\n      callback = _c === void 0 ? undefined : _c;\n    if (!this.head) {\n      return null;\n    }\n    var currentNode = this.head;\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      }\n      // 如果指定了 value，则按 value 查找\n      if (value !== undefined && this.compare(currentNode.value, value)) {\n        return currentNode;\n      }\n      currentNode = currentNode.next;\n    }\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n    var currentNode = this.head;\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n    var deletedHead = this.head;\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next;\n      // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n      currentNode.next = prevNode;\n      // 将 prevNode 和 currentNode 向前移动一步\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n  return LinkedList;\n}();\nexport default LinkedList;","map":{"version":3,"names":["defaultComparator","a","b","LinkedListNode","value","next","prototype","toString","callback","concat","LinkedList","comparator","head","tail","compare","prepend","newNode","append","delete","deleteNode","currentNode","find","_a","_b","undefined","_c","deleteTail","deletedTail","deleteHead","deletedHead","fromArray","values","_this","forEach","toArray","nodes","push","reverse","prevNode","nextNode","map","node"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/structs/linked-list.js"],"sourcesContent":["var defaultComparator = function defaultComparator(a, b) {\n  if (a === b) {\n    return true;\n  }\n  return false;\n};\n/**\n * 链表中单个元素节点\n */\nvar LinkedListNode = /** @class */function () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n    this.value = value;\n    this.next = next;\n  }\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\".concat(this.value);\n  };\n  return LinkedListNode;\n}();\nexport { LinkedListNode };\nvar LinkedList = /** @class */function () {\n  function LinkedList(comparator) {\n    if (comparator === void 0) {\n      comparator = defaultComparator;\n    }\n    this.head = null;\n    this.tail = null;\n    this.compare = comparator;\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value);\n    // 如果不存在头节点，则将创建的新节点作为头节点\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    // 将新节点附加到链表末尾\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n    var deleteNode = null;\n    // 如果删除的是头部元素，则将next作为头元素\n    while (this.head && this.compare(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n    var currentNode = this.head;\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    }\n    // 检查尾部节点是否被删除\n    if (this.compare(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n      value = _b === void 0 ? undefined : _b,\n      _c = _a.callback,\n      callback = _c === void 0 ? undefined : _c;\n    if (!this.head) {\n      return null;\n    }\n    var currentNode = this.head;\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      }\n      // 如果指定了 value，则按 value 查找\n      if (value !== undefined && this.compare(currentNode.value, value)) {\n        return currentNode;\n      }\n      currentNode = currentNode.next;\n    }\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n    var currentNode = this.head;\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n    var deletedHead = this.head;\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next;\n      // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n      currentNode.next = prevNode;\n      // 将 prevNode 和 currentNode 向前移动一步\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n  return LinkedList;\n}();\nexport default LinkedList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}