{"ast":null,"code":"export function sub([x1, y1], [x2, y2]) {\n  return [x1 - x2, y1 - y2];\n}\nexport function add([x1, y1], [x2, y2]) {\n  return [x1 + x2, y1 + y2];\n}\nexport function dist([x0, y0], [x1, y1]) {\n  return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n}\n/**\n * Calculate angle of vector [x, y].\n */\nexport function angle([x, y]) {\n  return Math.atan2(y, x);\n}\n/**\n * Calculate angle of [x, y], then + Math.PI / 2.\n * Because of the difference between `Geometric coordinate system` and `Visualization coordinate system`.\n * @returns\n */\nexport function angleWithQuadrant([x, y]) {\n  return angle([x, y]) + Math.PI / 2;\n}\nexport function angleBetween(v0, v1) {\n  const a0 = angle(v0);\n  const a1 = angle(v1);\n  if (a0 < a1) return a1 - a0;\n  return Math.PI * 2 - (a0 - a1);\n}\nexport function calcBBox(points) {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n  for (const [x, y] of points) {\n    minX = Math.min(x, minX);\n    maxX = Math.max(x, maxX);\n    minY = Math.min(y, minY);\n    maxY = Math.max(y, maxY);\n  }\n  const width = maxX - minX;\n  const height = maxY - minY;\n  return [minX, minY, width, height];\n}\n/**\n * Get the center of two points.\n */\nexport function mid([x1, y1], [x2, y2]) {\n  return [(x1 + x2) / 2, (y1 + y2) / 2];\n}","map":{"version":3,"names":["sub","x1","y1","x2","y2","add","dist","x0","y0","Math","sqrt","pow","angle","x","y","atan2","angleWithQuadrant","PI","angleBetween","v0","v1","a0","a1","calcBBox","points","minX","Infinity","maxX","minY","maxY","min","max","width","height","mid"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/utils/vector.ts"],"sourcesContent":["export type Vector2 = [number, number];\n\nexport function sub([x1, y1]: Vector2, [x2, y2]: Vector2): Vector2 {\n  return [x1 - x2, y1 - y2];\n}\n\nexport function add([x1, y1]: Vector2, [x2, y2]: Vector2): Vector2 {\n  return [x1 + x2, y1 + y2];\n}\n\nexport function dist([x0, y0]: Vector2, [x1, y1]: Vector2): number {\n  return Math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2);\n}\n\n/**\n * Calculate angle of vector [x, y].\n */\nexport function angle([x, y]: Vector2): number {\n  return Math.atan2(y, x);\n}\n\n/**\n * Calculate angle of [x, y], then + Math.PI / 2.\n * Because of the difference between `Geometric coordinate system` and `Visualization coordinate system`.\n * @returns\n */\nexport function angleWithQuadrant([x, y]: Vector2): number {\n  return angle([x, y]) + Math.PI / 2;\n}\n\nexport function angleBetween(v0: Vector2, v1: Vector2): number {\n  const a0 = angle(v0);\n  const a1 = angle(v1);\n  if (a0 < a1) return a1 - a0;\n  return Math.PI * 2 - (a0 - a1);\n}\n\nexport function calcBBox(points: Vector2[]) {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n  for (const [x, y] of points) {\n    minX = Math.min(x, minX);\n    maxX = Math.max(x, maxX);\n    minY = Math.min(y, minY);\n    maxY = Math.max(y, maxY);\n  }\n  const width = maxX - minX;\n  const height = maxY - minY;\n  return [minX, minY, width, height];\n}\n\n/**\n * Get the center of two points.\n */\nexport function mid([x1, y1]: Vector2, [x2, y2]: Vector2): Vector2 {\n  return [(x1 + x2) / 2, (y1 + y2) / 2];\n}\n"],"mappings":"AAEA,OAAM,SAAUA,GAAGA,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAU,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAU;EACtD,OAAO,CAACH,EAAE,GAAGE,EAAE,EAAED,EAAE,GAAGE,EAAE,CAAC;AAC3B;AAEA,OAAM,SAAUC,GAAGA,CAAC,CAACJ,EAAE,EAAEC,EAAE,CAAU,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAU;EACtD,OAAO,CAACH,EAAE,GAAGE,EAAE,EAAED,EAAE,GAAGE,EAAE,CAAC;AAC3B;AAEA,OAAM,SAAUE,IAAIA,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAU,EAAE,CAACP,EAAE,EAAEC,EAAE,CAAU;EACvD,OAAOO,IAAI,CAACC,IAAI,CAACD,IAAA,CAAAE,GAAA,CAACJ,EAAE,GAAGN,EAAE,EAAK,CAAC,IAAGQ,IAAA,CAAAE,GAAA,CAACH,EAAE,GAAGN,EAAE,EAAK,CAAC,EAAC;AACnD;AAEA;;;AAGA,OAAM,SAAUU,KAAKA,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAU;EACnC,OAAOL,IAAI,CAACM,KAAK,CAACD,CAAC,EAAED,CAAC,CAAC;AACzB;AAEA;;;;;AAKA,OAAM,SAAUG,iBAAiBA,CAAC,CAACH,CAAC,EAAEC,CAAC,CAAU;EAC/C,OAAOF,KAAK,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,CAAC,GAAGL,IAAI,CAACQ,EAAE,GAAG,CAAC;AACpC;AAEA,OAAM,SAAUC,YAAYA,CAACC,EAAW,EAAEC,EAAW;EACnD,MAAMC,EAAE,GAAGT,KAAK,CAACO,EAAE,CAAC;EACpB,MAAMG,EAAE,GAAGV,KAAK,CAACQ,EAAE,CAAC;EACpB,IAAIC,EAAE,GAAGC,EAAE,EAAE,OAAOA,EAAE,GAAGD,EAAE;EAC3B,OAAOZ,IAAI,CAACQ,EAAE,GAAG,CAAC,IAAII,EAAE,GAAGC,EAAE,CAAC;AAChC;AAEA,OAAM,SAAUC,QAAQA,CAACC,MAAiB;EACxC,IAAIC,IAAI,GAAGC,QAAQ;EACnB,IAAIC,IAAI,GAAG,CAACD,QAAQ;EACpB,IAAIE,IAAI,GAAGF,QAAQ;EACnB,IAAIG,IAAI,GAAG,CAACH,QAAQ;EACpB,KAAK,MAAM,CAACb,CAAC,EAAEC,CAAC,CAAC,IAAIU,MAAM,EAAE;IAC3BC,IAAI,GAAGhB,IAAI,CAACqB,GAAG,CAACjB,CAAC,EAAEY,IAAI,CAAC;IACxBE,IAAI,GAAGlB,IAAI,CAACsB,GAAG,CAAClB,CAAC,EAAEc,IAAI,CAAC;IACxBC,IAAI,GAAGnB,IAAI,CAACqB,GAAG,CAAChB,CAAC,EAAEc,IAAI,CAAC;IACxBC,IAAI,GAAGpB,IAAI,CAACsB,GAAG,CAACjB,CAAC,EAAEe,IAAI,CAAC;;EAE1B,MAAMG,KAAK,GAAGL,IAAI,GAAGF,IAAI;EACzB,MAAMQ,MAAM,GAAGJ,IAAI,GAAGD,IAAI;EAC1B,OAAO,CAACH,IAAI,EAAEG,IAAI,EAAEI,KAAK,EAAEC,MAAM,CAAC;AACpC;AAEA;;;AAGA,OAAM,SAAUC,GAAGA,CAAC,CAACjC,EAAE,EAAEC,EAAE,CAAU,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAU;EACtD,OAAO,CAAC,CAACH,EAAE,GAAGE,EAAE,IAAI,CAAC,EAAE,CAACD,EAAE,GAAGE,EAAE,IAAI,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}