{"ast":null,"code":"/**\n * <zh/> 将一个值从一个范围线性映射到另一个范围\n *\n * <en/> Linearly maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const linear = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  if (d1 === d0) return r0;\n  const ratio = (value - d0) / (d1 - d0);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * <zh/> 将一个值从一个范围对数映射到另一个范围\n *\n * <en/> Logarithmically maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const log = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.log(value - d0 + 1) / Math.log(d1 - d0 + 1);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * <zh/> 将一个值从一个范围幂映射到另一个范围\n *\n * <en/> Maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @param exponent - <zh/> 幂指数 | <en/> The exponent\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const pow = (value, domain, range, exponent = 2) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.pow((value - d0) / (d1 - d0), exponent);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * <zh/> 将一个值从一个范围平方根映射到另一个范围\n *\n * <en/> Maps a value from one range to another range using square root\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const sqrt = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.sqrt((value - d0) / (d1 - d0));\n  return r0 + ratio * (r1 - r0);\n};","map":{"version":3,"names":["linear","value","domain","range","d0","d1","r0","r1","ratio","log","Math","pow","exponent","sqrt"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/scale.ts"],"sourcesContent":["/**\n * <zh/> 将一个值从一个范围线性映射到另一个范围\n *\n * <en/> Linearly maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const linear = (value: number, domain: [number, number], range: [number, number]) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n\n  if (d1 === d0) return r0;\n\n  const ratio = (value - d0) / (d1 - d0);\n  return r0 + ratio * (r1 - r0);\n};\n\n/**\n * <zh/> 将一个值从一个范围对数映射到另一个范围\n *\n * <en/> Logarithmically maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const log = (value: number, domain: [number, number], range: [number, number]) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n\n  const ratio = Math.log(value - d0 + 1) / Math.log(d1 - d0 + 1);\n  return r0 + ratio * (r1 - r0);\n};\n\n/**\n * <zh/> 将一个值从一个范围幂映射到另一个范围\n *\n * <en/> Maps a value from one range to another range\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @param exponent - <zh/> 幂指数 | <en/> The exponent\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const pow = (value: number, domain: [number, number], range: [number, number], exponent: number = 2): number => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n\n  const ratio = Math.pow((value - d0) / (d1 - d0), exponent);\n  return r0 + ratio * (r1 - r0);\n};\n\n/**\n * <zh/> 将一个值从一个范围平方根映射到另一个范围\n *\n * <en/> Maps a value from one range to another range using square root\n * @param value - <zh/> 需要映射的值 | <en/> The value to be mapped\n * @param domain - <zh/> 输入值的范围 [最小值, 最大值] | <en/> The input range [min, max]\n * @param range - <zh/> 输出值的范围 [最小值, 最大值] | <en/> The output range [min, max]\n * @returns <zh/> 映射后的值 | <en/> The mapped value\n */\nexport const sqrt = (value: number, domain: [number, number], range: [number, number]) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n\n  const ratio = Math.sqrt((value - d0) / (d1 - d0));\n  return r0 + ratio * (r1 - r0);\n};\n"],"mappings":"AAAA;;;;;;;;;AASA,OAAO,MAAMA,MAAM,GAAGA,CAACC,KAAa,EAAEC,MAAwB,EAAEC,KAAuB,KAAI;EACzF,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EAEtB,IAAIE,EAAE,KAAKD,EAAE,EAAE,OAAOE,EAAE;EAExB,MAAME,KAAK,GAAG,CAACP,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC;EACtC,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AAC/B,CAAC;AAED;;;;;;;;;AASA,OAAO,MAAMG,GAAG,GAAGA,CAACR,KAAa,EAAEC,MAAwB,EAAEC,KAAuB,KAAI;EACtF,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EAEtB,MAAMK,KAAK,GAAGE,IAAI,CAACD,GAAG,CAACR,KAAK,GAAGG,EAAE,GAAG,CAAC,CAAC,GAAGM,IAAI,CAACD,GAAG,CAACJ,EAAE,GAAGD,EAAE,GAAG,CAAC,CAAC;EAC9D,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AAC/B,CAAC;AAED;;;;;;;;;;AAUA,OAAO,MAAMK,GAAG,GAAGA,CAACV,KAAa,EAAEC,MAAwB,EAAEC,KAAuB,EAAES,QAAA,GAAmB,CAAC,KAAY;EACpH,MAAM,CAACR,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EAEtB,MAAMK,KAAK,GAAGE,IAAI,CAACC,GAAG,CAAC,CAACV,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC,EAAEQ,QAAQ,CAAC;EAC1D,OAAON,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AAC/B,CAAC;AAED;;;;;;;;;AASA,OAAO,MAAMO,IAAI,GAAGA,CAACZ,KAAa,EAAEC,MAAwB,EAAEC,KAAuB,KAAI;EACvF,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EAEtB,MAAMK,KAAK,GAAGE,IAAI,CAACG,IAAI,CAAC,CAACZ,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC,CAAC;EACjD,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}