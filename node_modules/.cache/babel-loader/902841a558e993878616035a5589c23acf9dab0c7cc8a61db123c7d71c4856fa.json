{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Diverging_1;\nimport { identity } from '@antv/util';\nimport { d3Ticks } from '../tick-methods/d3-ticks';\nimport { compose, createInterpolateNumber, createNormalize, interpolatize } from '../utils';\nimport { Linear } from './linear';\nfunction rangeOf(interpolator) {\n  return [interpolator(0), interpolator(0.5), interpolator(1)];\n}\nconst normalizeDomain = domain => {\n  const [d0, d1, d2] = domain;\n  // [d0, d1] => [0, 0.5]\n  const normalizeLeft = compose(createInterpolateNumber(0, 0.5), createNormalize(d0, d1));\n  // [d1, d2] => [0.5, 1]\n  const normalizeRight = compose(createInterpolateNumber(0.5, 1), createNormalize(d1, d2));\n  return x => {\n    // Find x belongs to the range of [d0, d1] or [d1, d2].\n    if (d0 > d2) {\n      return x < d1 ? normalizeRight(x) : normalizeLeft(x);\n    } else {\n      return x < d1 ? normalizeLeft(x) : normalizeRight(x);\n    }\n  };\n};\n/**\n * Diverging 比例尺\n *\n * 构造可创建一个在输入和输出之间通过插值函数进行转换的比例尺\n */\nlet Diverging = Diverging_1 = class Diverging extends Linear {\n  getDefaultOptions() {\n    return {\n      domain: [0, 0.5, 1],\n      unknown: undefined,\n      nice: false,\n      clamp: false,\n      round: false,\n      interpolator: identity,\n      tickMethod: d3Ticks,\n      tickCount: 5\n    };\n  }\n  constructor(options) {\n    super(options);\n  }\n  clone() {\n    return new Diverging_1(this.options);\n  }\n};\nDiverging = Diverging_1 = __decorate([interpolatize(rangeOf, normalizeDomain)], Diverging);\nexport { Diverging };","map":{"version":3,"names":["identity","d3Ticks","compose","createInterpolateNumber","createNormalize","interpolatize","Linear","rangeOf","interpolator","normalizeDomain","domain","d0","d1","d2","normalizeLeft","normalizeRight","x","Diverging","Diverging_1","getDefaultOptions","unknown","undefined","nice","clamp","round","tickMethod","tickCount","constructor","options","clone","__decorate"],"sources":["scales/diverging.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,OAAO,QAAQ,0BAA0B;AAElD,SAASC,OAAO,EAAEC,uBAAuB,EAAEC,eAAe,EAAEC,aAAa,QAAQ,UAAU;AAC3F,SAASC,MAAM,QAAQ,UAAU;AASjC,SAASC,OAAOA,CAACC,YAA0B;EACzC,OAAO,CAACA,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,GAAG,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;AAC9D;AAEA,MAAMC,eAAe,GAAqBC,MAAkC,IAAI;EAC9E,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EAC3B;EACA,MAAMI,aAAa,GAAcZ,OAAO,CAACC,uBAAuB,CAAC,CAAC,EAAE,GAAG,CAAC,EAAEC,eAAe,CAACO,EAAE,EAAEC,EAAE,CAAC,CAAC;EAClG;EACA,MAAMG,cAAc,GAAcb,OAAO,CAACC,uBAAuB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAEC,eAAe,CAACQ,EAAE,EAAEC,EAAE,CAAC,CAAC;EAEnG,OAAQG,CAAS,IAAY;IAC3B;IACA,IAAIL,EAAE,GAAGE,EAAE,EAAE;MACX,OAAOG,CAAC,GAAGJ,EAAE,GAAGG,cAAc,CAACC,CAAC,CAAC,GAAGF,aAAa,CAACE,CAAC,CAAC;KACrD,MAAM;MACL,OAAOA,CAAC,GAAGJ,EAAE,GAAGE,aAAa,CAACE,CAAC,CAAC,GAAGD,cAAc,CAACC,CAAC,CAAC;;EAExD,CAAC;AACH,CAAC;AAED;;;;;AAMO,IAAMC,SAAS,GAAAC,WAAA,GAAf,MAAMD,SAAU,SAAQX,MAAM;EACzBa,iBAAiBA,CAAA;IACzB,OAAO;MACLT,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;MACnBU,OAAO,EAAEC,SAAS;MAClBC,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE,KAAK;MACZhB,YAAY,EAAER,QAAQ;MACtByB,UAAU,EAAExB,OAAO;MACnByB,SAAS,EAAE;KACZ;EACH;EAEAC,YAAYC,OAA0B;IACpC,KAAK,CAACA,OAAO,CAAC;EAChB;EAEOC,KAAKA,CAAA;IACV,OAAO,IAAIX,WAAS,CAAC,IAAI,CAACU,OAAO,CAAC;EACpC;CACD;AArBYX,SAAS,GAAAC,WAAA,GAAAY,UAAA,EADrBzB,aAAa,CAACE,OAAO,EAAEE,eAAe,CAAC,C,EAC3BQ,SAAS,CAqBrB;SArBYA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}