{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Graph } from \"@antv/graphlib\";\nimport * as Comlink from \"comlink\";\nimport { registry } from \"./registry\";\nimport { isLayoutWithIterations } from \"./types\";\nlet currentLayout;\nconst obj = {\n  stopLayout() {\n    if (currentLayout === null || currentLayout === void 0 ? void 0 : currentLayout.stop) {\n      currentLayout.stop();\n    }\n  },\n  calculateLayout(payload, transferables) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        layout: {\n          id,\n          options,\n          iterations\n        },\n        nodes,\n        edges\n      } = payload;\n      // Sync graph on the worker side.\n      // TODO: Use transferable objects like ArrayBuffer for nodes & edges,\n      // in which case we don't need the whole graph.\n      // @see https://github.com/graphology/graphology/blob/master/src/layout-noverlap/webworker.tpl.js#L32\n      const graph = new Graph({\n        nodes,\n        edges\n      });\n      /**\n       * Create layout instance on the worker side.\n       */\n      const layoutCtor = registry[id];\n      if (layoutCtor) {\n        currentLayout = new layoutCtor(options);\n      } else {\n        throw new Error(`Unknown layout id: ${id}`);\n      }\n      let positions = yield currentLayout.execute(graph);\n      if (isLayoutWithIterations(currentLayout)) {\n        currentLayout.stop();\n        positions = currentLayout.tick(iterations);\n      }\n      return [positions, transferables];\n    });\n  }\n};\nComlink.expose(obj);","map":{"version":3,"names":["Graph","Comlink","registry","isLayoutWithIterations","currentLayout","obj","stopLayout","stop","calculateLayout","payload","transferables","layout","id","options","iterations","nodes","edges","graph","layoutCtor","Error","positions","execute","tick","expose"],"sources":["../src/worker.js"],"sourcesContent":[null],"mappings":";AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAO,KAAKC,OAAO,MAAM,SAAS;AAClC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,sBAAsB,QAAQ,SAAS;AAEhD,IAAIC,aAAa;AAEjB,MAAMC,GAAG,GAAG;EACVC,UAAUA,CAAA;IACR,IAAIF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEG,IAAI,EAAE;MACvBH,aAAa,CAACG,IAAI,EAAE;;EAExB,CAAC;EACKC,eAAeA,CAACC,OAAO,EAAEC,aAAa;;MAC1C,MAAM;QACJC,MAAM,EAAE;UAAEC,EAAE;UAAEC,OAAO;UAAEC;QAAU,CAAE;QACnCC,KAAK;QACLC;MAAK,CACN,GAAGP,OAAO;MAEX;MACA;MACA;MACA;MACA,MAAMQ,KAAK,GAAG,IAAIjB,KAAK,CAAC;QACtBe,KAAK;QACLC;OACD,CAAC;MAEF;;;MAIA,MAAME,UAAU,GAAGhB,QAAQ,CAACU,EAAE,CAAC;MAC/B,IAAIM,UAAU,EAAE;QACdd,aAAa,GAAG,IAAIc,UAAU,CAACL,OAAO,CAAC;OACxC,MAAM;QACL,MAAM,IAAIM,KAAK,CAAC,sBAAsBP,EAAE,EAAE,CAAC;;MAG7C,IAAIQ,SAAS,GAAG,MAAMhB,aAAa,CAACiB,OAAO,CAACJ,KAAK,CAAC;MAClD,IAAId,sBAAsB,CAACC,aAAa,CAAC,EAAE;QACzCA,aAAa,CAACG,IAAI,EAAE;QACpBa,SAAS,GAAGhB,aAAa,CAACkB,IAAI,CAACR,UAAU,CAAC;;MAE5C,OAAO,CAACM,SAAS,EAAEV,aAAa,CAAC;IACnC,CAAC;;CACF;AAEDT,OAAO,CAACsB,MAAM,CAAClB,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}