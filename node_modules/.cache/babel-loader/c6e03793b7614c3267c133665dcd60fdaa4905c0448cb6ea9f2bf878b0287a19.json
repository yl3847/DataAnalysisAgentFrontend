{"ast":null,"code":"import { __read } from \"tslib\";\nvar scale = ['year', 'month', 'day', 'hour', 'minute', 'second'];\nvar masks = ['YYYY', 'MM', 'DD', 'hh', 'mm', 'ss'];\nexport function parseDate(date) {\n  return date instanceof Date ? date : new Date(date);\n}\n/**\n * 生成时间格式化\n * @param maxUnit 最大时间单位\n * @param minUnit 最小时间单位\n */\nexport function getMask(_a) {\n  var _b = __read(_a, 2),\n    maxUnit = _b[0],\n    minUnit = _b[1];\n  var startIndex = scale.indexOf(maxUnit);\n  var endIndex = scale.indexOf(minUnit);\n  var format = '';\n  for (var i = startIndex; i <= endIndex; i += 1) {\n    format += masks[i];\n    if (i < endIndex) {\n      var connect = '-';\n      if (i === 2) connect = ' ';else if (i > 2) connect = ':';\n      format += connect;\n    }\n  }\n  return format;\n}\n/**\n * 格式化时间\n */\nexport function formatTime(date, mask) {\n  var timeMap = {\n    YYYY: date.getFullYear(),\n    MM: date.getMonth() + 1,\n    DD: date.getDate(),\n    HH: date.getHours(),\n    mm: date.getMinutes(),\n    ss: date.getSeconds()\n  };\n  var strftime = mask;\n  Object.keys(timeMap).forEach(function (key) {\n    var val = timeMap[key];\n    strftime = strftime.replace(key, key === 'YYYY' ? \"\".concat(val) : \"\".concat(val).padStart(2, '0'));\n  });\n  return strftime;\n}\n/**\n * 获取两个时间的差值，单位毫秒\n */\nexport function getTimeDiff(a, b) {\n  return parseDate(a).getTime() - parseDate(b).getTime();\n}\n/**\n * 获取时间跨度\n */\nexport function getTimeScale(a, b) {\n  var _a = __read([parseDate(a), parseDate(b)], 2),\n    ma = _a[0],\n    mb = _a[1];\n  if (ma.getFullYear() !== mb.getFullYear()) return 'year';\n  if (ma.getMonth() !== mb.getMonth()) return 'month';\n  if (ma.getDay() !== mb.getDay()) return 'day';\n  if (ma.getHours() !== mb.getHours()) return 'hour';\n  if (ma.getMinutes() !== mb.getMinutes()) return 'minute';\n  return 'second';\n}\n/**\n * 获取给定时间的开始时间\n */\nexport function getTimeStart(date, scale) {\n  var result = new Date(date);\n  var timeMap = {\n    year: function (d) {\n      d.setMonth(0);\n      d.setHours(0, 0, 0, 0);\n    },\n    month: function (d) {\n      d.setDate(1);\n      d.setHours(0, 0, 0, 0);\n    },\n    day: function (d) {\n      return d.setHours(0, 0, 0, 0);\n    },\n    hour: function (d) {\n      return d.setMinutes(0, 0, 0);\n    },\n    minute: function (d) {\n      return d.setSeconds(0, 0);\n    },\n    second: function (d) {\n      return d.setMilliseconds(0);\n    }\n  };\n  timeMap[scale](result);\n  return formatTime(result, getMask(['year', scale]));\n}","map":{"version":3,"names":["scale","masks","parseDate","date","Date","getMask","_a","_b","__read","maxUnit","minUnit","startIndex","indexOf","endIndex","format","i","connect","formatTime","mask","timeMap","YYYY","getFullYear","MM","getMonth","DD","getDate","HH","getHours","mm","getMinutes","ss","getSeconds","strftime","Object","keys","forEach","key","val","replace","concat","padStart","getTimeDiff","a","b","getTime","getTimeScale","ma","mb","getDay","getTimeStart","result","year","d","setMonth","setHours","month","setDate","day","hour","setMinutes","minute","setSeconds","second","setMilliseconds"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/util/time.ts"],"sourcesContent":["const scale = ['year', 'month', 'day', 'hour', 'minute', 'second'] as const;\nconst masks = ['YYYY', 'MM', 'DD', 'hh', 'mm', 'ss'];\ntype TimeScale = (typeof scale)[number];\n\nexport function parseDate(date: Date | string) {\n  return date instanceof Date ? date : new Date(date);\n}\n\n/**\n * 生成时间格式化\n * @param maxUnit 最大时间单位\n * @param minUnit 最小时间单位\n */\nexport function getMask([maxUnit, minUnit]: [TimeScale, TimeScale]) {\n  const startIndex = scale.indexOf(maxUnit);\n  const endIndex = scale.indexOf(minUnit);\n  let format = '';\n  for (let i = startIndex; i <= endIndex; i += 1) {\n    format += masks[i];\n    if (i < endIndex) {\n      let connect = '-';\n      if (i === 2) connect = ' ';\n      else if (i > 2) connect = ':';\n      format += connect;\n    }\n  }\n  return format;\n}\n\n/**\n * 格式化时间\n */\nexport function formatTime(date: Date, mask: string) {\n  type TimeMapKeys = 'YYYY' | 'MM' | 'DD' | 'HH' | 'mm' | 'ss';\n  const timeMap: {\n    [keys in TimeMapKeys]: number;\n  } = {\n    YYYY: date.getFullYear(),\n    MM: date.getMonth() + 1,\n    DD: date.getDate(),\n    HH: date.getHours(),\n    mm: date.getMinutes(),\n    ss: date.getSeconds(),\n  };\n\n  let strftime = mask;\n  (Object.keys(timeMap) as TimeMapKeys[]).forEach((key) => {\n    const val = timeMap[key];\n    strftime = strftime.replace(key, key === 'YYYY' ? `${val}` : `${val}`.padStart(2, '0'));\n  });\n  return strftime;\n}\n\n/**\n * 获取两个时间的差值，单位毫秒\n */\nexport function getTimeDiff(a: Date | string, b: Date | string) {\n  return parseDate(a).getTime() - parseDate(b).getTime();\n}\n\n/**\n * 获取时间跨度\n */\nexport function getTimeScale(a: Date | string, b: Date | string): TimeScale {\n  const [ma, mb] = [parseDate(a), parseDate(b)];\n  if (ma.getFullYear() !== mb.getFullYear()) return 'year';\n  if (ma.getMonth() !== mb.getMonth()) return 'month';\n  if (ma.getDay() !== mb.getDay()) return 'day';\n  if (ma.getHours() !== mb.getHours()) return 'hour';\n  if (ma.getMinutes() !== mb.getMinutes()) return 'minute';\n  return 'second';\n}\n\n/**\n * 获取给定时间的开始时间\n */\nexport function getTimeStart(date: Date, scale: TimeScale) {\n  const result = new Date(date);\n  const timeMap = {\n    year: (d: Date) => {\n      d.setMonth(0);\n      d.setHours(0, 0, 0, 0);\n    },\n    month: (d: Date) => {\n      d.setDate(1);\n      d.setHours(0, 0, 0, 0);\n    },\n    day: (d: Date) => d.setHours(0, 0, 0, 0),\n    hour: (d: Date) => d.setMinutes(0, 0, 0),\n    minute: (d: Date) => d.setSeconds(0, 0),\n    second: (d: Date) => d.setMilliseconds(0),\n  };\n  timeMap[scale](result);\n  return formatTime(result, getMask(['year', scale]));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}