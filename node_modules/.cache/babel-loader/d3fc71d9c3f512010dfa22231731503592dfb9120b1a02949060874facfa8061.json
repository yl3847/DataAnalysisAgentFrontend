{"ast":null,"code":"import { maxIndex } from '@antv/vendor/d3-array';\nimport { parseToRGB } from '../utils/color';\nfunction getsRGB(s) {\n  let c = s / 255;\n  c = c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  return c;\n}\nfunction getL(r, g, b) {\n  return 0.2126 * getsRGB(r) + 0.7152 * getsRGB(g) + 0.0722 * getsRGB(b);\n}\n/**\n * Calculate the contrast. see https://webaim.org/resources/contrastchecker/\n * @param foreground\n * @param background\n */\nexport function contrast(foreground, background) {\n  if (!foreground || !background || foreground === background) return 1;\n  const {\n    r,\n    g,\n    b\n  } = foreground;\n  const {\n    r: rb,\n    g: gb,\n    b: bb\n  } = background;\n  const L1 = getL(r, g, b);\n  const L2 = getL(rb, gb, bb);\n  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);\n}\n/**\n * Reverse color for max contrast.\n */\nexport function mostContrast(color, palette) {\n  const i = maxIndex(palette, c => contrast(color, parseToRGB(c)));\n  return palette[i];\n}","map":{"version":3,"names":["maxIndex","parseToRGB","getsRGB","s","c","Math","pow","getL","r","g","b","contrast","foreground","background","rb","gb","bb","L1","L2","max","min","mostContrast","color","palette","i"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/label-transform/utils.ts"],"sourcesContent":["import { maxIndex } from '@antv/vendor/d3-array';\nimport { parseToRGB } from '../utils/color';\n\nfunction getsRGB(s: number) {\n  let c = s / 255;\n  c = c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  return c;\n}\n\nfunction getL(r: number, g: number, b: number) {\n  return 0.2126 * getsRGB(r) + 0.7152 * getsRGB(g) + 0.0722 * getsRGB(b);\n}\n\n/**\n * Calculate the contrast. see https://webaim.org/resources/contrastchecker/\n * @param foreground\n * @param background\n */\nexport function contrast(foreground, background): number {\n  if (!foreground || !background || foreground === background) return 1;\n  const { r, g, b } = foreground;\n  const { r: rb, g: gb, b: bb } = background;\n  const L1 = getL(r, g, b);\n  const L2 = getL(rb, gb, bb);\n  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);\n}\n\n/**\n * Reverse color for max contrast.\n */\nexport function mostContrast(color, palette: string[]): string {\n  const i = maxIndex(palette, (c) => contrast(color, parseToRGB(c)));\n  return palette[i];\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,SAASC,OAAOA,CAACC,CAAS;EACxB,IAAIC,CAAC,GAAGD,CAAC,GAAG,GAAG;EACfC,CAAC,GAAGA,CAAC,IAAI,OAAO,GAAGA,CAAC,GAAG,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACF,CAAC,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC;EACjE,OAAOA,CAAC;AACV;AAEA,SAASG,IAAIA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS;EAC3C,OAAO,MAAM,GAAGR,OAAO,CAACM,CAAC,CAAC,GAAG,MAAM,GAAGN,OAAO,CAACO,CAAC,CAAC,GAAG,MAAM,GAAGP,OAAO,CAACQ,CAAC,CAAC;AACxE;AAEA;;;;;AAKA,OAAM,SAAUC,QAAQA,CAACC,UAAU,EAAEC,UAAU;EAC7C,IAAI,CAACD,UAAU,IAAI,CAACC,UAAU,IAAID,UAAU,KAAKC,UAAU,EAAE,OAAO,CAAC;EACrE,MAAM;IAAEL,CAAC;IAAEC,CAAC;IAAEC;EAAC,CAAE,GAAGE,UAAU;EAC9B,MAAM;IAAEJ,CAAC,EAAEM,EAAE;IAAEL,CAAC,EAAEM,EAAE;IAAEL,CAAC,EAAEM;EAAE,CAAE,GAAGH,UAAU;EAC1C,MAAMI,EAAE,GAAGV,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACxB,MAAMQ,EAAE,GAAGX,IAAI,CAACO,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EAC3B,OAAO,CAACX,IAAI,CAACc,GAAG,CAACF,EAAE,EAAEC,EAAE,CAAC,GAAG,IAAI,KAAKb,IAAI,CAACe,GAAG,CAACH,EAAE,EAAEC,EAAE,CAAC,GAAG,IAAI,CAAC;AAC9D;AAEA;;;AAGA,OAAM,SAAUG,YAAYA,CAACC,KAAK,EAAEC,OAAiB;EACnD,MAAMC,CAAC,GAAGxB,QAAQ,CAACuB,OAAO,EAAGnB,CAAC,IAAKO,QAAQ,CAACW,KAAK,EAAErB,UAAU,CAACG,CAAC,CAAC,CAAC,CAAC;EAClE,OAAOmB,OAAO,CAACC,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}