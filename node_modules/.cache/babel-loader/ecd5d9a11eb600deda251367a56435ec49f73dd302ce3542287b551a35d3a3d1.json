{"ast":null,"code":"/**\n * 将一个值从一个范围线性映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const linear = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  if (d1 === d0) return r0;\n  const ratio = (value - d0) / (d1 - d0);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围对数映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const log = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.log(value - d0 + 1) / Math.log(d1 - d0 + 1);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围幂映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @param exponent - 幂指数\n * @returns 映射后的值\n */\nexport const pow = (value, domain, range, exponent = 2) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.pow((value - d0) / (d1 - d0), exponent);\n  return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围平方根映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const sqrt = (value, domain, range) => {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const ratio = Math.sqrt((value - d0) / (d1 - d0));\n  return r0 + ratio * (r1 - r0);\n};","map":{"version":3,"names":["linear","value","domain","range","d0","d1","r0","r1","ratio","log","Math","pow","exponent","sqrt"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/graphs/es/core/utils/scale.js"],"sourcesContent":["/**\n * 将一个值从一个范围线性映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const linear = (value, domain, range) => {\n    const [d0, d1] = domain;\n    const [r0, r1] = range;\n    if (d1 === d0)\n        return r0;\n    const ratio = (value - d0) / (d1 - d0);\n    return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围对数映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const log = (value, domain, range) => {\n    const [d0, d1] = domain;\n    const [r0, r1] = range;\n    const ratio = Math.log(value - d0 + 1) / Math.log(d1 - d0 + 1);\n    return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围幂映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @param exponent - 幂指数\n * @returns 映射后的值\n */\nexport const pow = (value, domain, range, exponent = 2) => {\n    const [d0, d1] = domain;\n    const [r0, r1] = range;\n    const ratio = Math.pow((value - d0) / (d1 - d0), exponent);\n    return r0 + ratio * (r1 - r0);\n};\n/**\n * 将一个值从一个范围平方根映射到另一个范围\n * @param value - 需要映射的值\n * @param domain - 输入值的范围 [最小值, 最大值]\n * @param range - 输出值的范围 [最小值, 最大值]\n * @returns 映射后的值\n */\nexport const sqrt = (value, domain, range) => {\n    const [d0, d1] = domain;\n    const [r0, r1] = range;\n    const ratio = Math.sqrt((value - d0) / (d1 - d0));\n    return r0 + ratio * (r1 - r0);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,MAAM,GAAGA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAC5C,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EACtB,IAAIE,EAAE,KAAKD,EAAE,EACT,OAAOE,EAAE;EACb,MAAME,KAAK,GAAG,CAACP,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC;EACtC,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,GAAG,GAAGA,CAACR,KAAK,EAAEC,MAAM,EAAEC,KAAK,KAAK;EACzC,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EACtB,MAAMK,KAAK,GAAGE,IAAI,CAACD,GAAG,CAACR,KAAK,GAAGG,EAAE,GAAG,CAAC,CAAC,GAAGM,IAAI,CAACD,GAAG,CAACJ,EAAE,GAAGD,EAAE,GAAG,CAAC,CAAC;EAC9D,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,GAAG,GAAGA,CAACV,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAES,QAAQ,GAAG,CAAC,KAAK;EACvD,MAAM,CAACR,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EACtB,MAAMK,KAAK,GAAGE,IAAI,CAACC,GAAG,CAAC,CAACV,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC,EAAEQ,QAAQ,CAAC;EAC1D,OAAON,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,IAAI,GAAGA,CAACZ,KAAK,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAC1C,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,MAAM;EACvB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EACtB,MAAMK,KAAK,GAAGE,IAAI,CAACG,IAAI,CAAC,CAACZ,KAAK,GAAGG,EAAE,KAAKC,EAAE,GAAGD,EAAE,CAAC,CAAC;EACjD,OAAOE,EAAE,GAAGE,KAAK,IAAID,EAAE,GAAGD,EAAE,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}