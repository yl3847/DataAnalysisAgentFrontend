{"ast":null,"code":"/**\n * <zh/> 将模块配置项转换为标准模块格式\n *\n * <en/> Convert extension options to standard format\n * @param graph - <zh/> 图实例 <en/> graph instance\n * @param category - <zh/> 模块类型 <en/> extension type\n * @param extensions - <zh/> 模块配置项 <en/> extension options\n * @returns <zh/> 标准模块配置项 <en/> Standard extension options\n */\nexport function parseExtensions(graph, category, extensions) {\n  const counter = {};\n  const getKey = type => {\n    if (!(type in counter)) counter[type] = 0;\n    return `${category}-${type}-${counter[type]++}`;\n  };\n  return extensions.map(extension => {\n    if (typeof extension === 'string') {\n      return {\n        type: extension,\n        key: getKey(extension)\n      };\n    }\n    if (typeof extension === 'function') {\n      return extension.call(graph);\n    }\n    if (extension.key) return extension;\n    return Object.assign(Object.assign({}, extension), {\n      key: getKey(extension.type)\n    });\n  });\n}","map":{"version":3,"names":["parseExtensions","graph","category","extensions","counter","getKey","type","map","extension","key","call","Object","assign"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/extension.ts"],"sourcesContent":["import type { STDExtensionOption } from '../registry/extension/types';\nimport type { Graph } from '../runtime/graph';\nimport type { TransformOptions } from '../spec/transform';\n\n/**\n * <zh/> 将模块配置项转换为标准模块格式\n *\n * <en/> Convert extension options to standard format\n * @param graph - <zh/> 图实例 <en/> graph instance\n * @param category - <zh/> 模块类型 <en/> extension type\n * @param extensions - <zh/> 模块配置项 <en/> extension options\n * @returns <zh/> 标准模块配置项 <en/> Standard extension options\n */\nexport function parseExtensions(graph: Graph, category: string, extensions: TransformOptions): STDExtensionOption[] {\n  const counter: Record<string, number> = {};\n\n  const getKey = (type: string) => {\n    if (!(type in counter)) counter[type] = 0;\n    return `${category}-${type}-${counter[type]++}`;\n  };\n\n  return extensions.map((extension) => {\n    if (typeof extension === 'string') {\n      return { type: extension, key: getKey(extension) };\n    }\n    if (typeof extension === 'function') {\n      return extension.call(graph);\n    }\n\n    if (extension.key) return extension;\n    return { ...extension, key: getKey(extension.type!) };\n  }) as STDExtensionOption[];\n}\n"],"mappings":"AAIA;;;;;;;;;AASA,OAAM,SAAUA,eAAeA,CAACC,KAAY,EAAEC,QAAgB,EAAEC,UAA4B;EAC1F,MAAMC,OAAO,GAA2B,EAAE;EAE1C,MAAMC,MAAM,GAAIC,IAAY,IAAI;IAC9B,IAAI,EAAEA,IAAI,IAAIF,OAAO,CAAC,EAAEA,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC;IACzC,OAAO,GAAGJ,QAAQ,IAAII,IAAI,IAAIF,OAAO,CAACE,IAAI,CAAC,EAAE,EAAE;EACjD,CAAC;EAED,OAAOH,UAAU,CAACI,GAAG,CAAEC,SAAS,IAAI;IAClC,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MACjC,OAAO;QAAEF,IAAI,EAAEE,SAAS;QAAEC,GAAG,EAAEJ,MAAM,CAACG,SAAS;MAAC,CAAE;IACpD;IACA,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAE;MACnC,OAAOA,SAAS,CAACE,IAAI,CAACT,KAAK,CAAC;IAC9B;IAEA,IAAIO,SAAS,CAACC,GAAG,EAAE,OAAOD,SAAS;IACnC,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYJ,SAAS;MAAEC,GAAG,EAAEJ,MAAM,CAACG,SAAS,CAACF,IAAK;IAAC;EACrD,CAAC,CAAyB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}