{"ast":null,"code":"import { PolygonShape, PolygonRibbon } from '../shape';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip2d } from './utils';\nconst shape = {\n  polygon: PolygonShape,\n  ribbon: PolygonRibbon\n};\n/**\n * Convert value for each channel to polygon shapes.\n */\nexport const Polygon = () => {\n  return (index, scale, value, coordinate) => {\n    const Xn = Object.entries(value).filter(([key]) => key.startsWith('x')).map(([, value]) => value);\n    const Yn = Object.entries(value).filter(([key]) => key.startsWith('y')).map(([, value]) => value);\n    const P = index.map(i => {\n      const Pn = [];\n      for (let j = 0; j < Xn.length; j++) {\n        const x = Xn[j][i];\n        if (x === undefined) break;\n        const y = Yn[j][i];\n        Pn.push(coordinate.map([+x, +y]));\n      }\n      return Pn;\n    });\n    return [index, P];\n  };\n};\nPolygon.props = {\n  defaultShape: 'polygon',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["PolygonShape","PolygonRibbon","baseGeometryChannels","basePostInference","basePreInference","tooltip2d","shape","polygon","ribbon","Polygon","index","scale","value","coordinate","Xn","Object","entries","filter","key","startsWith","map","Yn","P","i","Pn","j","length","x","undefined","y","push","props","defaultShape","defaultLabelShape","composite","channels","shapes","keys","name","required","preInference","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/polygon.ts"],"sourcesContent":["import { Vector2, MarkComponent as MC } from '../runtime';\nimport { PolygonMark } from '../spec';\nimport { PolygonShape, PolygonRibbon } from '../shape';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  tooltip2d,\n} from './utils';\n\nconst shape = {\n  polygon: PolygonShape,\n  ribbon: PolygonRibbon,\n};\n\nexport type PolygonOptions = Omit<PolygonMark, 'type'>;\n\n/**\n * Convert value for each channel to polygon shapes.\n */\nexport const Polygon: MC<PolygonOptions> = () => {\n  return (index, scale, value, coordinate) => {\n    const Xn = Object.entries(value)\n      .filter(([key]) => key.startsWith('x'))\n      .map(([, value]) => value);\n\n    const Yn = Object.entries(value)\n      .filter(([key]) => key.startsWith('y'))\n      .map(([, value]) => value);\n\n    const P = index.map((i) => {\n      const Pn = [];\n      for (let j = 0; j < Xn.length; j++) {\n        const x = Xn[j][i];\n        if (x === undefined) break;\n        const y = Yn[j][i];\n        Pn.push(coordinate.map([+x, +y]));\n      }\n      return Pn as Vector2[];\n    });\n\n    return [index, P];\n  };\n};\n\nPolygon.props = {\n  defaultShape: 'polygon',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', required: true },\n    { name: 'y', required: true },\n  ],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference(), ...tooltip2d()],\n};\n"],"mappings":"AAEA,SAASA,YAAY,EAAEC,aAAa,QAAQ,UAAU;AACtD,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,SAAS,QACJ,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,OAAO,EAAEP,YAAY;EACrBQ,MAAM,EAAEP;CACT;AAID;;;AAGA,OAAO,MAAMQ,OAAO,GAAuBA,CAAA,KAAK;EAC9C,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAMC,EAAE,GAAGC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAC7BK,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,KAAKA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC,CAAC,CACtCC,GAAG,CAAC,CAAC,GAAGR,KAAK,CAAC,KAAKA,KAAK,CAAC;IAE5B,MAAMS,EAAE,GAAGN,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAC7BK,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,KAAKA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC,CAAC,CACtCC,GAAG,CAAC,CAAC,GAAGR,KAAK,CAAC,KAAKA,KAAK,CAAC;IAE5B,MAAMU,CAAC,GAAGZ,KAAK,CAACU,GAAG,CAAEG,CAAC,IAAI;MACxB,MAAMC,EAAE,GAAG,EAAE;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,EAAE,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,MAAME,CAAC,GAAGb,EAAE,CAACW,CAAC,CAAC,CAACF,CAAC,CAAC;QAClB,IAAII,CAAC,KAAKC,SAAS,EAAE;QACrB,MAAMC,CAAC,GAAGR,EAAE,CAACI,CAAC,CAAC,CAACF,CAAC,CAAC;QAClBC,EAAE,CAACM,IAAI,CAACjB,UAAU,CAACO,GAAG,CAAC,CAAC,CAACO,CAAC,EAAE,CAACE,CAAC,CAAC,CAAC,CAAC;;MAEnC,OAAOL,EAAe;IACxB,CAAC,CAAC;IAEF,OAAO,CAACd,KAAK,EAAEY,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDb,OAAO,CAACsB,KAAK,GAAG;EACdC,YAAY,EAAE,SAAS;EACvBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChB5B,KAAK;EACL6B,QAAQ,EAAE,CACR,GAAGjC,oBAAoB,CAAC;IAAEkC,MAAM,EAAErB,MAAM,CAACsB,IAAI,CAAC/B,KAAK;EAAC,CAAE,CAAC,EACvD;IAAEgC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,CAC9B;EACDC,YAAY,EAAE,CAAC,GAAGpC,gBAAgB,EAAE,CAAC;EACrCqC,aAAa,EAAE,CAAC,GAAGtC,iBAAiB,EAAE,EAAE,GAAGE,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}