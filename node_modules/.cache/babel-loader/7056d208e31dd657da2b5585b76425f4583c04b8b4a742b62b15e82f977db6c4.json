{"ast":null,"code":"import { lowerFirst, upperFirst } from '@antv/util';\n/**\n * <zh/> 是否以某个前缀开头\n *\n * <en/> Whether starts with prefix\n * @param str - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 是否以某个前缀开头 | <en/> whether starts with prefix\n */\nexport function startsWith(str, prefix) {\n  if (!str.startsWith(prefix)) return false;\n  const nextChart = str[prefix.length];\n  return nextChart >= 'A' && nextChart <= 'Z';\n}\n/**\n * <zh/> 添加前缀\n *\n * <en/> Add prefix\n * @param str - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 添加前缀后的字符串 | <en/> string with prefix\n */\nexport function addPrefix(str, prefix) {\n  return `${prefix}${upperFirst(str)}`;\n}\n/**\n * <zh/> 移除前缀\n *\n * <en/> Remove prefix\n * @param string - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @param lowercaseFirstLetter - <zh/> 是否小写首字母 | <en/> whether lowercase first letter\n * @returns <zh/> 移除前缀后的字符串 | <en/> string without prefix\n */\nexport function removePrefix(string, prefix, lowercaseFirstLetter = true) {\n  if (!prefix) return string;\n  if (!startsWith(string, prefix)) return string;\n  const str = string.slice(prefix.length);\n  return lowercaseFirstLetter ? lowerFirst(str) : str;\n}\n/**\n * <zh/> 从样式中提取子样式\n *\n * <en/> Extract sub style from style\n * @param style - <zh/> 样式 | <en/> style\n * @param prefix - <zh/> 子样式前缀 | <en/> sub style prefix\n * @returns <zh/> 子样式 | <en/> sub style\n */\nexport function subStyleProps(style, prefix) {\n  const subStyle = Object.entries(style).reduce((acc, [key, value]) => {\n    if (key === 'className' || key === 'class') return acc;\n    if (startsWith(key, prefix)) {\n      Object.assign(acc, {\n        [removePrefix(key, prefix)]: value\n      });\n    }\n    return acc;\n  }, {});\n  // 向下传递透明度，但避免覆盖子样式中的透明度属性\n  // Pass down opacity, but avoid overwriting the opacity property in the sub-style\n  if ('opacity' in style) {\n    const subOpacityKey = addPrefix('opacity', prefix);\n    const opacity = style.opacity;\n    if (subOpacityKey in style) {\n      const subOpacity = style[subOpacityKey];\n      Object.assign(subStyle, {\n        opacity: opacity * subOpacity\n      });\n    } else Object.assign(subStyle, {\n      opacity\n    });\n  }\n  return subStyle;\n}\n/**\n * <zh/> 从对象中提取指定前缀的属性，并移除前缀\n *\n * <en/> Extract properties with the specified prefix from the object and remove the prefix\n * @param obj - <zh/> 对象 | <en/> object\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 新对象 | <en/> new object\n */\nexport function subObject(obj, prefix) {\n  const prefixLength = prefix.length;\n  return Object.keys(obj).reduce((acc, key) => {\n    if (key.startsWith(prefix)) {\n      const newKey = key.slice(prefixLength);\n      acc[newKey] = obj[key];\n    }\n    return acc;\n  }, {});\n}\n/**\n * <zh/> 从样式中排除子样式\n *\n * <en/> Omit sub style from style\n * @param style - <zh/> 样式 | <en/> style\n * @param prefix - <zh/> 子样式前缀 | <en/> sub style prefix\n * @returns <zh/> 排除子样式后的样式 | <en/> style without sub style\n */\nexport function omitStyleProps(style, prefix) {\n  const prefixArray = typeof prefix === 'string' ? [prefix] : prefix;\n  const omitStyle = {};\n  Object.keys(style).forEach(key => {\n    if (!prefixArray.find(p => key.startsWith(p))) {\n      omitStyle[key] = style[key];\n    }\n  });\n  return omitStyle;\n}\n/**\n * <zh/> 替换前缀\n *\n * <en/> Replace prefix\n * @param style - <zh/> 样式 | <en/> style\n * @param oldPrefix - <zh/> 旧前缀 | <en/> old prefix\n * @param newPrefix - <zh/> 新前缀 | <en/> new prefix\n * @returns <zh/> 替换前缀后的样式 | <en/> style with replaced prefix\n */\nexport function replacePrefix(style, oldPrefix, newPrefix) {\n  return Object.entries(style).reduce((acc, [key, value]) => {\n    if (startsWith(key, oldPrefix)) {\n      acc[addPrefix(removePrefix(key, oldPrefix, false), newPrefix)] = value;\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}","map":{"version":3,"names":["lowerFirst","upperFirst","startsWith","str","prefix","nextChart","length","addPrefix","removePrefix","string","lowercaseFirstLetter","slice","subStyleProps","style","subStyle","Object","entries","reduce","acc","key","value","assign","subOpacityKey","opacity","subOpacity","subObject","obj","prefixLength","keys","newKey","omitStyleProps","prefixArray","omitStyle","forEach","find","p","replacePrefix","oldPrefix","newPrefix"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/prefix.ts"],"sourcesContent":["import { lowerFirst, upperFirst } from '@antv/util';\nimport type { ReplacePrefix } from '../types';\n\n/**\n * <zh/> 是否以某个前缀开头\n *\n * <en/> Whether starts with prefix\n * @param str - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 是否以某个前缀开头 | <en/> whether starts with prefix\n */\nexport function startsWith(str: string, prefix: string) {\n  if (!str.startsWith(prefix)) return false;\n  const nextChart = str[prefix.length];\n  return nextChart >= 'A' && nextChart <= 'Z';\n}\n\n/**\n * <zh/> 添加前缀\n *\n * <en/> Add prefix\n * @param str - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 添加前缀后的字符串 | <en/> string with prefix\n */\nexport function addPrefix(str: string, prefix: string): string {\n  return `${prefix}${upperFirst(str)}`;\n}\n\n/**\n * <zh/> 移除前缀\n *\n * <en/> Remove prefix\n * @param string - <zh/> 字符串 | <en/> string\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @param lowercaseFirstLetter - <zh/> 是否小写首字母 | <en/> whether lowercase first letter\n * @returns <zh/> 移除前缀后的字符串 | <en/> string without prefix\n */\nexport function removePrefix(string: string, prefix?: string, lowercaseFirstLetter: boolean = true) {\n  if (!prefix) return string;\n  if (!startsWith(string, prefix)) return string;\n  const str = string.slice(prefix.length);\n  return lowercaseFirstLetter ? lowerFirst(str) : str;\n}\n\n/**\n * <zh/> 从样式中提取子样式\n *\n * <en/> Extract sub style from style\n * @param style - <zh/> 样式 | <en/> style\n * @param prefix - <zh/> 子样式前缀 | <en/> sub style prefix\n * @returns <zh/> 子样式 | <en/> sub style\n */\nexport function subStyleProps<T extends Record<string, any>>(style: object, prefix: string) {\n  const subStyle = Object.entries(style).reduce((acc, [key, value]) => {\n    if (key === 'className' || key === 'class') return acc;\n    if (startsWith(key, prefix)) {\n      Object.assign(acc, { [removePrefix(key, prefix)]: value });\n    }\n    return acc;\n  }, {} as T);\n\n  // 向下传递透明度，但避免覆盖子样式中的透明度属性\n  // Pass down opacity, but avoid overwriting the opacity property in the sub-style\n  if ('opacity' in style) {\n    const subOpacityKey = addPrefix('opacity', prefix) as keyof typeof style;\n    const opacity = style.opacity as number;\n\n    if (subOpacityKey in style) {\n      const subOpacity = style[subOpacityKey] as number;\n      Object.assign(subStyle, { opacity: opacity * subOpacity });\n    } else Object.assign(subStyle, { opacity });\n  }\n\n  return subStyle;\n}\n\n/**\n * <zh/> 从对象中提取指定前缀的属性，并移除前缀\n *\n * <en/> Extract properties with the specified prefix from the object and remove the prefix\n * @param obj - <zh/> 对象 | <en/> object\n * @param prefix - <zh/> 前缀 | <en/> prefix\n * @returns <zh/> 新对象 | <en/> new object\n */\nexport function subObject(obj: Record<string, any>, prefix: string): Record<string, any> {\n  const prefixLength = prefix.length;\n\n  return Object.keys(obj).reduce(\n    (acc, key) => {\n      if (key.startsWith(prefix)) {\n        const newKey = key.slice(prefixLength);\n        acc[newKey] = obj[key];\n      }\n      return acc;\n    },\n    {} as Record<string, any>,\n  );\n}\n\n/**\n * <zh/> 从样式中排除子样式\n *\n * <en/> Omit sub style from style\n * @param style - <zh/> 样式 | <en/> style\n * @param prefix - <zh/> 子样式前缀 | <en/> sub style prefix\n * @returns <zh/> 排除子样式后的样式 | <en/> style without sub style\n */\nexport function omitStyleProps<T extends Record<string, any>>(style: Record<string, any>, prefix: string | string[]) {\n  const prefixArray = typeof prefix === 'string' ? [prefix] : prefix;\n  const omitStyle: Record<string, any> = {};\n  Object.keys(style).forEach((key) => {\n    if (!prefixArray.find((p) => key.startsWith(p))) {\n      omitStyle[key] = style[key];\n    }\n  });\n  return omitStyle as T;\n}\n\n/**\n * <zh/> 替换前缀\n *\n * <en/> Replace prefix\n * @param style - <zh/> 样式 | <en/> style\n * @param oldPrefix - <zh/> 旧前缀 | <en/> old prefix\n * @param newPrefix - <zh/> 新前缀 | <en/> new prefix\n * @returns <zh/> 替换前缀后的样式 | <en/> style with replaced prefix\n */\nexport function replacePrefix<T extends object>(style: T, oldPrefix: string, newPrefix: string) {\n  return Object.entries(style).reduce(\n    (acc, [key, value]) => {\n      if (startsWith(key, oldPrefix)) {\n        acc[addPrefix(removePrefix(key, oldPrefix, false), newPrefix) as keyof typeof acc] = value;\n      } else {\n        acc[key as keyof typeof acc] = value;\n      }\n      return acc;\n    },\n    {} as ReplacePrefix<T, typeof oldPrefix, typeof newPrefix>,\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}