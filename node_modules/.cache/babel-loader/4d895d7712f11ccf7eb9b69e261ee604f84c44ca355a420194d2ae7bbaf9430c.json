{"ast":null,"code":"/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  }\n  // 若未指定 type ，则返回所有邻居\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\nexport var uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n  var random1 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  var random2 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  return \"\".concat(index, \"-\").concat(random1).concat(random2);\n};","map":{"version":3,"names":["getNeighbors","nodeId","edges","type","currentEdges","filter","edge","source","target","neighhborsConverter_1","map","neighhborsConverter_2","neighhborsConverter","getOutEdgesNodeId","getEdgesByNodeId","uniqueId","index","random1","concat","Math","random","split","substr","random2"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/util.js"],"sourcesContent":["/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  }\n  // 若未指定 type ，则返回所有邻居\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\nexport var uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n  var random1 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  var random2 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  return \"\".concat(index, \"-\").concat(random1).concat(random2);\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,YAAY,GAAG,SAASA,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACnE,IAAID,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,EAAE;EACZ;EACA,IAAIE,YAAY,GAAGF,KAAK,CAACG,MAAM,CAAC,UAAUC,IAAI,EAAE;IAC9C,OAAOA,IAAI,CAACC,MAAM,KAAKN,MAAM,IAAIK,IAAI,CAACE,MAAM,KAAKP,MAAM;EACzD,CAAC,CAAC;EACF,IAAIE,IAAI,KAAK,QAAQ,EAAE;IACrB;IACA,IAAIM,qBAAqB,GAAG,SAASA,qBAAqBA,CAACH,IAAI,EAAE;MAC/D,OAAOA,IAAI,CAACC,MAAM,KAAKN,MAAM;IAC/B,CAAC;IACD,OAAOG,YAAY,CAACC,MAAM,CAACI,qBAAqB,CAAC,CAACC,GAAG,CAAC,UAAUJ,IAAI,EAAE;MACpE,OAAOA,IAAI,CAACE,MAAM;IACpB,CAAC,CAAC;EACJ;EACA,IAAIL,IAAI,KAAK,QAAQ,EAAE;IACrB;IACA,IAAIQ,qBAAqB,GAAG,SAASA,qBAAqBA,CAACL,IAAI,EAAE;MAC/D,OAAOA,IAAI,CAACE,MAAM,KAAKP,MAAM;IAC/B,CAAC;IACD,OAAOG,YAAY,CAACC,MAAM,CAACM,qBAAqB,CAAC,CAACD,GAAG,CAAC,UAAUJ,IAAI,EAAE;MACpE,OAAOA,IAAI,CAACC,MAAM;IACpB,CAAC,CAAC;EACJ;EACA;EACA,IAAIK,mBAAmB,GAAG,SAASA,mBAAmBA,CAACN,IAAI,EAAE;IAC3D,OAAOA,IAAI,CAACC,MAAM,KAAKN,MAAM,GAAGK,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACC,MAAM;EAC3D,CAAC;EACD,OAAOH,YAAY,CAACM,GAAG,CAACE,mBAAmB,CAAC;AAC9C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACZ,MAAM,EAAEC,KAAK,EAAE;EACvE,OAAOA,KAAK,CAACG,MAAM,CAAC,UAAUC,IAAI,EAAE;IAClC,OAAOA,IAAI,CAACC,MAAM,KAAKN,MAAM;EAC/B,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIa,gBAAgB,GAAG,SAASA,gBAAgBA,CAACb,MAAM,EAAEC,KAAK,EAAE;EACrE,OAAOA,KAAK,CAACG,MAAM,CAAC,UAAUC,IAAI,EAAE;IAClC,OAAOA,IAAI,CAACC,MAAM,KAAKN,MAAM,IAAIK,IAAI,CAACE,MAAM,KAAKP,MAAM;EACzD,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,IAAIc,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;EAC7C,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,CAAC;EACX;EACA,IAAIC,OAAO,GAAG,EAAE,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACjE,IAAIC,OAAO,GAAG,EAAE,CAACL,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACjE,OAAO,EAAE,CAACJ,MAAM,CAACF,KAAK,EAAE,GAAG,CAAC,CAACE,MAAM,CAACD,OAAO,CAAC,CAACC,MAAM,CAACK,OAAO,CAAC;AAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}