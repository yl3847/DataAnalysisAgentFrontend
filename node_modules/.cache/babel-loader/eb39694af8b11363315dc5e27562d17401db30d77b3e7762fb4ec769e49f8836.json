{"ast":null,"code":"import { CellShape, CellHollow } from '../shape';\nimport { MaybeZeroX, MaybeZeroY, MaybeZeroPadding } from '../transform';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip2d } from './utils';\nconst shape = {\n  cell: CellShape,\n  hollow: CellHollow\n};\n/**\n * Convert value for each channel to Cell shapes.\n * Calc the bbox of each Cell based on x, y and r.\n * This is for allowing their radius can be affected by coordinate(e.g. fisheye).\n */\nexport const Cell = () => {\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y\n    } = value;\n    const x = scale.x;\n    const y = scale.y;\n    const P = Array.from(index, i => {\n      const width = x.getBandWidth(x.invert(+X[i]));\n      const height = y.getBandWidth(y.invert(+Y[i]));\n      const x1 = +X[i];\n      const y1 = +Y[i];\n      const p1 = [x1, y1];\n      const p2 = [x1 + width, y1];\n      const p3 = [x1 + width, y1 + height];\n      const p4 = [x1, y1 + height];\n      return [p1, p2, p3, p4].map(d => coordinate.map(d));\n    });\n    return [index, P];\n  };\n};\nCell.props = {\n  defaultShape: 'cell',\n  defaultLabelShape: 'label',\n  shape,\n  composite: false,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true,\n    scale: 'band'\n  }, {\n    name: 'y',\n    required: true,\n    scale: 'band'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeZeroX\n  }, {\n    type: MaybeZeroY\n  }, {\n    type: MaybeZeroPadding\n  }],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["CellShape","CellHollow","MaybeZeroX","MaybeZeroY","MaybeZeroPadding","baseGeometryChannels","basePostInference","basePreInference","tooltip2d","shape","cell","hollow","Cell","index","scale","value","coordinate","x","X","y","Y","P","Array","from","i","width","getBandWidth","invert","height","x1","y1","p1","p2","p3","p4","map","d","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","type","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/cell.ts"],"sourcesContent":["import { Band } from '@antv/scale';\nimport { MarkComponent as MC, Vector2 } from '../runtime';\nimport { CellMark } from '../spec';\nimport { CellShape, CellHollow } from '../shape';\nimport { MaybeZeroX, MaybeZeroY, MaybeZeroPadding } from '../transform';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  tooltip2d,\n} from './utils';\n\nconst shape = {\n  cell: CellShape,\n  hollow: CellHollow,\n};\n\nexport type CellOptions = Omit<CellMark, 'type'>;\n\n/**\n * Convert value for each channel to Cell shapes.\n * Calc the bbox of each Cell based on x, y and r.\n * This is for allowing their radius can be affected by coordinate(e.g. fisheye).\n */\nexport const Cell: MC<CellOptions> = () => {\n  return (index, scale, value, coordinate) => {\n    const { x: X, y: Y } = value;\n    const x = scale.x as Band;\n    const y = scale.y as Band;\n    const P = Array.from(index, (i) => {\n      const width = x.getBandWidth(x.invert(+X[i]));\n      const height = y.getBandWidth(y.invert(+Y[i]));\n      const x1 = +X[i];\n      const y1 = +Y[i];\n      const p1 = [x1, y1];\n      const p2 = [x1 + width, y1];\n      const p3 = [x1 + width, y1 + height];\n      const p4 = [x1, y1 + height];\n      return [p1, p2, p3, p4].map((d) => coordinate.map(d)) as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nCell.props = {\n  defaultShape: 'cell',\n  defaultLabelShape: 'label',\n  shape,\n  composite: false,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', required: true, scale: 'band' },\n    { name: 'y', required: true, scale: 'band' },\n  ],\n  preInference: [\n    ...basePreInference(),\n    { type: MaybeZeroX },\n    { type: MaybeZeroY },\n    { type: MaybeZeroPadding },\n  ],\n  postInference: [...basePostInference(), ...tooltip2d()],\n};\n"],"mappings":"AAGA,SAASA,SAAS,EAAEC,UAAU,QAAQ,UAAU;AAChD,SAASC,UAAU,EAAEC,UAAU,EAAEC,gBAAgB,QAAQ,cAAc;AACvE,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,SAAS,QACJ,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEV,SAAS;EACfW,MAAM,EAAEV;CACT;AAID;;;;;AAKA,OAAO,MAAMW,IAAI,GAAoBA,CAAA,KAAK;EACxC,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAM;MAAEC,CAAC,EAAEC,CAAC;MAAEC,CAAC,EAAEC;IAAC,CAAE,GAAGL,KAAK;IAC5B,MAAME,CAAC,GAAGH,KAAK,CAACG,CAAS;IACzB,MAAME,CAAC,GAAGL,KAAK,CAACK,CAAS;IACzB,MAAME,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACV,KAAK,EAAGW,CAAC,IAAI;MAChC,MAAMC,KAAK,GAAGR,CAAC,CAACS,YAAY,CAACT,CAAC,CAACU,MAAM,CAAC,CAACT,CAAC,CAACM,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMI,MAAM,GAAGT,CAAC,CAACO,YAAY,CAACP,CAAC,CAACQ,MAAM,CAAC,CAACP,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC;MAC9C,MAAMK,EAAE,GAAG,CAACX,CAAC,CAACM,CAAC,CAAC;MAChB,MAAMM,EAAE,GAAG,CAACV,CAAC,CAACI,CAAC,CAAC;MAChB,MAAMO,EAAE,GAAG,CAACF,EAAE,EAAEC,EAAE,CAAC;MACnB,MAAME,EAAE,GAAG,CAACH,EAAE,GAAGJ,KAAK,EAAEK,EAAE,CAAC;MAC3B,MAAMG,EAAE,GAAG,CAACJ,EAAE,GAAGJ,KAAK,EAAEK,EAAE,GAAGF,MAAM,CAAC;MACpC,MAAMM,EAAE,GAAG,CAACL,EAAE,EAAEC,EAAE,GAAGF,MAAM,CAAC;MAC5B,OAAO,CAACG,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKpB,UAAU,CAACmB,GAAG,CAACC,CAAC,CAAC,CAAc;IACpE,CAAC,CAAC;IACF,OAAO,CAACvB,KAAK,EAAEQ,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDT,IAAI,CAACyB,KAAK,GAAG;EACXC,YAAY,EAAE,MAAM;EACpBC,iBAAiB,EAAE,OAAO;EAC1B9B,KAAK;EACL+B,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,CACR,GAAGpC,oBAAoB,CAAC;IAAEqC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACnC,KAAK;EAAC,CAAE,CAAC,EACvD;IAAEoC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE,IAAI;IAAEhC,KAAK,EAAE;EAAM,CAAE,EAC5C;IAAE+B,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE,IAAI;IAAEhC,KAAK,EAAE;EAAM,CAAE,CAC7C;EACDiC,YAAY,EAAE,CACZ,GAAGxC,gBAAgB,EAAE,EACrB;IAAEyC,IAAI,EAAE9C;EAAU,CAAE,EACpB;IAAE8C,IAAI,EAAE7C;EAAU,CAAE,EACpB;IAAE6C,IAAI,EAAE5C;EAAgB,CAAE,CAC3B;EACD6C,aAAa,EAAE,CAAC,GAAG3C,iBAAiB,EAAE,EAAE,GAAGE,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}