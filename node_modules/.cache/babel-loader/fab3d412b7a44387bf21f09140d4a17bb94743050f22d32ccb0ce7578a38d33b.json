{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport { cloneFormatData, formatNumberFn, formatSizeFn } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nimport { parseSize } from './util/size';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  begin: [0, 0],\n  preventOverlap: true,\n  preventOverlapPadding: 10,\n  condense: false,\n  rows: undefined,\n  cols: undefined,\n  position: undefined,\n  sortBy: 'degree',\n  nodeSize: 30,\n  width: 300,\n  height: 300\n};\n/**\n * <zh/> 网格布局\n *\n * <en/> Grid layout\n */\nexport class GridLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'grid';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericGridLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericGridLayout(true, graph, options);\n    });\n  }\n  genericGridLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n      const {\n        begin = [0, 0],\n        condense,\n        preventOverlapPadding,\n        preventOverlap,\n        rows: propsRows,\n        cols: propsCols,\n        nodeSpacing: paramNodeSpacing,\n        nodeSize: paramNodeSize,\n        width: propsWidth,\n        height: propsHeight,\n        position\n      } = mergedOptions;\n      let {\n        sortBy\n      } = mergedOptions;\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n      // Need no layout if there is no node.\n      if (!n || n === 1) {\n        return handleSingleNodeGraph(graph, assign, begin);\n      }\n      const layoutNodes = nodes.map(node => cloneFormatData(node));\n      if (\n      // `id` should be reserved keyword\n      sortBy !== 'id' && (!isString(sortBy) || layoutNodes[0].data[sortBy] === undefined)) {\n        sortBy = 'degree';\n      }\n      if (sortBy === 'degree') {\n        layoutNodes.sort((n1, n2) => graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n      } else if (sortBy === 'id') {\n        // sort nodes by ID\n        layoutNodes.sort((n1, n2) => {\n          if (isNumber(n2.id) && isNumber(n1.id)) {\n            return n2.id - n1.id;\n          }\n          return `${n1.id}`.localeCompare(`${n2.id}`);\n        });\n      } else {\n        // sort nodes by value\n        layoutNodes.sort((n1, n2) => n2.data[sortBy] - n1.data[sortBy]);\n      }\n      const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n      const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n      const cells = n;\n      const rcs = {\n        rows: propsRows,\n        cols: propsCols\n      };\n      // if rows or columns were set in self, use those values\n      if (propsRows != null && propsCols != null) {\n        rcs.rows = propsRows;\n        rcs.cols = propsCols;\n      } else if (propsRows != null && propsCols == null) {\n        rcs.rows = propsRows;\n        rcs.cols = Math.ceil(cells / rcs.rows);\n      } else if (propsRows == null && propsCols != null) {\n        rcs.cols = propsCols;\n        rcs.rows = Math.ceil(cells / rcs.cols);\n      } else {\n        // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n        // width/height * splits^2 = cells where splits is number of times to split width\n        const splits = Math.sqrt(cells * height / width);\n        rcs.rows = Math.round(splits);\n        rcs.cols = Math.round(width / height * splits);\n      }\n      rcs.rows = Math.max(rcs.rows, 1);\n      rcs.cols = Math.max(rcs.cols, 1);\n      if (rcs.cols * rcs.rows > cells) {\n        // otherwise use the automatic values and adjust accordingly\n        // if rounding was up, see if we can reduce rows or columns\n        const sm = small(rcs);\n        const lg = large(rcs);\n        // reducing the small side takes away the most cells, so try it first\n        if ((sm - 1) * lg >= cells) {\n          small(rcs, sm - 1);\n        } else if ((lg - 1) * sm >= cells) {\n          large(rcs, lg - 1);\n        }\n      } else {\n        // if rounding was too low, add rows or columns\n        while (rcs.cols * rcs.rows < cells) {\n          const sm = small(rcs);\n          const lg = large(rcs);\n          // try to add to larger side first (adds less in multiplication)\n          if ((lg + 1) * sm >= cells) {\n            large(rcs, lg + 1);\n          } else {\n            small(rcs, sm + 1);\n          }\n        }\n      }\n      let cellWidth = condense ? 0 : width / rcs.cols;\n      let cellHeight = condense ? 0 : height / rcs.rows;\n      if (preventOverlap || paramNodeSpacing) {\n        const nodeSpacing = formatNumberFn(10, paramNodeSpacing);\n        const nodeSize = formatSizeFn(30, paramNodeSize, false);\n        layoutNodes.forEach(node => {\n          if (!node.data.x || !node.data.y) {\n            // for bb\n            node.data.x = 0;\n            node.data.y = 0;\n          }\n          const oNode = graph.getNode(node.id);\n          const [nodeW, nodeH] = parseSize(nodeSize(oNode) || 30);\n          const p = nodeSpacing !== undefined ? nodeSpacing(node) : preventOverlapPadding;\n          const w = nodeW + p;\n          const h = nodeH + p;\n          cellWidth = Math.max(cellWidth, w);\n          cellHeight = Math.max(cellHeight, h);\n        });\n      }\n      const cellUsed = {}; // e.g. 'c-0-2' => true\n      // to keep track of current cell position\n      const rc = {\n        row: 0,\n        col: 0\n      };\n      // get a cache of all the manual positions\n      const id2manPos = {};\n      for (let i = 0; i < layoutNodes.length; i++) {\n        const node = layoutNodes[i];\n        let rcPos;\n        if (position) {\n          // TODO: not sure the api name\n          rcPos = position(graph.getNode(node.id));\n        }\n        if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n          // must have at least row or col def'd\n          const pos = {\n            row: rcPos.row,\n            col: rcPos.col\n          };\n          if (pos.col === undefined) {\n            // find unused col\n            pos.col = 0;\n            while (used(cellUsed, pos)) {\n              pos.col++;\n            }\n          } else if (pos.row === undefined) {\n            // find unused row\n            pos.row = 0;\n            while (used(cellUsed, pos)) {\n              pos.row++;\n            }\n          }\n          id2manPos[node.id] = pos;\n          use(cellUsed, pos);\n        }\n        getPos(node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed);\n      }\n      const result = {\n        nodes: layoutNodes,\n        edges\n      };\n      if (assign) {\n        layoutNodes.forEach(node => {\n          graph.mergeNodeData(node.id, {\n            x: node.data.x,\n            y: node.data.y\n          });\n        });\n      }\n      return result;\n    });\n  }\n}\nconst small = (rcs, val) => {\n  let res;\n  const rows = rcs.rows || 5;\n  const cols = rcs.cols || 5;\n  if (val == null) {\n    res = Math.min(rows, cols);\n  } else {\n    const min = Math.min(rows, cols);\n    if (min === rcs.rows) {\n      rcs.rows = val;\n    } else {\n      rcs.cols = val;\n    }\n  }\n  return res;\n};\nconst large = (rcs, val) => {\n  let result;\n  const usedRows = rcs.rows || 5;\n  const usedCols = rcs.cols || 5;\n  if (val == null) {\n    result = Math.max(usedRows, usedCols);\n  } else {\n    const max = Math.max(usedRows, usedCols);\n    if (max === rcs.rows) {\n      rcs.rows = val;\n    } else {\n      rcs.cols = val;\n    }\n  }\n  return result;\n};\nconst used = (cellUsed, rc) => cellUsed[`c-${rc.row}-${rc.col}`] || false;\nconst use = (cellUsed, rc) => cellUsed[`c-${rc.row}-${rc.col}`] = true;\nconst moveToNextCell = (rcs, rc) => {\n  const cols = rcs.cols || 5;\n  rc.col++;\n  if (rc.col >= cols) {\n    rc.col = 0;\n    rc.row++;\n  }\n};\nconst getPos = (node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed) => {\n  let x;\n  let y;\n  // see if we have a manual position set\n  const rcPos = id2manPos[node.id];\n  if (rcPos) {\n    x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n    y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n  } else {\n    // otherwise set automatically\n    while (used(cellUsed, rc)) {\n      moveToNextCell(rcs, rc);\n    }\n    x = rc.col * cellWidth + cellWidth / 2 + begin[0];\n    y = rc.row * cellHeight + cellHeight / 2 + begin[1];\n    use(cellUsed, rc);\n    moveToNextCell(rcs, rc);\n  }\n  node.data.x = x;\n  node.data.y = y;\n};","map":{"version":3,"names":["isNumber","isString","cloneFormatData","formatNumberFn","formatSizeFn","handleSingleNodeGraph","parseSize","DEFAULTS_LAYOUT_OPTIONS","begin","preventOverlap","preventOverlapPadding","condense","rows","undefined","cols","position","sortBy","nodeSize","width","height","GridLayout","constructor","options","id","Object","assign","execute","graph","genericGridLayout","mergedOptions","propsRows","propsCols","nodeSpacing","paramNodeSpacing","paramNodeSize","propsWidth","propsHeight","nodes","getAllNodes","edges","getAllEdges","n","length","layoutNodes","map","node","data","sort","n1","n2","getDegree","localeCompare","window","innerWidth","innerHeight","cells","rcs","Math","ceil","splits","sqrt","round","max","sm","small","lg","large","cellWidth","cellHeight","forEach","x","y","oNode","getNode","nodeW","nodeH","p","w","h","cellUsed","rc","row","col","id2manPos","i","rcPos","pos","used","use","getPos","result","mergeNodeData","val","res","min","usedRows","usedCols","moveToNextCell"],"sources":["../src/grid.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}