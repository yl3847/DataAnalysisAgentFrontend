{"ast":null,"code":"import mix from './mix';\nimport isFunction from './is-function';\nvar extend = function (subclass, superclass, overrides, staticOverrides) {\n  // 如果只提供父类构造函数，则自动生成子类构造函数\n  if (!isFunction(superclass)) {\n    overrides = superclass;\n    superclass = subclass;\n    subclass = function () {};\n  }\n  var create = Object.create ? function (proto, c) {\n    return Object.create(proto, {\n      constructor: {\n        value: c\n      }\n    });\n  } : function (proto, c) {\n    function Tmp() {}\n    Tmp.prototype = proto;\n    var o = new Tmp();\n    o.constructor = c;\n    return o;\n  };\n  var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n  subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n  subclass.superclass = create(superclass.prototype, superclass);\n  mix(superObj, overrides);\n  mix(subclass, staticOverrides);\n  return subclass;\n};\nexport default extend;","map":{"version":3,"names":["mix","isFunction","extend","subclass","superclass","overrides","staticOverrides","create","Object","proto","c","constructor","value","Tmp","prototype","o","superObj"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/node_modules/@antv/util/src/extend.ts"],"sourcesContent":["import mix from './mix';\nimport isFunction from './is-function';\n\nconst extend = function(subclass, superclass, overrides?, staticOverrides?) {\n  // 如果只提供父类构造函数，则自动生成子类构造函数\n  if (!isFunction(superclass)) {\n    overrides = superclass;\n    superclass = subclass;\n    subclass = function() {};\n  }\n\n  const create = Object.create ?\n    function(proto, c) {\n      return Object.create(proto, {\n        constructor: {\n          value: c\n        }\n      });\n    } :\n    function(proto, c) {\n      function Tmp() {}\n      Tmp.prototype = proto;\n      const o = new Tmp();\n      o.constructor = c;\n      return o;\n    };\n\n  const superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n  subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n  subclass.superclass = create(superclass.prototype, superclass);\n  mix(superObj, overrides);\n  mix(subclass, staticOverrides);\n  return subclass;\n};\n\nexport default extend;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,UAAU,MAAM,eAAe;AAEtC,IAAMC,MAAM,GAAG,SAAAA,CAASC,QAAQ,EAAEC,UAAU,EAAEC,SAAU,EAAEC,eAAgB;EACxE;EACA,IAAI,CAACL,UAAU,CAACG,UAAU,CAAC,EAAE;IAC3BC,SAAS,GAAGD,UAAU;IACtBA,UAAU,GAAGD,QAAQ;IACrBA,QAAQ,GAAG,SAAAA,CAAA,GAAY,CAAC;;EAG1B,IAAMI,MAAM,GAAGC,MAAM,CAACD,MAAM,GAC1B,UAASE,KAAK,EAAEC,CAAC;IACf,OAAOF,MAAM,CAACD,MAAM,CAACE,KAAK,EAAE;MAC1BE,WAAW,EAAE;QACXC,KAAK,EAAEF;;KAEV,CAAC;EACJ,CAAC,GACD,UAASD,KAAK,EAAEC,CAAC;IACf,SAASG,GAAGA,CAAA,GAAI;IAChBA,GAAG,CAACC,SAAS,GAAGL,KAAK;IACrB,IAAMM,CAAC,GAAG,IAAIF,GAAG,EAAE;IACnBE,CAAC,CAACJ,WAAW,GAAGD,CAAC;IACjB,OAAOK,CAAC;EACV,CAAC;EAEH,IAAMC,QAAQ,GAAGT,MAAM,CAACH,UAAU,CAACU,SAAS,EAAEX,QAAQ,CAAC,CAAC,CAAC;EACzDA,QAAQ,CAACW,SAAS,GAAGd,GAAG,CAACgB,QAAQ,EAAEb,QAAQ,CAACW,SAAS,CAAC,CAAC,CAAC;EACxDX,QAAQ,CAACC,UAAU,GAAGG,MAAM,CAACH,UAAU,CAACU,SAAS,EAAEV,UAAU,CAAC;EAC9DJ,GAAG,CAACgB,QAAQ,EAAEX,SAAS,CAAC;EACxBL,GAAG,CAACG,QAAQ,EAAEG,eAAe,CAAC;EAC9B,OAAOH,QAAQ;AACjB,CAAC;AAED,eAAeD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}