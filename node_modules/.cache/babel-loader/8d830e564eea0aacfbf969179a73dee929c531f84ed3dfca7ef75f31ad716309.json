{"ast":null,"code":"import { secondReg, dateReg } from '../constants/time';\n// 获取所有属性并排序\nexport var getAllSortProperties = function getAllSortProperties(nodes, n) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n  if (n === void 0) {\n    n = 100;\n  }\n  var propertyKeyInfo = {};\n  nodes.forEach(function (node) {\n    if (!node.properties) {\n      return;\n    }\n    Object.keys(node.properties).forEach(function (propertyKey) {\n      // 目前过滤只保留可以转成数值型的或日期型的, todo: 统一转成one-hot特征向量或者embedding\n      if (propertyKey === 'id' || !\"\".concat(node.properties[propertyKey]).match(secondReg) && !\"\".concat(node.properties[propertyKey]).match(dateReg) && isNaN(Number(node.properties[propertyKey]))) {\n        if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n          delete propertyKeyInfo[propertyKey];\n        }\n        return;\n      }\n      if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n        propertyKeyInfo[propertyKey] += 1;\n      } else {\n        propertyKeyInfo[propertyKey] = 1;\n      }\n    });\n  });\n  // 取top50的属性\n  var sortKeys = Object.keys(propertyKeyInfo).sort(function (a, b) {\n    return propertyKeyInfo[b] - propertyKeyInfo[a];\n  });\n  return sortKeys.length < n ? sortKeys : sortKeys.slice(0, n);\n};\nvar processProperty = function processProperty(properties, propertyKeys) {\n  return propertyKeys.map(function (key) {\n    if (properties.hasOwnProperty(key)) {\n      // // 可以转成数值的直接转成数值\n      // if (!isNaN(Number(properties[key]))) {\n      //   return Number(properties[key]);\n      // }\n      // // 时间型的转成时间戳\n      // if (properties[key].match(secondReg) || properties[key].match(dateReg)) {\n      //   // @ts-ignore\n      //   return Number(Date.parse(new Date(properties[key]))) / 1000;\n      // }\n      return properties[key];\n    }\n    return 0;\n  });\n};\n// 获取属性特征权重\nexport var getPropertyWeight = function getPropertyWeight(nodes) {\n  var propertyKeys = getAllSortProperties(nodes);\n  var allPropertiesWeight = [];\n  for (var i = 0; i < nodes.length; i++) {\n    allPropertiesWeight[i] = processProperty(nodes[i].properties, propertyKeys);\n  }\n  return allPropertiesWeight;\n};\n// 获取所有节点的属性集合\nexport var getAllProperties = function getAllProperties(nodes, key) {\n  if (key === void 0) {\n    key = undefined;\n  }\n  var allProperties = [];\n  nodes.forEach(function (node) {\n    if (key === undefined) {\n      allProperties.push(node);\n    }\n    if (node[key] !== undefined) {\n      allProperties.push(node[key]);\n    }\n  });\n  return allProperties;\n};\nexport default {\n  getAllSortProperties: getAllSortProperties,\n  getPropertyWeight: getPropertyWeight,\n  getAllProperties: getAllProperties\n};","map":{"version":3,"names":["secondReg","dateReg","getAllSortProperties","nodes","n","propertyKeyInfo","forEach","node","properties","Object","keys","propertyKey","concat","match","isNaN","Number","hasOwnProperty","sortKeys","sort","a","b","length","slice","processProperty","propertyKeys","map","key","getPropertyWeight","allPropertiesWeight","i","getAllProperties","undefined","allProperties","push"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/utils/node-properties.js"],"sourcesContent":["import { secondReg, dateReg } from '../constants/time';\n// 获取所有属性并排序\nexport var getAllSortProperties = function getAllSortProperties(nodes, n) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n  if (n === void 0) {\n    n = 100;\n  }\n  var propertyKeyInfo = {};\n  nodes.forEach(function (node) {\n    if (!node.properties) {\n      return;\n    }\n    Object.keys(node.properties).forEach(function (propertyKey) {\n      // 目前过滤只保留可以转成数值型的或日期型的, todo: 统一转成one-hot特征向量或者embedding\n      if (propertyKey === 'id' || !\"\".concat(node.properties[propertyKey]).match(secondReg) && !\"\".concat(node.properties[propertyKey]).match(dateReg) && isNaN(Number(node.properties[propertyKey]))) {\n        if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n          delete propertyKeyInfo[propertyKey];\n        }\n        return;\n      }\n      if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n        propertyKeyInfo[propertyKey] += 1;\n      } else {\n        propertyKeyInfo[propertyKey] = 1;\n      }\n    });\n  });\n  // 取top50的属性\n  var sortKeys = Object.keys(propertyKeyInfo).sort(function (a, b) {\n    return propertyKeyInfo[b] - propertyKeyInfo[a];\n  });\n  return sortKeys.length < n ? sortKeys : sortKeys.slice(0, n);\n};\nvar processProperty = function processProperty(properties, propertyKeys) {\n  return propertyKeys.map(function (key) {\n    if (properties.hasOwnProperty(key)) {\n      // // 可以转成数值的直接转成数值\n      // if (!isNaN(Number(properties[key]))) {\n      //   return Number(properties[key]);\n      // }\n      // // 时间型的转成时间戳\n      // if (properties[key].match(secondReg) || properties[key].match(dateReg)) {\n      //   // @ts-ignore\n      //   return Number(Date.parse(new Date(properties[key]))) / 1000;\n      // }\n      return properties[key];\n    }\n    return 0;\n  });\n};\n// 获取属性特征权重\nexport var getPropertyWeight = function getPropertyWeight(nodes) {\n  var propertyKeys = getAllSortProperties(nodes);\n  var allPropertiesWeight = [];\n  for (var i = 0; i < nodes.length; i++) {\n    allPropertiesWeight[i] = processProperty(nodes[i].properties, propertyKeys);\n  }\n  return allPropertiesWeight;\n};\n// 获取所有节点的属性集合\nexport var getAllProperties = function getAllProperties(nodes, key) {\n  if (key === void 0) {\n    key = undefined;\n  }\n  var allProperties = [];\n  nodes.forEach(function (node) {\n    if (key === undefined) {\n      allProperties.push(node);\n    }\n    if (node[key] !== undefined) {\n      allProperties.push(node[key]);\n    }\n  });\n  return allProperties;\n};\nexport default {\n  getAllSortProperties: getAllSortProperties,\n  getPropertyWeight: getPropertyWeight,\n  getAllProperties: getAllProperties\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}