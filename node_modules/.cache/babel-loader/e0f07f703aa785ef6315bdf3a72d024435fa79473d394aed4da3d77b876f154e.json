{"ast":null,"code":"import { print } from '../utils/print';\nimport { EXTENSION_REGISTRY } from './store';\n/**\n * <zh/> 注册一个新的扩展。\n *\n * <en/> Registers a new extension.\n * @param category\n * <zh/> 扩展要注册的分类，目前支持注册的扩展分类有：{@link ExtensionCategory}\n *\n * <en/> The category under which the extension is to be registered, see {@link ExtensionCategory}\n * @param type\n * <zh/> 要注册的扩展的类型，将作为使用扩展时的标识\n *\n * <en/> Extension type that used as an identifier when mounting the extension on a graph\n * @param Ctor\n * <zh/> 要注册的扩展类，在使用时创建实例\n *\n * <en/> Whether to override the registered extension\n * @remarks\n * <zh/> 内置扩展在项目导入时会自动注册。对于非内置扩展，可以通过 `register` 方法手动注册。扩展只需要注册一次，即可在项目的任何位置使用。\n *\n * <en/> Built-in extensions are automatically registered when the project is imported. For non-built-in extensions, you can manually register them using the `register` method. Extensions only need to be registered once and can be used anywhere in the project.\n * @example\n * ```ts\n * import { register, BaseNode } from '@antv/g6';\n *\n * class CircleNode extends BaseNode {}\n *\n * register('node', 'circle-node', CircleNode);\n * ```\n * @public\n */\nexport function register(category, type, Ctor) {\n  const ext = EXTENSION_REGISTRY[category][type];\n  if (ext) {\n    print.warn(`The extension ${type} of ${category} has been registered before, and will be overridden.`);\n  }\n  Object.assign(EXTENSION_REGISTRY[category], {\n    [type]: Ctor\n  });\n}","map":{"version":3,"names":["print","EXTENSION_REGISTRY","register","category","type","Ctor","ext","warn","Object","assign"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/registry/register.ts"],"sourcesContent":["import type { ExtensionCategory } from '../constants';\nimport type { Loosen } from '../types';\nimport { print } from '../utils/print';\nimport { EXTENSION_REGISTRY } from './store';\nimport type { ExtensionRegistry } from './types';\n\n/**\n * <zh/> 注册一个新的扩展。\n *\n * <en/> Registers a new extension.\n * @param category\n * <zh/> 扩展要注册的分类，目前支持注册的扩展分类有：{@link ExtensionCategory}\n *\n * <en/> The category under which the extension is to be registered, see {@link ExtensionCategory}\n * @param type\n * <zh/> 要注册的扩展的类型，将作为使用扩展时的标识\n *\n * <en/> Extension type that used as an identifier when mounting the extension on a graph\n * @param Ctor\n * <zh/> 要注册的扩展类，在使用时创建实例\n *\n * <en/> Whether to override the registered extension\n * @remarks\n * <zh/> 内置扩展在项目导入时会自动注册。对于非内置扩展，可以通过 `register` 方法手动注册。扩展只需要注册一次，即可在项目的任何位置使用。\n *\n * <en/> Built-in extensions are automatically registered when the project is imported. For non-built-in extensions, you can manually register them using the `register` method. Extensions only need to be registered once and can be used anywhere in the project.\n * @example\n * ```ts\n * import { register, BaseNode } from '@antv/g6';\n *\n * class CircleNode extends BaseNode {}\n *\n * register('node', 'circle-node', CircleNode);\n * ```\n * @public\n */\nexport function register<T extends ExtensionCategory>(\n  category: Loosen<T>,\n  type: string,\n  Ctor: ExtensionRegistry[T][string],\n) {\n  const ext = EXTENSION_REGISTRY[category][type];\n  if (ext) {\n    print.warn(`The extension ${type} of ${category} has been registered before, and will be overridden.`);\n  }\n\n  Object.assign(EXTENSION_REGISTRY[category]!, { [type]: Ctor });\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,kBAAkB,QAAQ,SAAS;AAG5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAM,SAAUC,QAAQA,CACtBC,QAAmB,EACnBC,IAAY,EACZC,IAAkC;EAElC,MAAMC,GAAG,GAAGL,kBAAkB,CAACE,QAAQ,CAAC,CAACC,IAAI,CAAC;EAC9C,IAAIE,GAAG,EAAE;IACPN,KAAK,CAACO,IAAI,CAAC,iBAAiBH,IAAI,OAAOD,QAAQ,sDAAsD,CAAC;EACxG;EAEAK,MAAM,CAACC,MAAM,CAACR,kBAAkB,CAACE,QAAQ,CAAE,EAAE;IAAE,CAACC,IAAI,GAAGC;EAAI,CAAE,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}