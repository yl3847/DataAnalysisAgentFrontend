{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { dfs } from './traverse';\n/**\n * <zh/> 将树数据转换为图数据\n *\n * <en/> Convert tree data to graph data\n * @param treeData - <zh/> 树数据 | <en/> Tree data\n * @param getter - <zh/> 获取节点和边的方法 | <en/> Methods to get nodes and edges\n * @returns <zh/> 图数据 | <en/> Graph data\n */\nexport function treeToGraphData(treeData, getter) {\n  const {\n    getNodeData = (datum, depth) => {\n      datum.depth = depth;\n      if (!datum.children) return datum;\n      const {\n          children\n        } = datum,\n        restDatum = __rest(datum, [\"children\"]);\n      return Object.assign(Object.assign({}, restDatum), {\n        children: children.map(child => child.id)\n      });\n    },\n    getEdgeData = (source, target) => ({\n      source: source.id,\n      target: target.id\n    }),\n    getChildren = datum => datum.children || []\n  } = getter || {};\n  const nodes = [];\n  const edges = [];\n  dfs(treeData, (node, depth) => {\n    nodes.push(getNodeData(node, depth));\n    const children = getChildren(node);\n    for (const child of children) {\n      edges.push(getEdgeData(node, child));\n    }\n  }, node => getChildren(node), 'TB');\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["dfs","treeToGraphData","treeData","getter","getNodeData","datum","depth","children","restDatum","__rest","Object","assign","map","child","id","getEdgeData","source","target","getChildren","nodes","edges","node","push"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/tree.ts"],"sourcesContent":["import type { EdgeData, GraphData, NodeData } from '../spec';\nimport type { TreeData } from '../types';\nimport { dfs } from './traverse';\n\ntype TreeDataGetter = {\n  getNodeData?: (datum: TreeData, depth: number) => NodeData;\n  getEdgeData?: (source: TreeData, target: TreeData) => EdgeData;\n  getChildren?: (datum: TreeData) => TreeData[];\n};\n\n/**\n * <zh/> 将树数据转换为图数据\n *\n * <en/> Convert tree data to graph data\n * @param treeData - <zh/> 树数据 | <en/> Tree data\n * @param getter - <zh/> 获取节点和边的方法 | <en/> Methods to get nodes and edges\n * @returns <zh/> 图数据 | <en/> Graph data\n */\nexport function treeToGraphData(treeData: TreeData, getter?: TreeDataGetter): GraphData {\n  const {\n    getNodeData = (datum: TreeData, depth: number) => {\n      datum.depth = depth;\n      if (!datum.children) return datum as NodeData;\n      const { children, ...restDatum } = datum;\n      return { ...restDatum, children: children.map((child) => child.id) } as NodeData;\n    },\n    getEdgeData = (source: TreeData, target: TreeData) => ({ source: source.id, target: target.id }),\n    getChildren = (datum: TreeData) => datum.children || [],\n  } = getter || {};\n\n  const nodes: NodeData[] = [];\n  const edges: EdgeData[] = [];\n\n  dfs(\n    treeData,\n    (node, depth) => {\n      nodes.push(getNodeData(node, depth));\n      const children = getChildren(node);\n      for (const child of children) {\n        edges.push(getEdgeData(node, child));\n      }\n    },\n    (node) => getChildren(node),\n    'TB',\n  );\n\n  return { nodes, edges };\n}\n"],"mappings":";;;;;;;;AAEA,SAASA,GAAG,QAAQ,YAAY;AAQhC;;;;;;;;AAQA,OAAM,SAAUC,eAAeA,CAACC,QAAkB,EAAEC,MAAuB;EACzE,MAAM;IACJC,WAAW,GAAGA,CAACC,KAAe,EAAEC,KAAa,KAAI;MAC/CD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACnB,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE,OAAOF,KAAiB;MAC7C,MAAM;UAAEE;QAAQ,IAAmBF,KAAK;QAAnBG,SAAS,GAAAC,MAAA,CAAKJ,KAAK,EAAlC,YAA0B,CAAQ;MACxC,OAAOK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAKH,SAAS;QAAED,QAAQ,EAAEA,QAAQ,CAACK,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,EAAE;MAAC,EAAc;IAClF,CAAC;IACDC,WAAW,GAAGA,CAACC,MAAgB,EAAEC,MAAgB,MAAM;MAAED,MAAM,EAAEA,MAAM,CAACF,EAAE;MAAEG,MAAM,EAAEA,MAAM,CAACH;IAAE,CAAE,CAAC;IAChGI,WAAW,GAAIb,KAAe,IAAKA,KAAK,CAACE,QAAQ,IAAI;EAAE,CACxD,GAAGJ,MAAM,IAAI,EAAE;EAEhB,MAAMgB,KAAK,GAAe,EAAE;EAC5B,MAAMC,KAAK,GAAe,EAAE;EAE5BpB,GAAG,CACDE,QAAQ,EACR,CAACmB,IAAI,EAAEf,KAAK,KAAI;IACda,KAAK,CAACG,IAAI,CAAClB,WAAW,CAACiB,IAAI,EAAEf,KAAK,CAAC,CAAC;IACpC,MAAMC,QAAQ,GAAGW,WAAW,CAACG,IAAI,CAAC;IAClC,KAAK,MAAMR,KAAK,IAAIN,QAAQ,EAAE;MAC5Ba,KAAK,CAACE,IAAI,CAACP,WAAW,CAACM,IAAI,EAAER,KAAK,CAAC,CAAC;IACtC;EACF,CAAC,EACAQ,IAAI,IAAKH,WAAW,CAACG,IAAI,CAAC,EAC3B,IAAI,CACL;EAED,OAAO;IAAEF,KAAK;IAAEC;EAAK,CAAE;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}