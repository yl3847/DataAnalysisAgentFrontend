{"ast":null,"code":"import { Ellipse as GEllipse } from '@antv/g';\nimport { ICON_SIZE_RATIO } from '../../constants/element';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseNode } from './base-node';\n/**\n * <zh/> 椭圆节点\n *\n * <en/> Ellipse node\n */\nexport class Ellipse extends BaseNode {\n  constructor(options) {\n    super(mergeOptions({\n      style: Ellipse.defaultStyleProps\n    }, options));\n  }\n  drawKeyShape(attributes, container) {\n    return this.upsert('key', GEllipse, this.getKeyStyle(attributes), container);\n  }\n  getKeyStyle(attributes) {\n    const keyStyle = super.getKeyStyle(attributes);\n    const [majorAxis, minorAxis] = this.getSize(attributes);\n    return Object.assign(Object.assign({}, keyStyle), {\n      rx: majorAxis / 2,\n      ry: minorAxis / 2\n    });\n  }\n  getIconStyle(attributes) {\n    const style = super.getIconStyle(attributes);\n    const {\n      rx,\n      ry\n    } = this.getShape('key').attributes;\n    const size = Math.min(+rx, +ry) * 2 * ICON_SIZE_RATIO;\n    return style ? Object.assign({\n      width: size,\n      height: size\n    }, style) : false;\n  }\n  getIntersectPoint(point, useExtendedLine = false) {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}\nEllipse.defaultStyleProps = {\n  size: [45, 35]\n};","map":{"version":3,"names":["Ellipse","GEllipse","ICON_SIZE_RATIO","getEllipseIntersectPoint","mergeOptions","BaseNode","constructor","options","style","defaultStyleProps","drawKeyShape","attributes","container","upsert","getKeyStyle","keyStyle","majorAxis","minorAxis","getSize","Object","assign","rx","ry","getIconStyle","getShape","size","Math","min","width","height","getIntersectPoint","point","useExtendedLine","keyShapeBounds","getBounds"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/nodes/ellipse.ts"],"sourcesContent":["import type { DisplayObjectConfig, EllipseStyleProps as GEllipseStyleProps, Group } from '@antv/g';\nimport { Ellipse as GEllipse } from '@antv/g';\nimport { ICON_SIZE_RATIO } from '../../constants/element';\nimport type { Point } from '../../types';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { mergeOptions } from '../../utils/style';\nimport type { IconStyleProps } from '../shapes';\nimport type { BaseNodeStyleProps } from './base-node';\nimport { BaseNode } from './base-node';\n\n/**\n * <zh/> 椭圆节点样式配置项\n *\n * <en/> Ellipse node style props\n */\nexport interface EllipseStyleProps extends BaseNodeStyleProps {}\n\n/**\n * <zh/> 椭圆节点\n *\n * <en/> Ellipse node\n */\nexport class Ellipse extends BaseNode {\n  static defaultStyleProps: Partial<EllipseStyleProps> = {\n    size: [45, 35],\n  };\n\n  constructor(options: DisplayObjectConfig<EllipseStyleProps>) {\n    super(mergeOptions({ style: Ellipse.defaultStyleProps }, options));\n  }\n\n  protected drawKeyShape(attributes: Required<EllipseStyleProps>, container: Group) {\n    return this.upsert('key', GEllipse, this.getKeyStyle(attributes), container);\n  }\n\n  protected getKeyStyle(attributes: Required<EllipseStyleProps>): GEllipseStyleProps {\n    const keyStyle = super.getKeyStyle(attributes);\n    const [majorAxis, minorAxis] = this.getSize(attributes);\n    return {\n      ...keyStyle,\n      rx: majorAxis / 2,\n      ry: minorAxis / 2,\n    };\n  }\n\n  protected getIconStyle(attributes: Required<EllipseStyleProps>): false | IconStyleProps {\n    const style = super.getIconStyle(attributes);\n    const { rx, ry } = this.getShape<GEllipse>('key').attributes;\n    const size = Math.min(+rx, +ry) * 2 * ICON_SIZE_RATIO;\n\n    return style ? ({ width: size, height: size, ...style } as IconStyleProps) : false;\n  }\n\n  public getIntersectPoint(point: Point, useExtendedLine = false): Point {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}\n"],"mappings":"AACA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,SAAS;AAC7C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,SAASC,wBAAwB,QAAQ,mBAAmB;AAC5D,SAASC,YAAY,QAAQ,mBAAmB;AAGhD,SAASC,QAAQ,QAAQ,aAAa;AAStC;;;;;AAKA,OAAM,MAAOL,OAAQ,SAAQK,QAAQ;EAKnCC,YAAYC,OAA+C;IACzD,KAAK,CAACH,YAAY,CAAC;MAAEI,KAAK,EAAER,OAAO,CAACS;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EACpE;EAEUG,YAAYA,CAACC,UAAuC,EAAEC,SAAgB;IAC9E,OAAO,IAAI,CAACC,MAAM,CAAC,KAAK,EAAEZ,QAAQ,EAAE,IAAI,CAACa,WAAW,CAACH,UAAU,CAAC,EAAEC,SAAS,CAAC;EAC9E;EAEUE,WAAWA,CAACH,UAAuC;IAC3D,MAAMI,QAAQ,GAAG,KAAK,CAACD,WAAW,CAACH,UAAU,CAAC;IAC9C,MAAM,CAACK,SAAS,EAAEC,SAAS,CAAC,GAAG,IAAI,CAACC,OAAO,CAACP,UAAU,CAAC;IACvD,OAAAQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKL,QAAQ;MACXM,EAAE,EAAEL,SAAS,GAAG,CAAC;MACjBM,EAAE,EAAEL,SAAS,GAAG;IAAC;EAErB;EAEUM,YAAYA,CAACZ,UAAuC;IAC5D,MAAMH,KAAK,GAAG,KAAK,CAACe,YAAY,CAACZ,UAAU,CAAC;IAC5C,MAAM;MAAEU,EAAE;MAAEC;IAAE,CAAE,GAAG,IAAI,CAACE,QAAQ,CAAW,KAAK,CAAC,CAACb,UAAU;IAC5D,MAAMc,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACN,EAAE,EAAE,CAACC,EAAE,CAAC,GAAG,CAAC,GAAGpB,eAAe;IAErD,OAAOM,KAAK,GAAIW,MAAA,CAAAC,MAAA;MAAEQ,KAAK,EAAEH,IAAI;MAAEI,MAAM,EAAEJ;IAAI,GAAKjB,KAAK,CAAqB,GAAG,KAAK;EACpF;EAEOsB,iBAAiBA,CAACC,KAAY,EAAEC,eAAe,GAAG,KAAK;IAC5D,MAAMC,cAAc,GAAG,IAAI,CAACT,QAAQ,CAAC,KAAK,CAAC,CAACU,SAAS,EAAE;IACvD,OAAO/B,wBAAwB,CAAC4B,KAAK,EAAEE,cAAc,EAAED,eAAe,CAAC;EACzE;;AAjCOhC,OAAA,CAAAS,iBAAiB,GAA+B;EACrDgB,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE;CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}