{"ast":null,"code":"import { arcToCubic } from './arc-2-cubic';\nimport { quadToCubic } from './quad-2-cubic';\nimport { lineToCubic } from './line-2-cubic';\nexport function segmentToCubic(segment, params) {\n  var pathCommand = segment[0];\n  var values = segment.slice(1).map(Number);\n  var x = values[0],\n    y = values[1];\n  var args;\n  var px1 = params.x1,\n    py1 = params.y1,\n    px = params.x,\n    py = params.y;\n  if (!'TQ'.includes(pathCommand)) {\n    params.qx = null;\n    params.qy = null;\n  }\n  switch (pathCommand) {\n    case 'M':\n      params.x = x;\n      params.y = y;\n      return segment;\n    case 'A':\n      args = [px1, py1].concat(values);\n      // @ts-ignore\n      return ['C'].concat(arcToCubic(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]));\n    case 'Q':\n      params.qx = x;\n      params.qy = y;\n      args = [px1, py1].concat(values);\n      // @ts-ignore\n      return ['C'].concat(quadToCubic(args[0], args[1], args[2], args[3], args[4], args[5]));\n    case 'L':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(px1, py1, x, y));\n    case 'Z':\n      // prevent NaN from divide 0\n      if (px1 === px && py1 === py) {\n        return ['C', px1, py1, px, py, px, py];\n      }\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(px1, py1, px, py));\n    default:\n  }\n  return segment;\n}","map":{"version":3,"names":["arcToCubic","quadToCubic","lineToCubic","segmentToCubic","segment","params","pathCommand","values","slice","map","Number","x","y","args","px1","x1","py1","y1","px","py","includes","qx","qy","concat"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/process/segment-2-cubic.ts"],"sourcesContent":["import type { PathSegment, ParserParams, CSegment, MSegment, CubicSegment } from '../types';\nimport { arcToCubic } from './arc-2-cubic';\nimport { quadToCubic } from './quad-2-cubic';\nimport { lineToCubic } from './line-2-cubic';\n\nexport function segmentToCubic(segment: PathSegment, params: ParserParams): CSegment | MSegment {\n  const [pathCommand] = segment;\n  const values = segment.slice(1).map(Number);\n  const [x, y] = values;\n  let args: any[];\n  const { x1: px1, y1: py1, x: px, y: py } = params;\n\n  if (!'TQ'.includes(pathCommand)) {\n    params.qx = null;\n    params.qy = null;\n  }\n\n  switch (pathCommand) {\n    case 'M':\n      params.x = x;\n      params.y = y;\n      return segment;\n    case 'A':\n      args = [px1, py1].concat(values);\n      // @ts-ignore\n      return ['C'].concat(\n        arcToCubic(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]),\n      ) as CubicSegment;\n    case 'Q':\n      params.qx = x;\n      params.qy = y;\n      args = [px1, py1].concat(values);\n      // @ts-ignore\n      return ['C'].concat(quadToCubic(args[0], args[1], args[2], args[3], args[4], args[5])) as CubicSegment;\n    case 'L':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(px1, py1, x, y)) as CSegment;\n    case 'Z':\n      // prevent NaN from divide 0\n      if (px1 === px && py1 === py) {\n        return ['C', px1, py1, px, py, px, py];\n      }\n\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(px1, py1, px, py)) as CSegment;\n    default:\n  }\n  return segment as CSegment;\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAM,SAAUC,cAAcA,CAACC,OAAoB,EAAEC,MAAoB;EAChE,IAAAC,WAAW,GAAIF,OAAO,GAAX;EAClB,IAAMG,MAAM,GAAGH,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EACpC,IAAAC,CAAC,GAAOJ,MAAM,GAAb;IAAEK,CAAC,GAAIL,MAAM,GAAV;EACX,IAAIM,IAAW;EACP,IAAIC,GAAG,GAA4BT,MAAM,CAAAU,EAAlC;IAAMC,GAAG,GAAmBX,MAAM,CAAAY,EAAzB;IAAKC,EAAE,GAAYb,MAAM,CAAAM,CAAlB;IAAKQ,EAAE,GAAKd,MAAM,CAAAO,CAAX;EAEtC,IAAI,CAAC,IAAI,CAACQ,QAAQ,CAACd,WAAW,CAAC,EAAE;IAC/BD,MAAM,CAACgB,EAAE,GAAG,IAAI;IAChBhB,MAAM,CAACiB,EAAE,GAAG,IAAI;EAClB;EAEA,QAAQhB,WAAW;IACjB,KAAK,GAAG;MACND,MAAM,CAACM,CAAC,GAAGA,CAAC;MACZN,MAAM,CAACO,CAAC,GAAGA,CAAC;MACZ,OAAOR,OAAO;IAChB,KAAK,GAAG;MACNS,IAAI,GAAG,CAACC,GAAG,EAAEE,GAAG,CAAC,CAACO,MAAM,CAAChB,MAAM,CAAC;MAChC;MACA,OAAO,CAAC,GAAG,CAAC,CAACgB,MAAM,CACjBvB,UAAU,CAACa,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CACrF;IACnB,KAAK,GAAG;MACNR,MAAM,CAACgB,EAAE,GAAGV,CAAC;MACbN,MAAM,CAACiB,EAAE,GAAGV,CAAC;MACbC,IAAI,GAAG,CAACC,GAAG,EAAEE,GAAG,CAAC,CAACO,MAAM,CAAChB,MAAM,CAAC;MAChC;MACA,OAAO,CAAC,GAAG,CAAC,CAACgB,MAAM,CAACtB,WAAW,CAACY,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAiB;IACxG,KAAK,GAAG;MACN;MACA,OAAO,CAAC,GAAG,CAAC,CAACU,MAAM,CAACrB,WAAW,CAACY,GAAG,EAAEE,GAAG,EAAEL,CAAC,EAAEC,CAAC,CAAC,CAAa;IAC9D,KAAK,GAAG;MACN;MACA,IAAIE,GAAG,KAAKI,EAAE,IAAIF,GAAG,KAAKG,EAAE,EAAE;QAC5B,OAAO,CAAC,GAAG,EAAEL,GAAG,EAAEE,GAAG,EAAEE,EAAE,EAAEC,EAAE,EAAED,EAAE,EAAEC,EAAE,CAAC;MACxC;MAEA;MACA,OAAO,CAAC,GAAG,CAAC,CAACI,MAAM,CAACrB,WAAW,CAACY,GAAG,EAAEE,GAAG,EAAEE,EAAE,EAAEC,EAAE,CAAC,CAAa;IAChE;EACF;EACA,OAAOf,OAAmB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}