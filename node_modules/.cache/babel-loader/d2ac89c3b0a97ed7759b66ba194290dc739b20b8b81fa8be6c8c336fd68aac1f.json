{"ast":null,"code":"import { Graph } from '@antv/graphlib';\nimport { isNil } from '@antv/util';\nimport { run as runAcyclic, undo as undoAcyclic } from './acyclic';\nimport { addBorderSegments } from './add-border-segments';\nimport { adjust as adjustCoordinateSystem, undo as undoCoordinateSystem } from './coordinate-system';\nimport { cleanup as cleanupNestingGraph, run as runNestingGraph } from './nesting-graph';\nimport { run as runNormalize, undo as undoNormalize } from './normalize';\nimport { order } from './order';\nimport { initDataOrder } from './order/init-data-order';\nimport { parentDummyChains } from './parent-dummy-chains';\nimport { position } from './position';\nimport { rank } from './rank';\nimport { addDummyNode, asNonCompoundGraph, buildLayerMatrix, intersectRect, normalizeRanks, removeEmptyRanks } from './util';\n// const graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\n// const graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\n// const graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nexport const layout = (g, options) => {\n  const {\n    edgeLabelSpace,\n    keepNodeOrder,\n    prevGraph,\n    rankdir,\n    ranksep\n  } = options;\n  // 如果在原图基础上修改，继承原图的order结果\n  if (!keepNodeOrder && prevGraph) {\n    inheritOrder(g, prevGraph);\n  }\n  const layoutGraph = buildLayoutGraph(g);\n  // 控制是否为边的label留位置（这会影响是否在边中间添加dummy node）\n  if (!!edgeLabelSpace) {\n    options.ranksep = makeSpaceForEdgeLabels(layoutGraph, {\n      rankdir,\n      ranksep\n    });\n  }\n  let dimension;\n  // TODO: 暂时处理层级设置不正确时的异常报错，提示设置正确的层级\n  try {\n    dimension = runLayout(layoutGraph, options);\n  } catch (e) {\n    if (e.message === 'Not possible to find intersection inside of the rectangle') {\n      console.error(\"The following error may be caused by improper layer setting, please make sure your manual layer setting does not violate the graph's structure:\\n\", e);\n      return;\n    }\n    throw e;\n  }\n  updateInputGraph(g, layoutGraph);\n  return dimension;\n};\nconst runLayout = (g, options) => {\n  const {\n    acyclicer,\n    ranker,\n    rankdir = 'tb',\n    nodeOrder,\n    keepNodeOrder,\n    align,\n    nodesep = 50,\n    edgesep = 20,\n    ranksep = 50\n  } = options;\n  removeSelfEdges(g);\n  runAcyclic(g, acyclicer);\n  const {\n    nestingRoot,\n    nodeRankFactor\n  } = runNestingGraph(g);\n  rank(asNonCompoundGraph(g), ranker);\n  injectEdgeLabelProxies(g);\n  removeEmptyRanks(g, nodeRankFactor);\n  cleanupNestingGraph(g, nestingRoot);\n  normalizeRanks(g);\n  assignRankMinMax(g);\n  removeEdgeLabelProxies(g);\n  const dummyChains = [];\n  runNormalize(g, dummyChains);\n  parentDummyChains(g, dummyChains);\n  addBorderSegments(g);\n  if (keepNodeOrder) {\n    initDataOrder(g, nodeOrder);\n  }\n  order(g, keepNodeOrder);\n  insertSelfEdges(g);\n  adjustCoordinateSystem(g, rankdir);\n  position(g, {\n    align,\n    nodesep,\n    edgesep,\n    ranksep\n  });\n  positionSelfEdges(g);\n  removeBorderNodes(g);\n  undoNormalize(g, dummyChains);\n  fixupEdgeLabelCoords(g);\n  undoCoordinateSystem(g, rankdir);\n  const {\n    width,\n    height\n  } = translateGraph(g);\n  assignNodeIntersects(g);\n  reversePointsForReversedEdges(g);\n  undoAcyclic(g);\n  return {\n    width,\n    height\n  };\n};\n/**\n * 继承上一个布局中的order，防止翻转\n * TODO: 暂时没有考虑涉及层级变动的布局，只保证原来布局层级和相对顺序不变\n */\nconst inheritOrder = (currG, prevG) => {\n  currG.getAllNodes().forEach(n => {\n    const node = currG.getNode(n.id);\n    if (prevG.hasNode(n.id)) {\n      const prevNode = prevG.getNode(n.id);\n      node.data.fixorder = prevNode.data._order;\n      delete prevNode.data._order;\n    } else {\n      delete node.data.fixorder;\n    }\n  });\n};\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nconst updateInputGraph = (inputGraph, layoutGraph) => {\n  inputGraph.getAllNodes().forEach(v => {\n    var _a;\n    const inputLabel = inputGraph.getNode(v.id);\n    if (inputLabel) {\n      const layoutLabel = layoutGraph.getNode(v.id);\n      inputLabel.data.x = layoutLabel.data.x;\n      inputLabel.data.y = layoutLabel.data.y;\n      inputLabel.data._order = layoutLabel.data.order;\n      inputLabel.data._rank = layoutLabel.data.rank;\n      if ((_a = layoutGraph.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n        inputLabel.data.width = layoutLabel.data.width;\n        inputLabel.data.height = layoutLabel.data.height;\n      }\n    }\n  });\n  inputGraph.getAllEdges().forEach(e => {\n    const inputLabel = inputGraph.getEdge(e.id);\n    const layoutLabel = layoutGraph.getEdge(e.id);\n    inputLabel.data.points = layoutLabel ? layoutLabel.data.points : [];\n    if (layoutLabel && layoutLabel.data.hasOwnProperty('x')) {\n      inputLabel.data.x = layoutLabel.data.x;\n      inputLabel.data.y = layoutLabel.data.y;\n    }\n  });\n  // inputGraph.graph().width = layoutGraph.graph().width;\n  // inputGraph.graph().height = layoutGraph.graph().height;\n};\nconst nodeNumAttrs = ['width', 'height', 'layer', 'fixorder']; // 需要传入layer, fixOrder作为参数参考\nconst nodeDefaults = {\n  width: 0,\n  height: 0\n};\nconst edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nconst edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r'\n};\nconst edgeAttrs = ['labelpos'];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nconst buildLayoutGraph = inputGraph => {\n  const g = new Graph({\n    tree: []\n  });\n  inputGraph.getAllNodes().forEach(v => {\n    const node = canonicalize(inputGraph.getNode(v.id).data);\n    const defaultNode = Object.assign(Object.assign({}, nodeDefaults), node);\n    const defaultAttrs = selectNumberAttrs(defaultNode, nodeNumAttrs);\n    if (!g.hasNode(v.id)) {\n      g.addNode({\n        id: v.id,\n        data: Object.assign({}, defaultAttrs)\n      });\n    }\n    const parent = inputGraph.hasTreeStructure('combo') ? inputGraph.getParent(v.id, 'combo') : inputGraph.getParent(v.id);\n    if (!isNil(parent)) {\n      if (!g.hasNode(parent.id)) {\n        g.addNode(Object.assign({}, parent));\n      }\n      g.setParent(v.id, parent.id);\n    }\n  });\n  inputGraph.getAllEdges().forEach(e => {\n    const edge = canonicalize(inputGraph.getEdge(e.id).data);\n    const pickedProperties = {};\n    edgeAttrs === null || edgeAttrs === void 0 ? void 0 : edgeAttrs.forEach(key => {\n      if (edge[key] !== undefined) pickedProperties[key] = edge[key];\n    });\n    g.addEdge({\n      id: e.id,\n      source: e.source,\n      target: e.target,\n      data: Object.assign({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), pickedProperties)\n    });\n  });\n  return g;\n};\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nconst makeSpaceForEdgeLabels = (g, options) => {\n  const {\n    ranksep = 0,\n    rankdir\n  } = options;\n  g.getAllNodes().forEach(node => {\n    if (!isNaN(node.data.layer)) {\n      if (!node.data.layer) node.data.layer = 0;\n    }\n  });\n  g.getAllEdges().forEach(edge => {\n    var _a;\n    edge.data.minlen *= 2;\n    if (((_a = edge.data.labelpos) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'c') {\n      if (rankdir === 'TB' || rankdir === 'BT') {\n        edge.data.width += edge.data.labeloffset;\n      } else {\n        edge.data.height += edge.data.labeloffset;\n      }\n    }\n  });\n  return ranksep / 2;\n};\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nconst injectEdgeLabelProxies = g => {\n  g.getAllEdges().forEach(e => {\n    if (e.data.width && e.data.height) {\n      const v = g.getNode(e.source);\n      const w = g.getNode(e.target);\n      const label = {\n        e,\n        rank: (w.data.rank - v.data.rank) / 2 + v.data.rank\n      };\n      addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n};\nconst assignRankMinMax = g => {\n  let maxRank = 0;\n  g.getAllNodes().forEach(node => {\n    var _a, _b;\n    if (node.data.borderTop) {\n      node.data.minRank = (_a = g.getNode(node.data.borderTop)) === null || _a === void 0 ? void 0 : _a.data.rank;\n      node.data.maxRank = (_b = g.getNode(node.data.borderBottom)) === null || _b === void 0 ? void 0 : _b.data.rank;\n      maxRank = Math.max(maxRank, node.data.maxRank || -Infinity);\n    }\n  });\n  return maxRank;\n};\nconst removeEdgeLabelProxies = g => {\n  g.getAllNodes().forEach(node => {\n    if (node.data.dummy === 'edge-proxy') {\n      g.getEdge(node.data.e.id).data.labelRank = node.data.rank;\n      g.removeNode(node.id);\n    }\n  });\n};\nconst translateGraph = (g, options) => {\n  let minX;\n  let maxX = 0;\n  let minY;\n  let maxY = 0;\n  const {\n    marginx: marginX = 0,\n    marginy: marginY = 0\n  } = options || {};\n  const getExtremes = attrs => {\n    if (!attrs.data) return;\n    const x = attrs.data.x;\n    const y = attrs.data.y;\n    const w = attrs.data.width;\n    const h = attrs.data.height;\n    if (!isNaN(x) && !isNaN(w)) {\n      if (minX === undefined) {\n        minX = x - w / 2;\n      }\n      minX = Math.min(minX, x - w / 2);\n      maxX = Math.max(maxX, x + w / 2);\n    }\n    if (!isNaN(y) && !isNaN(h)) {\n      if (minY === undefined) {\n        minY = y - h / 2;\n      }\n      minY = Math.min(minY, y - h / 2);\n      maxY = Math.max(maxY, y + h / 2);\n    }\n  };\n  g.getAllNodes().forEach(v => {\n    getExtremes(v);\n  });\n  g.getAllEdges().forEach(e => {\n    if (e === null || e === void 0 ? void 0 : e.data.hasOwnProperty('x')) {\n      getExtremes(e);\n    }\n  });\n  minX -= marginX;\n  minY -= marginY;\n  g.getAllNodes().forEach(node => {\n    node.data.x -= minX;\n    node.data.y -= minY;\n  });\n  g.getAllEdges().forEach(edge => {\n    var _a;\n    (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.forEach(p => {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (edge.data.hasOwnProperty('x')) {\n      edge.data.x -= minX;\n    }\n    if (edge.data.hasOwnProperty('y')) {\n      edge.data.y -= minY;\n    }\n  });\n  return {\n    width: maxX - minX + marginX,\n    height: maxY - minY + marginY\n  };\n};\nconst assignNodeIntersects = g => {\n  g.getAllEdges().forEach(e => {\n    const nodeV = g.getNode(e.source);\n    const nodeW = g.getNode(e.target);\n    let p1;\n    let p2;\n    if (!e.data.points) {\n      e.data.points = [];\n      p1 = {\n        x: nodeW.data.x,\n        y: nodeW.data.y\n      };\n      p2 = {\n        x: nodeV.data.x,\n        y: nodeV.data.y\n      };\n    } else {\n      p1 = e.data.points[0];\n      p2 = e.data.points[e.data.points.length - 1];\n    }\n    e.data.points.unshift(intersectRect(nodeV.data, p1));\n    e.data.points.push(intersectRect(nodeW.data, p2));\n  });\n};\nconst fixupEdgeLabelCoords = g => {\n  g.getAllEdges().forEach(edge => {\n    if (edge.data.hasOwnProperty('x')) {\n      if (edge.data.labelpos === 'l' || edge.data.labelpos === 'r') {\n        edge.data.width -= edge.data.labeloffset;\n      }\n      switch (edge.data.labelpos) {\n        case 'l':\n          edge.data.x -= edge.data.width / 2 + edge.data.labeloffset;\n          break;\n        case 'r':\n          edge.data.x += edge.data.width / 2 + edge.data.labeloffset;\n          break;\n      }\n    }\n  });\n};\nconst reversePointsForReversedEdges = g => {\n  g.getAllEdges().forEach(edge => {\n    var _a;\n    if (edge.data.reversed) {\n      (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.reverse();\n    }\n  });\n};\nconst removeBorderNodes = g => {\n  g.getAllNodes().forEach(v => {\n    var _a, _b, _c;\n    if ((_a = g.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n      const node = g.getNode(v.id);\n      const t = g.getNode(node.data.borderTop);\n      const b = g.getNode(node.data.borderBottom);\n      const l = g.getNode(node.data.borderLeft[((_b = node.data.borderLeft) === null || _b === void 0 ? void 0 : _b.length) - 1]);\n      const r = g.getNode(node.data.borderRight[((_c = node.data.borderRight) === null || _c === void 0 ? void 0 : _c.length) - 1]);\n      node.data.width = Math.abs((r === null || r === void 0 ? void 0 : r.data.x) - (l === null || l === void 0 ? void 0 : l.data.x)) || 10;\n      node.data.height = Math.abs((b === null || b === void 0 ? void 0 : b.data.y) - (t === null || t === void 0 ? void 0 : t.data.y)) || 10;\n      node.data.x = ((l === null || l === void 0 ? void 0 : l.data.x) || 0) + node.data.width / 2;\n      node.data.y = ((t === null || t === void 0 ? void 0 : t.data.y) || 0) + node.data.height / 2;\n    }\n  });\n  g.getAllNodes().forEach(n => {\n    if (n.data.dummy === 'border') {\n      g.removeNode(n.id);\n    }\n  });\n};\nconst removeSelfEdges = g => {\n  g.getAllEdges().forEach(e => {\n    if (e.source === e.target) {\n      const node = g.getNode(e.source);\n      if (!node.data.selfEdges) {\n        node.data.selfEdges = [];\n      }\n      node.data.selfEdges.push(e);\n      g.removeEdge(e.id);\n    }\n  });\n};\nconst insertSelfEdges = g => {\n  const layers = buildLayerMatrix(g);\n  layers === null || layers === void 0 ? void 0 : layers.forEach(layer => {\n    let orderShift = 0;\n    layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n      var _a;\n      const node = g.getNode(v);\n      node.data.order = i + orderShift;\n      (_a = node.data.selfEdges) === null || _a === void 0 ? void 0 : _a.forEach(selfEdge => {\n        addDummyNode(g, 'selfedge', {\n          width: selfEdge.data.width,\n          height: selfEdge.data.height,\n          rank: node.data.rank,\n          order: i + ++orderShift,\n          e: selfEdge\n        }, '_se');\n      });\n      delete node.data.selfEdges;\n    });\n  });\n};\nconst positionSelfEdges = g => {\n  g.getAllNodes().forEach(v => {\n    const node = g.getNode(v.id);\n    if (node.data.dummy === 'selfedge') {\n      const selfNode = g.getNode(node.data.e.source);\n      const x = selfNode.data.x + selfNode.data.width / 2;\n      const y = selfNode.data.y;\n      const dx = node.data.x - x;\n      const dy = selfNode.data.height / 2;\n      if (g.hasEdge(node.data.e.id)) {\n        g.updateEdgeData(node.data.e.id, node.data.e.data);\n      } else {\n        g.addEdge({\n          id: node.data.e.id,\n          source: node.data.e.source,\n          target: node.data.e.target,\n          data: node.data.e.data\n        });\n      }\n      g.removeNode(v.id);\n      node.data.e.data.points = [{\n        x: x + 2 * dx / 3,\n        y: y - dy\n      }, {\n        x: x + 5 * dx / 6,\n        y: y - dy\n      }, {\n        y,\n        x: x + dx\n      }, {\n        x: x + 5 * dx / 6,\n        y: y + dy\n      }, {\n        x: x + 2 * dx / 3,\n        y: y + dy\n      }];\n      node.data.e.data.x = node.data.x;\n      node.data.e.data.y = node.data.y;\n    }\n  });\n};\nconst selectNumberAttrs = (obj, attrs) => {\n  const pickedProperties = {};\n  attrs === null || attrs === void 0 ? void 0 : attrs.forEach(key => {\n    if (obj[key] === undefined) return;\n    pickedProperties[key] = +obj[key];\n  });\n  return pickedProperties;\n};\nconst canonicalize = (attrs = {}) => {\n  const newAttrs = {};\n  Object.keys(attrs).forEach(k => {\n    newAttrs[k.toLowerCase()] = attrs[k];\n  });\n  return newAttrs;\n};","map":{"version":3,"names":["Graph","isNil","run","runAcyclic","undo","undoAcyclic","addBorderSegments","adjust","adjustCoordinateSystem","undoCoordinateSystem","cleanup","cleanupNestingGraph","runNestingGraph","runNormalize","undoNormalize","order","initDataOrder","parentDummyChains","position","rank","addDummyNode","asNonCompoundGraph","buildLayerMatrix","intersectRect","normalizeRanks","removeEmptyRanks","layout","g","options","edgeLabelSpace","keepNodeOrder","prevGraph","rankdir","ranksep","inheritOrder","layoutGraph","buildLayoutGraph","makeSpaceForEdgeLabels","dimension","runLayout","e","message","console","error","updateInputGraph","acyclicer","ranker","nodeOrder","align","nodesep","edgesep","removeSelfEdges","nestingRoot","nodeRankFactor","injectEdgeLabelProxies","assignRankMinMax","removeEdgeLabelProxies","dummyChains","insertSelfEdges","positionSelfEdges","removeBorderNodes","fixupEdgeLabelCoords","width","height","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","currG","prevG","getAllNodes","forEach","n","node","getNode","id","hasNode","prevNode","data","fixorder","_order","inputGraph","v","inputLabel","layoutLabel","x","y","_rank","_a","getChildren","length","getAllEdges","getEdge","points","hasOwnProperty","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","minlen","weight","labeloffset","labelpos","edgeAttrs","tree","canonicalize","defaultNode","Object","assign","defaultAttrs","selectNumberAttrs","addNode","parent","hasTreeStructure","getParent","setParent","edge","pickedProperties","key","undefined","addEdge","source","target","isNaN","layer","toLowerCase","w","label","maxRank","borderTop","minRank","_b","borderBottom","Math","max","Infinity","dummy","labelRank","removeNode","minX","maxX","minY","maxY","marginx","marginX","marginy","marginY","getExtremes","attrs","h","min","p","nodeV","nodeW","p1","p2","unshift","push","reversed","reverse","t","b","l","borderLeft","r","borderRight","_c","abs","selfEdges","removeEdge","layers","orderShift","i","selfEdge","selfNode","dx","dy","hasEdge","updateEdgeData","obj","newAttrs","keys","k"],"sources":["../../src/antv-dagre/layout.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}