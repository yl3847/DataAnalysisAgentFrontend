{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/runtime/types/options.ts"],"sourcesContent":["import EventEmitter from '@antv/event-emitter';\nimport type { DisplayObject } from '@antv/g';\nimport { Canvas, IAnimation as GAnimation } from '@antv/g';\nimport {\n  G2Title,\n  G2ViewDescriptor,\n  GuideComponentPlane,\n  GuideComponentPosition,\n  Layout,\n  Primitive,\n} from './common';\nimport {\n  AnimationComponent,\n  CompositionComponent,\n  CoordinateComponent,\n  G2BaseComponent,\n  G2ComponentNamespaces,\n  GuideComponentComponent,\n  InteractionComponent,\n  LabelTransformComponent,\n  PaletteComponent,\n  Scale,\n  ScaleComponent,\n  ShapeComponent,\n  ThemeComponent,\n} from './component';\n\nimport { DataComponent } from './data';\nimport { EncodeComponent } from './encode';\nimport { MarkComponent } from './mark';\nimport { TransformComponent } from './transform';\n\nexport type G2ViewTree = {\n  width?: number;\n  height?: number;\n  depth?: number;\n} & Node;\n\nexport type Node = {\n  type?: string | ((...args: any[]) => any);\n  children?: Node[] | ((...args: any[]) => any);\n  key?: string;\n  [key: string]: any;\n};\n\nexport type G2Library = Record<\n  `${G2ComponentNamespaces}.${string}`,\n  {\n    (...args: any[]): any;\n    props?: Record<string, any>;\n  }\n>;\n\n// @todo\nexport type G2Context = {\n  library?: G2Library;\n  canvas?: Canvas;\n  emitter?: EventEmitter;\n  group?: DisplayObject;\n  animations?: GAnimation[];\n  views?: G2ViewDescriptor[];\n  /**\n   * Tell G2 how to create a canvas-like element, some marks will use it later such as wordcloud & heatmap.\n   * Use `document.createElement('canvas')` instead if not provided.\n   */\n  createCanvas?: () => HTMLCanvasElement;\n};\n\nexport type G2View = {\n  key?: string;\n  x?: number;\n  y?: number;\n  z?: number;\n  width?: number;\n  height?: number;\n  depth?: number;\n  padding?: number;\n  paddingLeft?: number;\n  paddingRight?: number;\n  paddingTop?: number;\n  paddingBottom?: number;\n  inset?: number;\n  insetLeft?: number;\n  insetTop?: number;\n  insetRight?: number;\n  insetBottom?: number;\n  margin?: number;\n  marginLeft?: number;\n  marginBottom?: number;\n  marginTop?: number;\n  marginRight?: number;\n  theme?: G2ThemeOptions;\n  title?: G2TitleOptions;\n  coordinates?: G2CoordinateOptions[];\n  coordinate?: Record<string, any>;\n  components?: G2GuideComponentOptions[];\n  interaction?: Record<string, any>;\n  marks?: G2Mark[];\n  frame?: boolean;\n  labelTransform?: G2LabelTransformOptions[];\n  style?: Record<string, any>;\n  tooltip?: boolean;\n  clip?: boolean;\n};\n\nexport type G2Mark = {\n  key?: string;\n  class?: string;\n  paddingLeft?: number;\n  paddingRight?: number;\n  paddingTop?: number;\n  paddingBottom?: number;\n  data?: any;\n  transform?: G2TransformOptions[];\n  scale?: Record<string, G2ScaleOptions>;\n  encode?: Record<string, any | G2EncodeOptions>;\n  type?: string | MarkComponent;\n  animate?: {\n    enter?: Record<string, Primitive>;\n    update?: Record<string, Primitive>;\n    exit?: Record<string, Primitive>;\n  };\n  facet?: boolean;\n  axis?: boolean | Record<string, any>;\n  legend?: boolean | Record<string, any>;\n  slider?: Record<string, any>;\n  scrollbar?: Record<string, any>;\n  tooltip?: any; // @todo\n  filter?: (i: number) => boolean;\n  children?: G2MarkChildrenCallback;\n  dataDomain?: number;\n  modifier?: any;\n  frame?: boolean;\n  style?: Record<string, Primitive>;\n  labels?: Record<string, any>[];\n  interaction?: Record<string, any>;\n  coordinate?: Record<string, any>;\n  viewStyle?: Record<string, any>;\n};\n\nexport type G2MarkChildrenCallback = (\n  visualData: Record<string, any>[],\n  scale: Record<string, Scale>,\n  layout: Layout,\n) => Node[];\n\nexport type G2BaseComponentOptions<\n  C = G2BaseComponent,\n  O = { [key: string | symbol]: any },\n> = {\n  type?: string | C;\n} & O;\n\nexport type G2ComponentOptions =\n  | G2TransformOptions\n  | G2EncodeOptions\n  | G2ThemeOptions\n  | G2MarkOptions\n  | G2CoordinateOptions\n  | G2ScaleOptions\n  | G2ShapeOptions\n  | G2PaletteOptions\n  | G2GuideComponentOptions\n  | G2AnimationOptions\n  | G2InteractionOptions\n  | G2CompositionOptions\n  | G2LabelTransformOptions;\n\nexport type G2TransformOptions = G2BaseComponentOptions<TransformComponent>;\nexport type G2EncodeOptions = G2BaseComponentOptions<EncodeComponent>;\nexport type G2ThemeOptions = G2BaseComponentOptions<ThemeComponent>;\nexport type G2MarkOptions = G2BaseComponentOptions<MarkComponent>;\nexport type G2CoordinateOptions = G2BaseComponentOptions<CoordinateComponent>;\nexport type G2ScaleOptions = G2BaseComponentOptions<\n  ScaleComponent,\n  {\n    name?: string;\n    domain?: any[];\n    range?: any[];\n    guide?: G2GuideComponentOptions;\n    field?: string | string[];\n    zero?: boolean;\n    [key: string | symbol]: any;\n  }\n>;\nexport type G2ShapeOptions = G2BaseComponentOptions<ShapeComponent>;\nexport type G2PaletteOptions = G2BaseComponentOptions<PaletteComponent>;\nexport type G2GuideComponentOptions = G2BaseComponentOptions<\n  GuideComponentComponent,\n  {\n    scale?: G2ScaleOptions;\n    position?: GuideComponentPosition;\n    plane?: GuideComponentPlane;\n    size?: number;\n    order?: number;\n    zIndex?: number;\n    [key: string | symbol]: any;\n  }\n>;\nexport type G2AnimationOptions = G2BaseComponentOptions<AnimationComponent>;\nexport type G2InteractionOptions = G2BaseComponentOptions<InteractionComponent>;\nexport type G2CompositionOptions = G2BaseComponentOptions<CompositionComponent>;\nexport type G2LabelTransformOptions =\n  G2BaseComponentOptions<LabelTransformComponent>;\nexport type G2TitleOptions = G2Title;\nexport type G2DataOptions = G2BaseComponent<DataComponent>;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}