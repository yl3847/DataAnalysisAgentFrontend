{"ast":null,"code":"import { groupBy } from '@antv/util';\nimport { idOf } from './id';\n/**\n * <zh/> 对数据操作进行约简\n *\n * <en/> Reduce data changes\n * @param changes - <zh/> 数据操作 | <en/> data changes\n * @returns <zh/> 约简后的数据操作 | <en/> reduced data changes\n */\nexport function reduceDataChanges(changes) {\n  const results = {\n    Added: new Map(),\n    Updated: new Map(),\n    Removed: new Map()\n  };\n  changes.forEach(change => {\n    const {\n      type,\n      value\n    } = change;\n    const id = idOf(value);\n    if (type === 'NodeAdded' || type === 'EdgeAdded' || type === 'ComboAdded') {\n      results.Added.set(id, change);\n    } else if (type === 'NodeUpdated' || type === 'EdgeUpdated' || type === 'ComboUpdated') {\n      // 如果存在 Added，将当前操作置为 Added 操作\n      // If there is an Added operation, set the current operation to Added\n      if (results.Added.has(id)) {\n        results.Added.set(id, {\n          type: type.replace('Updated', 'Added'),\n          value\n        });\n      }\n      // 如果存在 Updated，将当前操作置为 Updated 操作，但使用更早版本的 original\n      // If there is an Updated operation, set the current operation to Updated, but use an earlier version of original\n      else if (results.Updated.has(id)) {\n        const {\n          original\n        } = results.Updated.get(id);\n        results.Updated.set(id, {\n          type,\n          value,\n          original\n        });\n      } else if (results.Removed.has(id)) {\n        // 如果存在 Removed，不做任何操作\n        // If there is a Removed operation, do nothing\n      } else results.Updated.set(id, change);\n    } else if (type === 'NodeRemoved' || type === 'EdgeRemoved' || type === 'ComboRemoved') {\n      // 如果存在 Added 或者 Updated 的操作，删除 Removed 操作\n      // If there is an Added or Updated operation, delete the Removed operation\n      if (results.Added.has(id)) {\n        results.Added.delete(id);\n      } else if (results.Updated.has(id)) {\n        results.Updated.delete(id);\n        results.Removed.set(id, change);\n      } else {\n        results.Removed.set(id, change);\n      }\n    }\n  });\n  // 顺序并不重要\n  // The order is not important\n  return [...Array.from(results.Added.values()), ...Array.from(results.Updated.values()), ...Array.from(results.Removed.values())];\n}\n/**\n * <zh/> 对数据操作进行分类\n *\n * <en/> Classify data changes\n * @param changes - <zh/> 数据操作 | <en/> data changes\n * @returns <zh/> 分类后的数据操作 | <en/> classified data changes\n */\nexport function groupByChangeType(changes) {\n  const {\n    NodeAdded = [],\n    NodeUpdated = [],\n    NodeRemoved = [],\n    EdgeAdded = [],\n    EdgeUpdated = [],\n    EdgeRemoved = [],\n    ComboAdded = [],\n    ComboUpdated = [],\n    ComboRemoved = []\n  } = groupBy(changes, change => change.type);\n  return {\n    add: {\n      nodes: NodeAdded,\n      edges: EdgeAdded,\n      combos: ComboAdded\n    },\n    update: {\n      nodes: NodeUpdated,\n      edges: EdgeUpdated,\n      combos: ComboUpdated\n    },\n    remove: {\n      nodes: NodeRemoved,\n      edges: EdgeRemoved,\n      combos: ComboRemoved\n    }\n  };\n}","map":{"version":3,"names":["groupBy","idOf","reduceDataChanges","changes","results","Added","Map","Updated","Removed","forEach","change","type","value","id","set","has","replace","original","get","delete","Array","from","values","groupByChangeType","NodeAdded","NodeUpdated","NodeRemoved","EdgeAdded","EdgeUpdated","EdgeRemoved","ComboAdded","ComboUpdated","ComboRemoved","add","nodes","edges","combos","update","remove"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/change.ts"],"sourcesContent":["import { groupBy } from '@antv/util';\nimport { ChangeType } from '../constants';\nimport type { DataAdded, DataChange, DataChanges, DataRemoved, DataUpdated, ID } from '../types';\nimport { idOf } from './id';\n\n/**\n * <zh/> 对数据操作进行约简\n *\n * <en/> Reduce data changes\n * @param changes - <zh/> 数据操作 | <en/> data changes\n * @returns <zh/> 约简后的数据操作 | <en/> reduced data changes\n */\nexport function reduceDataChanges(changes: DataChange[]): DataChange[] {\n  const results = {\n    Added: new Map<ID, DataAdded>(),\n    Updated: new Map<ID, DataUpdated>(),\n    Removed: new Map<ID, DataRemoved>(),\n  };\n\n  changes.forEach((change) => {\n    const { type, value } = change;\n    const id = idOf(value);\n\n    if (type === 'NodeAdded' || type === 'EdgeAdded' || type === 'ComboAdded') {\n      results.Added.set(id, change);\n    } else if (type === 'NodeUpdated' || type === 'EdgeUpdated' || type === 'ComboUpdated') {\n      // 如果存在 Added，将当前操作置为 Added 操作\n      // If there is an Added operation, set the current operation to Added\n      if (results.Added.has(id)) {\n        results.Added.set(id, { type: type.replace('Updated', 'Added'), value } as DataAdded);\n      }\n      // 如果存在 Updated，将当前操作置为 Updated 操作，但使用更早版本的 original\n      // If there is an Updated operation, set the current operation to Updated, but use an earlier version of original\n      else if (results.Updated.has(id)) {\n        const { original } = results.Updated.get(id)!;\n        results.Updated.set(id, { type, value, original } as DataUpdated);\n      } else if (results.Removed.has(id)) {\n        // 如果存在 Removed，不做任何操作\n        // If there is a Removed operation, do nothing\n      } else results.Updated.set(id, change);\n    } else if (type === 'NodeRemoved' || type === 'EdgeRemoved' || type === 'ComboRemoved') {\n      // 如果存在 Added 或者 Updated 的操作，删除 Removed 操作\n      // If there is an Added or Updated operation, delete the Removed operation\n      if (results.Added.has(id)) {\n        results.Added.delete(id);\n      } else if (results.Updated.has(id)) {\n        results.Updated.delete(id);\n        results.Removed.set(id, change);\n      } else {\n        results.Removed.set(id, change);\n      }\n    }\n  });\n\n  // 顺序并不重要\n  // The order is not important\n  return [\n    ...Array.from(results.Added.values()),\n    ...Array.from(results.Updated.values()),\n    ...Array.from(results.Removed.values()),\n  ];\n}\n\n/**\n * <zh/> 对数据操作进行分类\n *\n * <en/> Classify data changes\n * @param changes - <zh/> 数据操作 | <en/> data changes\n * @returns <zh/> 分类后的数据操作 | <en/> classified data changes\n */\nexport function groupByChangeType(changes: DataChange[]): DataChanges {\n  const {\n    NodeAdded = [],\n    NodeUpdated = [],\n    NodeRemoved = [],\n    EdgeAdded = [],\n    EdgeUpdated = [],\n    EdgeRemoved = [],\n    ComboAdded = [],\n    ComboUpdated = [],\n    ComboRemoved = [],\n  } = groupBy(changes, (change) => change.type) as unknown as Record<`${ChangeType}`, DataChange[]>;\n\n  return {\n    add: {\n      nodes: NodeAdded,\n      edges: EdgeAdded,\n      combos: ComboAdded,\n    },\n    update: {\n      nodes: NodeUpdated,\n      edges: EdgeUpdated,\n      combos: ComboUpdated,\n    },\n    remove: {\n      nodes: NodeRemoved,\n      edges: EdgeRemoved,\n      combos: ComboRemoved,\n    },\n  } as DataChanges;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}