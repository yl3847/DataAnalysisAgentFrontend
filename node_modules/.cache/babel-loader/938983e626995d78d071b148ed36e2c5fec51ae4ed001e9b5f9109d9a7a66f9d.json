{"ast":null,"code":"import { BaseTransform } from '@antv/g6';\nexport class AssignColorByBranch extends BaseTransform {\n  static defaultOptions = {\n    colors: ['#1783FF', '#F08F56', '#D580FF', '#00C9C9', '#7863FF', '#DB9D0D', '#60C42D', '#FF80CA', '#2491B3', '#17C76F']\n  };\n  constructor(context, options) {\n    super(context, Object.assign({}, AssignColorByBranch.defaultOptions, options));\n  }\n  beforeDraw(input) {\n    const nodes = this.context.model.getNodeData();\n    if (nodes.length === 0) return input;\n    let colorIndex = 0;\n    const dfs = (nodeId, color) => {\n      const node = nodes.find(datum => datum.id == nodeId);\n      if (!node) return;\n      node.style ||= {};\n      node.style.color = color || this.options.colors[colorIndex++ % this.options.colors.length];\n      node.children?.forEach(childId => dfs(childId, node.style?.color));\n    };\n    nodes.filter(node => node.depth === 1).forEach(rootNode => dfs(rootNode.id));\n    return input;\n  }\n}","map":{"version":3,"names":["BaseTransform","AssignColorByBranch","defaultOptions","colors","constructor","context","options","Object","assign","beforeDraw","input","nodes","model","getNodeData","length","colorIndex","dfs","nodeId","color","node","find","datum","id","style","children","forEach","childId","filter","depth","rootNode"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/graphs/es/core/transform/assign-color-by-branch.js"],"sourcesContent":["import { BaseTransform } from '@antv/g6';\nexport class AssignColorByBranch extends BaseTransform {\n    static defaultOptions = {\n        colors: [\n            '#1783FF',\n            '#F08F56',\n            '#D580FF',\n            '#00C9C9',\n            '#7863FF',\n            '#DB9D0D',\n            '#60C42D',\n            '#FF80CA',\n            '#2491B3',\n            '#17C76F',\n        ],\n    };\n    constructor(context, options) {\n        super(context, Object.assign({}, AssignColorByBranch.defaultOptions, options));\n    }\n    beforeDraw(input) {\n        const nodes = this.context.model.getNodeData();\n        if (nodes.length === 0)\n            return input;\n        let colorIndex = 0;\n        const dfs = (nodeId, color) => {\n            const node = nodes.find((datum) => datum.id == nodeId);\n            if (!node)\n                return;\n            node.style ||= {};\n            node.style.color = color || this.options.colors[colorIndex++ % this.options.colors.length];\n            node.children?.forEach((childId) => dfs(childId, node.style?.color));\n        };\n        nodes.filter((node) => node.depth === 1).forEach((rootNode) => dfs(rootNode.id));\n        return input;\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AACxC,OAAO,MAAMC,mBAAmB,SAASD,aAAa,CAAC;EACnD,OAAOE,cAAc,GAAG;IACpBC,MAAM,EAAE,CACJ,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS;EAEjB,CAAC;EACDC,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC1B,KAAK,CAACD,OAAO,EAAEE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,mBAAmB,CAACC,cAAc,EAAEI,OAAO,CAAC,CAAC;EAClF;EACAG,UAAUA,CAACC,KAAK,EAAE;IACd,MAAMC,KAAK,GAAG,IAAI,CAACN,OAAO,CAACO,KAAK,CAACC,WAAW,CAAC,CAAC;IAC9C,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,EAClB,OAAOJ,KAAK;IAChB,IAAIK,UAAU,GAAG,CAAC;IAClB,MAAMC,GAAG,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;MAC3B,MAAMC,IAAI,GAAGR,KAAK,CAACS,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,EAAE,IAAIL,MAAM,CAAC;MACtD,IAAI,CAACE,IAAI,EACL;MACJA,IAAI,CAACI,KAAK,KAAK,CAAC,CAAC;MACjBJ,IAAI,CAACI,KAAK,CAACL,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACZ,OAAO,CAACH,MAAM,CAACY,UAAU,EAAE,GAAG,IAAI,CAACT,OAAO,CAACH,MAAM,CAACW,MAAM,CAAC;MAC1FK,IAAI,CAACK,QAAQ,EAAEC,OAAO,CAAEC,OAAO,IAAKV,GAAG,CAACU,OAAO,EAAEP,IAAI,CAACI,KAAK,EAAEL,KAAK,CAAC,CAAC;IACxE,CAAC;IACDP,KAAK,CAACgB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACS,KAAK,KAAK,CAAC,CAAC,CAACH,OAAO,CAAEI,QAAQ,IAAKb,GAAG,CAACa,QAAQ,CAACP,EAAE,CAAC,CAAC;IAChF,OAAOZ,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}