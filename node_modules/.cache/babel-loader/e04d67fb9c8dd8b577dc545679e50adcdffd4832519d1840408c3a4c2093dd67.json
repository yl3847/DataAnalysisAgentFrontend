{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BasePlugin } from '../base-plugin';\nimport { createPluginContainer, insertDOM } from '../utils/dom';\nimport { CONTEXTMENU_CSS, getContentFromItems } from './util';\n/**\n * <zh/> 上下文菜单\n *\n * <en/> Contextmenu\n * @remarks\n * <zh/> 上下文菜单，也被称为右键菜单，是当用户在某个特定区域上点击后出现的一个菜单。支持在点击前后，触发自定义事件。\n *\n * <en/> Contextmenu, also known as the right-click menu , is a menu that appears when a user clicks on a specific area. Supports triggering custom events before and after clicking.\n */\nexport class Contextmenu extends BasePlugin {\n  constructor(context, options) {\n    super(context, Object.assign({}, Contextmenu.defaultOptions, options));\n    this.targetElement = null;\n    this.onTriggerEvent = event => {\n      var _a;\n      // `contextmenu` 事件默认会触发浏览器的右键菜单，需要阻止默认事件\n      // `click` 事件不需要阻止默认事件\n      (_a = event.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event);\n      this.show(event);\n    };\n    this.onMenuItemClick = event => {\n      const {\n        onClick,\n        trigger\n      } = this.options;\n      if (event.target instanceof HTMLElement) {\n        if (event.target.className.includes('g6-contextmenu-li')) {\n          const value = event.target.getAttribute('value');\n          onClick === null || onClick === void 0 ? void 0 : onClick(value, event.target, this.targetElement);\n          this.hide();\n        }\n      }\n      if (trigger !== 'click') this.hide();\n    };\n    this.initElement();\n    this.update(options);\n  }\n  initElement() {\n    this.$element = createPluginContainer('contextmenu', false, {\n      zIndex: '99'\n    });\n    const {\n      className\n    } = this.options;\n    if (className) this.$element.classList.add(className);\n    const $container = this.context.canvas.getContainer();\n    $container.appendChild(this.$element);\n    insertDOM('g6-contextmenu-css', 'style', {}, CONTEXTMENU_CSS, document.head);\n  }\n  /**\n   * <zh/> 显示上下文菜单\n   *\n   * <en/> Show the contextmenu\n   * @param event - <zh/> 元素指针事件 | <en/> Element pointer event\n   * @internal\n   */\n  show(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        enable,\n        offset\n      } = this.options;\n      if (typeof enable === 'function' && !enable(event) || !enable) {\n        this.hide();\n        return;\n      }\n      const content = yield this.getDOMContent(event);\n      if (content instanceof HTMLElement) {\n        this.$element.innerHTML = '';\n        this.$element.appendChild(content);\n      } else {\n        this.$element.innerHTML = content;\n      }\n      // NOTICE: 为什么事件中的 client 是相对浏览器，而不是画布容器？\n      const clientRect = this.context.graph.getCanvas().getContainer().getBoundingClientRect();\n      this.$element.style.left = `${event.client.x - clientRect.left + offset[0]}px`;\n      this.$element.style.top = `${event.client.y - clientRect.top + offset[1]}px`;\n      this.$element.style.display = 'block';\n      this.targetElement = event.target;\n    });\n  }\n  /**\n   * <zh/> 隐藏上下文菜单\n   *\n   * <en/> Hide the contextmenu\n   */\n  hide() {\n    this.$element.style.display = 'none';\n    this.targetElement = null;\n  }\n  /**\n   * <zh/> 更新上下文菜单的配置项\n   *\n   * <en/> Update the contextmenu options\n   * @param options - <zh/> 配置项 | <en/> Options\n   * @internal\n   */\n  update(options) {\n    this.unbindEvents();\n    super.update(options);\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 销毁上下文菜单\n   *\n   * <en/> Destroy the contextmenu\n   * @internal\n   */\n  destroy() {\n    this.unbindEvents();\n    super.destroy();\n    this.$element.remove();\n  }\n  getDOMContent(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        getContent,\n        getItems\n      } = this.options;\n      if (getItems) {\n        return getContentFromItems(yield getItems(event));\n      }\n      return yield getContent(event);\n    });\n  }\n  bindEvents() {\n    const {\n      graph\n    } = this.context;\n    const {\n      trigger\n    } = this.options;\n    graph.on(`canvas:${trigger}`, this.onTriggerEvent);\n    graph.on(`node:${trigger}`, this.onTriggerEvent);\n    graph.on(`edge:${trigger}`, this.onTriggerEvent);\n    graph.on(`combo:${trigger}`, this.onTriggerEvent);\n    document.addEventListener('click', this.onMenuItemClick);\n  }\n  unbindEvents() {\n    const {\n      graph\n    } = this.context;\n    const {\n      trigger\n    } = this.options;\n    graph.off(`canvas:${trigger}`, this.onTriggerEvent);\n    graph.off(`node:${trigger}`, this.onTriggerEvent);\n    graph.off(`edge:${trigger}`, this.onTriggerEvent);\n    graph.off(`combo:${trigger}`, this.onTriggerEvent);\n    document.removeEventListener('click', this.onMenuItemClick);\n  }\n}\nContextmenu.defaultOptions = {\n  trigger: 'contextmenu',\n  offset: [4, 4],\n  loadingContent: '<div class=\"g6-contextmenu-loading\">Loading...</div>',\n  getContent: () => 'It is a empty context menu.',\n  enable: () => true\n};","map":{"version":3,"names":["BasePlugin","createPluginContainer","insertDOM","CONTEXTMENU_CSS","getContentFromItems","Contextmenu","constructor","context","options","Object","assign","defaultOptions","targetElement","onTriggerEvent","event","_a","preventDefault","call","show","onMenuItemClick","onClick","trigger","target","HTMLElement","className","includes","value","getAttribute","hide","initElement","update","$element","zIndex","classList","add","$container","canvas","getContainer","appendChild","document","head","enable","offset","content","getDOMContent","innerHTML","clientRect","graph","getCanvas","getBoundingClientRect","style","left","client","x","top","y","display","unbindEvents","bindEvents","destroy","remove","getContent","getItems","on","addEventListener","off","removeEventListener","loadingContent"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/contextmenu/index.ts"],"sourcesContent":["import type { RuntimeContext } from '../../runtime/types';\nimport type { Element } from '../../types';\nimport type { IElementEvent } from '../../types/event';\nimport type { BasePluginOptions } from '../base-plugin';\nimport { BasePlugin } from '../base-plugin';\nimport { createPluginContainer, insertDOM } from '../utils/dom';\nimport type { Item } from './util';\nimport { CONTEXTMENU_CSS, getContentFromItems } from './util';\n/**\n * <zh/> 上下文菜单配置项\n *\n * <en/> Contextmenu options\n */\nexport interface ContextmenuOptions extends BasePluginOptions {\n  /**\n   * <zh/> 给菜单的 DOM 追加的类名\n   *\n   * <en/> The class name appended to the menu DOM for custom styles\n   * @defaultValue 'g6-contextmenu'\n   */\n  className?: string;\n  /**\n   * <zh/> 如何触发右键菜单\n   * - `'click'` : 点击触发\n   * - `'contextmenu'` : 右键触发\n   *\n   * <en/> How to trigger the context menu\n   * - `'click'` : Click trigger\n   * - `'contextmenu'` : Right-click trigger\n   * @defaultValue 'contextmenu'\n   */\n  trigger?: 'click' | 'contextmenu';\n  /**\n   * <zh/> 菜单显式 X、Y 方向的偏移量\n   *\n   * <en/> The offset X, y direction of the menu\n   * @defaultValue [4, 4]\n   */\n  offset?: [number, number];\n  /**\n   * <zh/> 当菜单被点击后，触发的回调方法\n   *\n   * <en/> The callback method triggered when the menu is clicked\n   */\n  onClick?: (value: string, target: HTMLElement, current: Element) => void;\n  /**\n   * <zh/> 返回菜单的项目列表，支持 `Promise` 类型的返回值。是 `getContent` 的快捷配置\n   *\n   * <en/> Return the list of menu items, support the `Promise` type return value. It is a shortcut configuration of `getContent`\n   */\n  getItems?: (event: IElementEvent) => Item[] | Promise<Item[]>;\n  /**\n   * <zh/> 返回菜单的内容，支持 `Promise` 类型的返回值，也可以使用 `getItems` 进行快捷配置\n   *\n   * <en/> Return the content of menu, support the `Promise` type return value, you can also use `getItems` for shortcut configuration\n   */\n  getContent?: (event: IElementEvent) => HTMLElement | string | Promise<HTMLElement | string>;\n  /**\n   * <zh/> 当 `getContent` 返回一个 `Promise` 时，使用的菜单内容\n   *\n   * <en/> The menu content when loading is used when getContent returns a Promise\n   */\n  loadingContent?: HTMLElement | string;\n  /**\n   * <zh/> 是否可用，通过参数判断是否支持右键菜单，默认是全部可用\n   *\n   * <en/> Whether the plugin is available, determine whether the right-click menu is supported through parameters, The default is all available\n   * @defaultValue true\n   */\n  enable?: boolean | ((event: IElementEvent) => boolean);\n}\n\n/**\n * <zh/> 上下文菜单\n *\n * <en/> Contextmenu\n * @remarks\n * <zh/> 上下文菜单，也被称为右键菜单，是当用户在某个特定区域上点击后出现的一个菜单。支持在点击前后，触发自定义事件。\n *\n * <en/> Contextmenu, also known as the right-click menu , is a menu that appears when a user clicks on a specific area. Supports triggering custom events before and after clicking.\n */\nexport class Contextmenu extends BasePlugin<ContextmenuOptions> {\n  static defaultOptions: Partial<ContextmenuOptions> = {\n    trigger: 'contextmenu',\n    offset: [4, 4],\n    loadingContent: '<div class=\"g6-contextmenu-loading\">Loading...</div>',\n    getContent: () => 'It is a empty context menu.',\n    enable: () => true,\n  };\n\n  private $element!: HTMLElement;\n\n  private targetElement: Element | null = null;\n\n  constructor(context: RuntimeContext, options: ContextmenuOptions) {\n    super(context, Object.assign({}, Contextmenu.defaultOptions, options));\n\n    this.initElement();\n    this.update(options);\n  }\n\n  private initElement() {\n    this.$element = createPluginContainer('contextmenu', false, { zIndex: '99' });\n    const { className } = this.options;\n    if (className) this.$element.classList.add(className);\n\n    const $container = this.context.canvas.getContainer();\n    $container!.appendChild(this.$element);\n\n    insertDOM('g6-contextmenu-css', 'style', {}, CONTEXTMENU_CSS, document.head);\n  }\n\n  /**\n   * <zh/> 显示上下文菜单\n   *\n   * <en/> Show the contextmenu\n   * @param event - <zh/> 元素指针事件 | <en/> Element pointer event\n   * @internal\n   */\n  public async show(event: IElementEvent) {\n    const { enable, offset } = this.options;\n\n    if ((typeof enable === 'function' && !enable(event)) || !enable) {\n      this.hide();\n      return;\n    }\n\n    const content = await this.getDOMContent(event);\n\n    if (content instanceof HTMLElement) {\n      this.$element.innerHTML = '';\n      this.$element.appendChild(content);\n    } else {\n      this.$element.innerHTML = content;\n    }\n\n    // NOTICE: 为什么事件中的 client 是相对浏览器，而不是画布容器？\n    const clientRect = this.context.graph.getCanvas().getContainer()!.getBoundingClientRect();\n\n    this.$element.style.left = `${event.client.x - clientRect.left + offset[0]}px`;\n    this.$element.style.top = `${event.client.y - clientRect.top + offset[1]}px`;\n    this.$element.style.display = 'block';\n\n    this.targetElement = event.target;\n  }\n\n  /**\n   * <zh/> 隐藏上下文菜单\n   *\n   * <en/> Hide the contextmenu\n   */\n  public hide() {\n    this.$element.style.display = 'none';\n    this.targetElement = null;\n  }\n\n  /**\n   * <zh/> 更新上下文菜单的配置项\n   *\n   * <en/> Update the contextmenu options\n   * @param options - <zh/> 配置项 | <en/> Options\n   * @internal\n   */\n  public update(options: Partial<ContextmenuOptions>) {\n    this.unbindEvents();\n    super.update(options);\n    this.bindEvents();\n  }\n\n  /**\n   * <zh/> 销毁上下文菜单\n   *\n   * <en/> Destroy the contextmenu\n   * @internal\n   */\n  public destroy(): void {\n    this.unbindEvents();\n    super.destroy();\n    this.$element.remove();\n  }\n\n  private async getDOMContent(event: IElementEvent) {\n    const { getContent, getItems } = this.options;\n\n    if (getItems) {\n      return getContentFromItems(await getItems(event));\n    }\n    return await getContent(event);\n  }\n\n  private bindEvents() {\n    const { graph } = this.context;\n    const { trigger } = this.options;\n\n    graph.on(`canvas:${trigger}`, this.onTriggerEvent);\n    graph.on(`node:${trigger}`, this.onTriggerEvent);\n    graph.on(`edge:${trigger}`, this.onTriggerEvent);\n    graph.on(`combo:${trigger}`, this.onTriggerEvent);\n\n    document.addEventListener('click', this.onMenuItemClick);\n  }\n\n  private unbindEvents() {\n    const { graph } = this.context;\n    const { trigger } = this.options;\n\n    graph.off(`canvas:${trigger}`, this.onTriggerEvent);\n    graph.off(`node:${trigger}`, this.onTriggerEvent);\n    graph.off(`edge:${trigger}`, this.onTriggerEvent);\n    graph.off(`combo:${trigger}`, this.onTriggerEvent);\n\n    document.removeEventListener('click', this.onMenuItemClick);\n  }\n\n  private onTriggerEvent = (event: IElementEvent) => {\n    // `contextmenu` 事件默认会触发浏览器的右键菜单，需要阻止默认事件\n    // `click` 事件不需要阻止默认事件\n    event.preventDefault?.();\n    this.show(event);\n  };\n\n  private onMenuItemClick = (event: MouseEvent) => {\n    const { onClick, trigger } = this.options;\n    if (event.target instanceof HTMLElement) {\n      if (event.target.className.includes('g6-contextmenu-li')) {\n        const value = event.target.getAttribute('value') as string;\n        onClick?.(value, event.target, this.targetElement!);\n        this.hide();\n      }\n    }\n\n    if (trigger !== 'click') this.hide();\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}