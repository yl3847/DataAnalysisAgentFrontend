{"ast":null,"code":"import { getCurveControlPoint, getQuadraticPath } from '../../utils/edge';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseEdge } from './base-edge';\n/**\n * <zh/> 二次贝塞尔曲线\n *\n * <en/> Quadratic Bezier curve\n */\nexport class Quadratic extends BaseEdge {\n  constructor(options) {\n    super(mergeOptions({\n      style: Quadratic.defaultStyleProps\n    }, options));\n  }\n  getKeyPath(attributes) {\n    const {\n      curvePosition,\n      curveOffset\n    } = attributes;\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n    const controlPoint = attributes.controlPoint || getCurveControlPoint(sourcePoint, targetPoint, curvePosition, curveOffset);\n    return getQuadraticPath(sourcePoint, targetPoint, controlPoint);\n  }\n}\nQuadratic.defaultStyleProps = {\n  curvePosition: 0.5,\n  curveOffset: 30\n};","map":{"version":3,"names":["getCurveControlPoint","getQuadraticPath","mergeOptions","BaseEdge","Quadratic","constructor","options","style","defaultStyleProps","getKeyPath","attributes","curvePosition","curveOffset","sourcePoint","targetPoint","getEndpoints","controlPoint"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/edges/quadratic.ts"],"sourcesContent":["import type { DisplayObjectConfig } from '@antv/g';\nimport type { PathArray } from '@antv/util';\nimport type { Point } from '../../types';\nimport { getCurveControlPoint, getQuadraticPath } from '../../utils/edge';\nimport { mergeOptions } from '../../utils/style';\nimport type { BaseEdgeStyleProps } from './base-edge';\nimport { BaseEdge } from './base-edge';\n\n/**\n * <zh/> 二次贝塞尔曲线样式配置项\n *\n * <en/> Quadratic Bezier curve style properties\n */\nexport interface QuadraticStyleProps extends BaseEdgeStyleProps {\n  /**\n   * <zh/> 控制点，用于定义曲线的形状。如果不指定，将会通过`curveOffset`和`curvePosition`来计算控制点\n   *\n   * <en/> Control point. Used to define the shape of the curve. If not specified, it will be calculated using `curveOffset` and `curvePosition`.\n   */\n  controlPoint?: Point;\n  /**\n   * <zh/> 控制点在两端点连线上的相对位置，范围为`0-1`\n   *\n   * <en/> The relative position of the control point on the line, ranging from `0-1`\n   * @defaultValue 0.5\n   */\n  curvePosition?: number;\n  /**\n   * <zh/> 控制点距离两端点连线的距离，可理解为控制边的弯曲程度\n   *\n   * <en/> The distance of the control point from the line\n   * @defaultValue 30\n   */\n  curveOffset?: number;\n}\n\ntype ParsedQuadraticStyleProps = Required<QuadraticStyleProps>;\n\n/**\n * <zh/> 二次贝塞尔曲线\n *\n * <en/> Quadratic Bezier curve\n */\nexport class Quadratic extends BaseEdge {\n  static defaultStyleProps: Partial<QuadraticStyleProps> = {\n    curvePosition: 0.5,\n    curveOffset: 30,\n  };\n\n  constructor(options: DisplayObjectConfig<QuadraticStyleProps>) {\n    super(mergeOptions({ style: Quadratic.defaultStyleProps }, options));\n  }\n\n  protected getKeyPath(attributes: ParsedQuadraticStyleProps): PathArray {\n    const { curvePosition, curveOffset } = attributes;\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n    const controlPoint =\n      attributes.controlPoint || getCurveControlPoint(sourcePoint, targetPoint, curvePosition, curveOffset);\n    return getQuadraticPath(sourcePoint, targetPoint, controlPoint);\n  }\n}\n"],"mappings":"AAGA,SAASA,oBAAoB,EAAEC,gBAAgB,QAAQ,kBAAkB;AACzE,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,SAASC,QAAQ,QAAQ,aAAa;AAgCtC;;;;;AAKA,OAAM,MAAOC,SAAU,SAAQD,QAAQ;EAMrCE,YAAYC,OAAiD;IAC3D,KAAK,CAACJ,YAAY,CAAC;MAAEK,KAAK,EAAEH,SAAS,CAACI;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EACtE;EAEUG,UAAUA,CAACC,UAAqC;IACxD,MAAM;MAAEC,aAAa;MAAEC;IAAW,CAAE,GAAGF,UAAU;IACjD,MAAM,CAACG,WAAW,EAAEC,WAAW,CAAC,GAAG,IAAI,CAACC,YAAY,CAACL,UAAU,CAAC;IAChE,MAAMM,YAAY,GAChBN,UAAU,CAACM,YAAY,IAAIhB,oBAAoB,CAACa,WAAW,EAAEC,WAAW,EAAEH,aAAa,EAAEC,WAAW,CAAC;IACvG,OAAOX,gBAAgB,CAACY,WAAW,EAAEC,WAAW,EAAEE,YAAY,CAAC;EACjE;;AAfOZ,SAAA,CAAAI,iBAAiB,GAAiC;EACvDG,aAAa,EAAE,GAAG;EAClBC,WAAW,EAAE;CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}