{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Graph as IGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { cloneFormatData } from './util';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  maxIteration: 1000,\n  gravity: 10,\n  speed: 5,\n  clustering: false,\n  clusterGravity: 10,\n  width: 300,\n  height: 300,\n  nodeClusterBy: 'cluster'\n};\nconst SPEED_DIVISOR = 800;\n/**\n * <zh/> Fruchterman 力导向布局\n *\n * <en/> Fruchterman force-directed layout\n */\nexport class FruchtermanLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'fruchterman';\n    this.timeInterval = 0;\n    this.running = false;\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericFruchtermanLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericFruchtermanLayout(true, graph, options);\n    });\n  }\n  /**\n   * Stop simulation immediately.\n   */\n  stop() {\n    if (this.timeInterval && typeof window !== 'undefined') {\n      window.clearInterval(this.timeInterval);\n    }\n    this.running = false;\n  }\n  /**\n   * Manually steps the simulation by the specified number of iterations.\n   * @see https://github.com/d3/d3-force#simulation_tick\n   */\n  tick(iterations = this.options.maxIteration || 1) {\n    if (this.lastResult) {\n      return this.lastResult;\n    }\n    for (let i = 0; i < iterations; i++) {\n      this.runOneStep(this.lastGraph, this.lastClusterMap, this.lastOptions);\n    }\n    const result = {\n      nodes: this.lastLayoutNodes,\n      edges: this.lastLayoutEdges\n    };\n    if (this.lastAssign) {\n      result.nodes.forEach(node => this.lastGraph.mergeNodeData(node.id, {\n        x: node.data.x,\n        y: node.data.y,\n        z: this.options.dimensions === 3 ? node.data.z : undefined\n      }));\n    }\n    return result;\n  }\n  genericFruchtermanLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.running) return;\n      const formattedOptions = this.formatOptions(options);\n      const {\n        dimensions,\n        width,\n        height,\n        center,\n        clustering,\n        nodeClusterBy,\n        maxIteration,\n        onTick\n      } = formattedOptions;\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n        const result = {\n          nodes: [],\n          edges\n        };\n        this.lastResult = result;\n        return result;\n      }\n      if (nodes.length === 1) {\n        if (assign) {\n          graph.mergeNodeData(nodes[0].id, {\n            x: center[0],\n            y: center[1],\n            z: dimensions === 3 ? center[2] : undefined\n          });\n        }\n        const result = {\n          nodes: [Object.assign(Object.assign({}, nodes[0]), {\n            data: Object.assign(Object.assign({}, nodes[0].data), {\n              x: center[0],\n              y: center[1],\n              z: dimensions === 3 ? center[2] : undefined\n            })\n          })],\n          edges\n        };\n        this.lastResult = result;\n        return result;\n      }\n      const layoutNodes = nodes.map(node => cloneFormatData(node, [width, height]));\n      const calcGraph = new IGraph({\n        nodes: layoutNodes,\n        edges\n      });\n      // clustering info\n      const clusterMap = {};\n      if (clustering) {\n        layoutNodes.forEach(node => {\n          const clusterValue = node.data[nodeClusterBy];\n          if (!clusterMap[clusterValue]) {\n            clusterMap[clusterValue] = {\n              name: clusterValue,\n              cx: 0,\n              cy: 0,\n              count: 0\n            };\n          }\n        });\n      }\n      // Use them later in `tick`.\n      this.lastLayoutNodes = layoutNodes;\n      this.lastLayoutEdges = edges;\n      this.lastAssign = assign;\n      this.lastGraph = calcGraph;\n      this.lastOptions = formattedOptions;\n      this.lastClusterMap = clusterMap;\n      if (typeof window === 'undefined') return;\n      let iter = 0;\n      return new Promise(resolve => {\n        // interval for render the result after each iteration\n        this.timeInterval = window.setInterval(() => {\n          if (!this.running) {\n            resolve({\n              nodes: layoutNodes,\n              edges\n            });\n            return;\n          }\n          this.runOneStep(calcGraph, clusterMap, formattedOptions);\n          if (assign) {\n            layoutNodes.forEach(({\n              id,\n              data\n            }) => graph.mergeNodeData(id, {\n              x: data.x,\n              y: data.y,\n              z: dimensions === 3 ? data.z : undefined\n            }));\n          }\n          onTick === null || onTick === void 0 ? void 0 : onTick({\n            nodes: layoutNodes,\n            edges\n          });\n          iter++;\n          if (iter >= maxIteration) {\n            window.clearInterval(this.timeInterval);\n            resolve({\n              nodes: layoutNodes,\n              edges\n            });\n          }\n        }, 0);\n        this.running = true;\n      });\n    });\n  }\n  formatOptions(options = {}) {\n    const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n    const {\n      clustering,\n      nodeClusterBy\n    } = mergedOptions;\n    const {\n      center: propsCenter,\n      width: propsWidth,\n      height: propsHeight\n    } = mergedOptions;\n    mergedOptions.width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n    mergedOptions.height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n    mergedOptions.center = !propsCenter ? [mergedOptions.width / 2, mergedOptions.height / 2] : propsCenter;\n    mergedOptions.clustering = clustering && !!nodeClusterBy;\n    return mergedOptions;\n  }\n  runOneStep(calcGraph, clusterMap, options) {\n    const {\n      dimensions,\n      height,\n      width,\n      gravity,\n      center,\n      speed,\n      clustering,\n      nodeClusterBy,\n      clusterGravity: propsClusterGravity\n    } = options;\n    const area = height * width;\n    const maxDisplace = Math.sqrt(area) / 10;\n    const nodes = calcGraph.getAllNodes();\n    const k2 = area / (nodes.length + 1);\n    const k = Math.sqrt(k2);\n    const displacements = {};\n    this.applyCalculate(calcGraph, displacements, k, k2);\n    // gravity for clusters\n    if (clustering) {\n      // reset the clustering centers\n      for (const key in clusterMap) {\n        clusterMap[key].cx = 0;\n        clusterMap[key].cy = 0;\n        clusterMap[key].count = 0;\n      }\n      // re-compute clustering centers\n      nodes.forEach(node => {\n        const {\n          data\n        } = node; // node is one of layoutNodes, which is formatted and data field exists\n        const c = clusterMap[data[nodeClusterBy]];\n        if (isNumber(data.x)) {\n          c.cx += data.x;\n        }\n        if (isNumber(data.y)) {\n          c.cy += data.y;\n        }\n        c.count++;\n      });\n      for (const key in clusterMap) {\n        clusterMap[key].cx /= clusterMap[key].count;\n        clusterMap[key].cy /= clusterMap[key].count;\n      }\n      // compute the cluster gravity forces\n      const clusterGravity = propsClusterGravity || gravity;\n      nodes.forEach((node, j) => {\n        const {\n          id,\n          data\n        } = node;\n        if (!isNumber(data.x) || !isNumber(data.y)) return;\n        const c = clusterMap[data[nodeClusterBy]];\n        const distLength = Math.sqrt((data.x - c.cx) * (data.x - c.cx) + (data.y - c.cy) * (data.y - c.cy));\n        const gravityForce = k * clusterGravity;\n        displacements[id].x -= gravityForce * (data.x - c.cx) / distLength;\n        displacements[id].y -= gravityForce * (data.y - c.cy) / distLength;\n      });\n    }\n    // gravity\n    nodes.forEach((node, j) => {\n      const {\n        id,\n        data\n      } = node;\n      if (!isNumber(data.x) || !isNumber(data.y)) return;\n      const gravityForce = 0.01 * k * gravity;\n      displacements[id].x -= gravityForce * (data.x - center[0]);\n      displacements[id].y -= gravityForce * (data.y - center[1]);\n      if (dimensions === 3) {\n        displacements[id].z -= gravityForce * (data.z - center[2]);\n      }\n    });\n    // move\n    nodes.forEach((node, j) => {\n      const {\n        id,\n        data\n      } = node;\n      if (isNumber(data.fx) && isNumber(data.fy)) {\n        data.x = data.fx;\n        data.y = data.fy;\n        if (dimensions === 3) {\n          data.z = data.fz;\n        }\n        return;\n      }\n      if (!isNumber(data.x) || !isNumber(data.y)) return;\n      const distLength = Math.sqrt(displacements[id].x * displacements[id].x + displacements[id].y * displacements[id].y + (dimensions === 3 ? displacements[id].z * displacements[id].z : 0));\n      if (distLength > 0) {\n        // && !n.isFixed()\n        const limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n        calcGraph.mergeNodeData(id, {\n          x: data.x + displacements[id].x / distLength * limitedDist,\n          y: data.y + displacements[id].y / distLength * limitedDist,\n          z: dimensions === 3 ? data.z + displacements[id].z / distLength * limitedDist : undefined\n        });\n      }\n    });\n  }\n  applyCalculate(calcGraph, displacements, k, k2) {\n    this.calRepulsive(calcGraph, displacements, k2);\n    this.calAttractive(calcGraph, displacements, k);\n  }\n  calRepulsive(calcGraph, displacements, k2) {\n    const nodes = calcGraph.getAllNodes();\n    nodes.forEach(({\n      data: v,\n      id: vid\n    }, i) => {\n      displacements[vid] = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n      nodes.forEach(({\n        data: u,\n        id: uid\n      }, j) => {\n        if (i <= j || !isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n          return;\n        }\n        let vecX = v.x - u.x;\n        let vecY = v.y - u.y;\n        let vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n        let lengthSqr = vecX * vecX + vecY * vecY + vecZ * vecZ;\n        if (lengthSqr === 0) {\n          lengthSqr = 1;\n          vecX = 0.01;\n          vecY = 0.01;\n          vecZ = 0.01;\n        }\n        const common = k2 / lengthSqr;\n        const dispX = vecX * common;\n        const dispY = vecY * common;\n        const dispZ = vecZ * common;\n        displacements[vid].x += dispX;\n        displacements[vid].y += dispY;\n        displacements[uid].x -= dispX;\n        displacements[uid].y -= dispY;\n        if (this.options.dimensions === 3) {\n          displacements[vid].z += dispZ;\n          displacements[uid].z -= dispZ;\n        }\n      });\n    });\n  }\n  calAttractive(calcGraph, displacements, k) {\n    const edges = calcGraph.getAllEdges();\n    edges.forEach(e => {\n      const {\n        source,\n        target\n      } = e;\n      if (!source || !target || source === target) {\n        return;\n      }\n      const {\n        data: u\n      } = calcGraph.getNode(source);\n      const {\n        data: v\n      } = calcGraph.getNode(target);\n      if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n        return;\n      }\n      const vecX = v.x - u.x;\n      const vecY = v.y - u.y;\n      const vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n      const common = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ) / k;\n      const dispX = vecX * common;\n      const dispY = vecY * common;\n      const dispZ = vecZ * common;\n      displacements[source].x += dispX;\n      displacements[source].y += dispY;\n      displacements[target].x -= dispX;\n      displacements[target].y -= dispY;\n      if (this.options.dimensions === 3) {\n        displacements[source].z += dispZ;\n        displacements[target].z -= dispZ;\n      }\n    });\n  }\n}","map":{"version":3,"names":["Graph","IGraph","isNumber","cloneFormatData","DEFAULTS_LAYOUT_OPTIONS","maxIteration","gravity","speed","clustering","clusterGravity","width","height","nodeClusterBy","SPEED_DIVISOR","FruchtermanLayout","constructor","options","id","timeInterval","running","Object","assign","execute","graph","genericFruchtermanLayout","stop","window","clearInterval","tick","iterations","lastResult","i","runOneStep","lastGraph","lastClusterMap","lastOptions","result","nodes","lastLayoutNodes","edges","lastLayoutEdges","lastAssign","forEach","node","mergeNodeData","x","data","y","z","dimensions","undefined","formattedOptions","formatOptions","center","onTick","getAllNodes","getAllEdges","length","layoutNodes","map","calcGraph","clusterMap","clusterValue","name","cx","cy","count","iter","Promise","resolve","setInterval","mergedOptions","propsCenter","propsWidth","propsHeight","innerWidth","innerHeight","propsClusterGravity","area","maxDisplace","Math","sqrt","k2","k","displacements","applyCalculate","key","c","j","distLength","gravityForce","fx","fy","fz","limitedDist","min","calRepulsive","calAttractive","v","vid","u","uid","vecX","vecY","vecZ","lengthSqr","common","dispX","dispY","dispZ","e","source","target","getNode"],"sources":["../src/fruchterman.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}