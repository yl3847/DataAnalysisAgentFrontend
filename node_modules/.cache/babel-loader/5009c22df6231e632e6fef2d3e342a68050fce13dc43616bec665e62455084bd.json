{"ast":null,"code":"import { path2Curve } from '../convert/path-2-curve';\n/**\n * Returns the area of a single cubic-bezier segment.\n *\n * http://objectmix.com/graphics/133553-area-closed-bezier-curve.html\n */\nfunction getCubicSegArea(x1, y1, c1x, c1y, c2x, c2y, x2, y2) {\n  // https://stackoverflow.com/a/15845996\n  return 3 * ((y2 - y1) * (c1x + c2x) - (x2 - x1) * (c1y + c2y) + c1y * (x1 - c2x) - c1x * (y1 - c2y) + y2 * (c2x + x1 / 3) - x2 * (c2y + y1 / 3)) / 20;\n}\n/**\n * Returns the area of a shape.\n * @author Jürg Lehni & Jonathan Puckey\n *\n * @see https://github.com/paperjs/paper.js/blob/develop/src/path/Path.js\n */\nexport function getPathArea(path) {\n  var x = 0;\n  var y = 0;\n  var len = 0;\n  return path2Curve(path).map(function (seg) {\n    var _a;\n    switch (seg[0]) {\n      case 'M':\n        x = seg[1], y = seg[2];\n        return 0;\n      default:\n        // @ts-ignore\n        var _b = seg.slice(1),\n          c1x = _b[0],\n          c1y = _b[1],\n          c2x = _b[2],\n          c2y = _b[3],\n          x2 = _b[4],\n          y2 = _b[5];\n        len = getCubicSegArea(x, y, c1x, c1y, c2x, c2y, x2, y2);\n        _a = seg.slice(-2), x = _a[0], y = _a[1];\n        return len;\n    }\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n}\n// export function getPathArea(pathArray: AbsoluteArray) {\n//   let x = 0;\n//   let y = 0;\n//   let mx = 0;\n//   let my = 0;\n//   let len = 0;\n//   return pathArray\n//     .map((seg) => {\n//       switch (seg[0]) {\n//         case 'M':\n//         case 'Z':\n//           mx = seg[0] === 'M' ? seg[1] : mx;\n//           my = seg[0] === 'M' ? seg[2] : my;\n//           x = mx;\n//           y = my;\n//           return 0;\n//         default:\n//           // @ts-ignore\n//           len = getCubicSegArea.apply(0, [x, y].concat(seg.slice(1)));\n//           [x, y] = seg.slice(-2) as [number, number];\n//           return len;\n//       }\n//     })\n//     .reduce((a, b) => a + b, 0);\n// }","map":{"version":3,"names":["path2Curve","getCubicSegArea","x1","y1","c1x","c1y","c2x","c2y","x2","y2","getPathArea","path","x","y","len","map","seg","_b","slice","_a","reduce","a","b"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/util/get-path-area.ts"],"sourcesContent":["import type { PathArray } from '../types';\nimport { path2Curve } from '../convert/path-2-curve';\n\n/**\n * Returns the area of a single cubic-bezier segment.\n *\n * http://objectmix.com/graphics/133553-area-closed-bezier-curve.html\n */\nfunction getCubicSegArea(\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n) {\n  // https://stackoverflow.com/a/15845996\n  return (\n    (3 *\n      ((y2 - y1) * (c1x + c2x) -\n        (x2 - x1) * (c1y + c2y) +\n        c1y * (x1 - c2x) -\n        c1x * (y1 - c2y) +\n        y2 * (c2x + x1 / 3) -\n        x2 * (c2y + y1 / 3))) /\n    20\n  );\n}\n\n/**\n * Returns the area of a shape.\n * @author Jürg Lehni & Jonathan Puckey\n *\n * @see https://github.com/paperjs/paper.js/blob/develop/src/path/Path.js\n */\nexport function getPathArea(path: PathArray) {\n  let x = 0;\n  let y = 0;\n  let len = 0;\n\n  return path2Curve(path)\n    .map((seg) => {\n      switch (seg[0]) {\n        case 'M':\n          [, x, y] = seg;\n          return 0;\n        default:\n          // @ts-ignore\n          const [c1x, c1y, c2x, c2y, x2, y2] = seg.slice(1);\n\n          len = getCubicSegArea(x, y, c1x, c1y, c2x, c2y, x2, y2);\n          [x, y] = seg.slice(-2);\n          return len;\n      }\n    })\n    .reduce((a, b) => a + b, 0);\n}\n\n// export function getPathArea(pathArray: AbsoluteArray) {\n//   let x = 0;\n//   let y = 0;\n//   let mx = 0;\n//   let my = 0;\n//   let len = 0;\n//   return pathArray\n//     .map((seg) => {\n//       switch (seg[0]) {\n//         case 'M':\n//         case 'Z':\n//           mx = seg[0] === 'M' ? seg[1] : mx;\n//           my = seg[0] === 'M' ? seg[2] : my;\n//           x = mx;\n//           y = my;\n//           return 0;\n//         default:\n//           // @ts-ignore\n//           len = getCubicSegArea.apply(0, [x, y].concat(seg.slice(1)));\n//           [x, y] = seg.slice(-2) as [number, number];\n//           return len;\n//       }\n//     })\n//     .reduce((a, b) => a + b, 0);\n// }\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,yBAAyB;AAEpD;;;;;AAKA,SAASC,eAAeA,CACtBC,EAAU,EACVC,EAAU,EACVC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,EAAU,EACVC,EAAU;EAEV;EACA,OACG,CAAC,IACC,CAACA,EAAE,GAAGN,EAAE,KAAKC,GAAG,GAAGE,GAAG,CAAC,GACtB,CAACE,EAAE,GAAGN,EAAE,KAAKG,GAAG,GAAGE,GAAG,CAAC,GACvBF,GAAG,IAAIH,EAAE,GAAGI,GAAG,CAAC,GAChBF,GAAG,IAAID,EAAE,GAAGI,GAAG,CAAC,GAChBE,EAAE,IAAIH,GAAG,GAAGJ,EAAE,GAAG,CAAC,CAAC,GACnBM,EAAE,IAAID,GAAG,GAAGJ,EAAE,GAAG,CAAC,CAAC,CAAC,GACxB,EAAE;AAEN;AAEA;;;;;;AAMA,OAAM,SAAUO,WAAWA,CAACC,IAAe;EACzC,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,GAAG,GAAG,CAAC;EAEX,OAAOd,UAAU,CAACW,IAAI,CAAC,CACpBI,GAAG,CAAC,UAACC,GAAG;;IACP,QAAQA,GAAG,CAAC,CAAC,CAAC;MACZ,KAAK,GAAG;QACHJ,CAAC,GAAOI,GAAG,GAAV,EAAEH,CAAC,GAAIG,GAAG,GAAP;QACP,OAAO,CAAC;MACV;QACE;QACM,IAAAC,EAAA,GAA+BD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;UAA1Cd,GAAG,GAAAa,EAAA;UAAEZ,GAAG,GAAAY,EAAA;UAAEX,GAAG,GAAAW,EAAA;UAAEV,GAAG,GAAAU,EAAA;UAAET,EAAE,GAAAS,EAAA;UAAER,EAAE,GAAAQ,EAAA,GAAgB;QAEjDH,GAAG,GAAGb,eAAe,CAACW,CAAC,EAAEC,CAAC,EAAET,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,EAAE,EAAEC,EAAE,CAAC;QACvDU,EAAA,GAASH,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,EAArBN,CAAC,GAAAO,EAAA,KAAEN,CAAC,GAAAM,EAAA;QACL,OAAOL,GAAG;IACd;EACF,CAAC,CAAC,CACDM,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAK,OAAAD,CAAC,GAAGC,CAAC;EAAL,CAAK,EAAE,CAAC,CAAC;AAC/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}