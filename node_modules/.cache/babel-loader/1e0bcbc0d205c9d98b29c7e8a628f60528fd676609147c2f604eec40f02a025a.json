{"ast":null,"code":"import LinkedList from './linked-list';\nvar Stack = /** @class */function () {\n  function Stack(maxStep) {\n    if (maxStep === void 0) {\n      maxStep = 10;\n    }\n    this.linkedList = new LinkedList();\n    this.maxStep = maxStep;\n  }\n  Object.defineProperty(Stack.prototype, \"length\", {\n    get: function get() {\n      return this.linkedList.toArray().length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 判断栈是否为空，如果链表中没有头部元素，则栈为空\n   */\n  Stack.prototype.isEmpty = function () {\n    return !this.linkedList.head;\n  };\n  /**\n   * 是否到定义的栈的最大长度，如果达到最大长度后，不再允许入栈\n   */\n  Stack.prototype.isMaxStack = function () {\n    return this.toArray().length >= this.maxStep;\n  };\n  /**\n   * 访问顶端元素\n   */\n  Stack.prototype.peek = function () {\n    if (this.isEmpty()) {\n      return null;\n    }\n    // 返回头部元素，不删除元素\n    return this.linkedList.head.value;\n  };\n  Stack.prototype.push = function (value) {\n    this.linkedList.prepend(value);\n    if (this.length > this.maxStep) {\n      this.linkedList.deleteTail();\n    }\n  };\n  Stack.prototype.pop = function () {\n    var removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  };\n  Stack.prototype.toArray = function () {\n    return this.linkedList.toArray().map(function (node) {\n      return node.value;\n    });\n  };\n  Stack.prototype.clear = function () {\n    while (!this.isEmpty()) {\n      this.pop();\n    }\n  };\n  return Stack;\n}();\nexport default Stack;","map":{"version":3,"names":["LinkedList","Stack","maxStep","linkedList","Object","defineProperty","prototype","get","toArray","length","enumerable","configurable","isEmpty","head","isMaxStack","peek","value","push","prepend","deleteTail","pop","removeHead","deleteHead","map","node","clear"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/structs/stack.js"],"sourcesContent":["import LinkedList from './linked-list';\nvar Stack = /** @class */function () {\n  function Stack(maxStep) {\n    if (maxStep === void 0) {\n      maxStep = 10;\n    }\n    this.linkedList = new LinkedList();\n    this.maxStep = maxStep;\n  }\n  Object.defineProperty(Stack.prototype, \"length\", {\n    get: function get() {\n      return this.linkedList.toArray().length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 判断栈是否为空，如果链表中没有头部元素，则栈为空\n   */\n  Stack.prototype.isEmpty = function () {\n    return !this.linkedList.head;\n  };\n  /**\n   * 是否到定义的栈的最大长度，如果达到最大长度后，不再允许入栈\n   */\n  Stack.prototype.isMaxStack = function () {\n    return this.toArray().length >= this.maxStep;\n  };\n  /**\n   * 访问顶端元素\n   */\n  Stack.prototype.peek = function () {\n    if (this.isEmpty()) {\n      return null;\n    }\n    // 返回头部元素，不删除元素\n    return this.linkedList.head.value;\n  };\n  Stack.prototype.push = function (value) {\n    this.linkedList.prepend(value);\n    if (this.length > this.maxStep) {\n      this.linkedList.deleteTail();\n    }\n  };\n  Stack.prototype.pop = function () {\n    var removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  };\n  Stack.prototype.toArray = function () {\n    return this.linkedList.toArray().map(function (node) {\n      return node.value;\n    });\n  };\n  Stack.prototype.clear = function () {\n    while (!this.isEmpty()) {\n      this.pop();\n    }\n  };\n  return Stack;\n}();\nexport default Stack;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AACtC,IAAIC,KAAK,GAAG,aAAa,YAAY;EACnC,SAASA,KAAKA,CAACC,OAAO,EAAE;IACtB,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MACtBA,OAAO,GAAG,EAAE;IACd;IACA,IAAI,CAACC,UAAU,GAAG,IAAIH,UAAU,CAAC,CAAC;IAClC,IAAI,CAACE,OAAO,GAAGA,OAAO;EACxB;EACAE,MAAM,CAACC,cAAc,CAACJ,KAAK,CAACK,SAAS,EAAE,QAAQ,EAAE;IAC/CC,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACJ,UAAU,CAACK,OAAO,CAAC,CAAC,CAACC,MAAM;IACzC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF;AACF;AACA;EACEV,KAAK,CAACK,SAAS,CAACM,OAAO,GAAG,YAAY;IACpC,OAAO,CAAC,IAAI,CAACT,UAAU,CAACU,IAAI;EAC9B,CAAC;EACD;AACF;AACA;EACEZ,KAAK,CAACK,SAAS,CAACQ,UAAU,GAAG,YAAY;IACvC,OAAO,IAAI,CAACN,OAAO,CAAC,CAAC,CAACC,MAAM,IAAI,IAAI,CAACP,OAAO;EAC9C,CAAC;EACD;AACF;AACA;EACED,KAAK,CAACK,SAAS,CAACS,IAAI,GAAG,YAAY;IACjC,IAAI,IAAI,CAACH,OAAO,CAAC,CAAC,EAAE;MAClB,OAAO,IAAI;IACb;IACA;IACA,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAACG,KAAK;EACnC,CAAC;EACDf,KAAK,CAACK,SAAS,CAACW,IAAI,GAAG,UAAUD,KAAK,EAAE;IACtC,IAAI,CAACb,UAAU,CAACe,OAAO,CAACF,KAAK,CAAC;IAC9B,IAAI,IAAI,CAACP,MAAM,GAAG,IAAI,CAACP,OAAO,EAAE;MAC9B,IAAI,CAACC,UAAU,CAACgB,UAAU,CAAC,CAAC;IAC9B;EACF,CAAC;EACDlB,KAAK,CAACK,SAAS,CAACc,GAAG,GAAG,YAAY;IAChC,IAAIC,UAAU,GAAG,IAAI,CAAClB,UAAU,CAACmB,UAAU,CAAC,CAAC;IAC7C,OAAOD,UAAU,GAAGA,UAAU,CAACL,KAAK,GAAG,IAAI;EAC7C,CAAC;EACDf,KAAK,CAACK,SAAS,CAACE,OAAO,GAAG,YAAY;IACpC,OAAO,IAAI,CAACL,UAAU,CAACK,OAAO,CAAC,CAAC,CAACe,GAAG,CAAC,UAAUC,IAAI,EAAE;MACnD,OAAOA,IAAI,CAACR,KAAK;IACnB,CAAC,CAAC;EACJ,CAAC;EACDf,KAAK,CAACK,SAAS,CAACmB,KAAK,GAAG,YAAY;IAClC,OAAO,CAAC,IAAI,CAACb,OAAO,CAAC,CAAC,EAAE;MACtB,IAAI,CAACQ,GAAG,CAAC,CAAC;IACZ;EACF,CAAC;EACD,OAAOnB,KAAK;AACd,CAAC,CAAC,CAAC;AACH,eAAeA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}