{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { get, isNumber, isString, set } from '@antv/util';\nimport { BaseCombo, BaseEdge, BaseNode } from '../elements';\nimport { getBBoxHeight, getBBoxWidth } from './bbox';\nimport { isPoint } from './is';\nimport { findNearestPoints, getEllipseIntersectPoint } from './point';\nimport { getXYByPlacement } from './position';\n/**\n * <zh/> 判断是否是 Node 的实例\n *\n * <en/> Judge whether the instance is Node\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Node 的实例 | <en/> whether the instance is Node\n */\nexport function isNode(shape) {\n  return shape instanceof BaseNode && shape.type === 'node';\n}\n/**\n * <zh/> 判断是否是 Edge 的实例\n *\n * <en/> Judge whether the instance is Edge\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Edge 的实例 | <en/> whether the instance is Edge\n */\nexport function isEdge(shape) {\n  return shape instanceof BaseEdge;\n}\n/**\n * <zh/> 判断是否是 Combo 的实例\n *\n * <en/> Judge whether the instance is Combo\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Combo 的实例 | <en/> whether the instance is Combo\n */\nexport function isCombo(shape) {\n  return shape instanceof BaseCombo;\n}\n/**\n * <zh/> 判断是否是 Element 的实例\n *\n * <en/> Judge whether the instance is Element\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Element 的实例 | <en/> whether the instance is Element\n */\nexport function isElement(shape) {\n  return isNode(shape) || isEdge(shape) || isCombo(shape);\n}\n/**\n * <zh/> 判断两个节点是否相同\n *\n * <en/> Whether the two nodes are the same\n * @param node1 - <zh/> 节点1 | <en/> Node1\n * @param node2 - <zh/> 节点2 | <en/> Node2\n * @returns <zh/> 是否相同 | <en/> Whether the same\n */\nexport function isSameNode(node1, node2) {\n  if (!node1 || !node2) return false;\n  return node1 === node2;\n}\nconst PORT_MAP = {\n  top: [0.5, 0],\n  right: [1, 0.5],\n  bottom: [0.5, 1],\n  left: [0, 0.5],\n  'left-top': [0, 0],\n  'top-left': [0, 0],\n  'left-bottom': [0, 1],\n  'bottom-left': [0, 1],\n  'right-top': [1, 0],\n  'top-right': [1, 0],\n  'right-bottom': [1, 1],\n  'bottom-right': [1, 1],\n  default: [0.5, 0.5]\n};\n/**\n * Get the Port x, y by `position`.\n * @param bbox - BBox of element.\n * @param placement - The position relative with element.\n * @param portMap - The map of position.\n * @param isRelative - Whether the position in MAP is relative.\n * @returns [x, y]\n */\nexport function getPortXYByPlacement(bbox, placement, portMap = PORT_MAP, isRelative = true) {\n  const DEFAULT = [0.5, 0.5];\n  const p = isString(placement) ? get(portMap, placement.toLocaleLowerCase(), DEFAULT) : placement;\n  if (!isRelative && isString(placement)) return p;\n  const [x, y] = p || DEFAULT;\n  return [bbox.min[0] + getBBoxWidth(bbox) * x, bbox.min[1] + getBBoxHeight(bbox) * y];\n}\n/**\n * <zh/> 获取节点上的所有连接桩\n *\n * <en/> Get all ports\n * @param node - <zh/> 节点 | <en/> Node\n * @returns <zh/> 所有连接桩 | <en/> All Ports\n */\nexport function getAllPorts(node) {\n  if (!node) return {};\n  // 1. 需要绘制的连接桩 | Get the ports that need to be drawn\n  const ports = node.getPorts();\n  // 2. 不需要额外绘制的连接桩 | Get the ports that do not need to be drawn\n  const portsStyle = node.attributes.ports || [];\n  portsStyle.forEach((portStyle, i) => {\n    var _a;\n    const {\n      key,\n      placement\n    } = portStyle;\n    if (isSimplePort(portStyle)) {\n      ports[_a = key || i] || (ports[_a] = getXYByPlacement(node.getShape('key').getBounds(), placement));\n    }\n  });\n  return ports;\n}\n/**\n * <zh/> 是否为简单连接桩，如果是则不会额外绘制图形\n *\n * <en/> Whether it is a simple port, which will not draw additional graphics\n * @param portStyle - <zh/> 连接桩样式 | <en/> Port Style\n * @returns <zh/> 是否是简单连接桩 | <en/> Whether it is a simple port\n */\nexport function isSimplePort(portStyle) {\n  const {\n    r\n  } = portStyle;\n  return !r || Number(r) === 0;\n}\n/**\n * <zh/> 获取连接桩的位置\n *\n * <en/> Get the position of the port\n * @param port - <zh/> 连接桩 | <en/> Port\n * @returns <zh/> 连接桩的位置 | <en/> Port Position\n */\nexport function getPortPosition(port) {\n  return isPoint(port) ? port : port.getPosition();\n}\n/**\n * <zh/> 查找起始连接桩和目标连接桩\n *\n * <en/> Find the source port and target port\n * @param sourceNode - <zh/> 起始节点 | <en/> Source Node\n * @param targetNode - <zh/> 目标节点 | <en/> Target Node\n * @param sourcePortKey - <zh/> 起始连接桩的 key | <en/> Source Port Key\n * @param targetPortKey - <zh/> 目标连接桩的 key | <en/> Target Port Key\n * @returns <zh/> 起始连接桩和目标连接桩 | <en/> Source Port and Target Port\n */\nexport function findPorts(sourceNode, targetNode, sourcePortKey, targetPortKey) {\n  const sourcePort = findPort(sourceNode, targetNode, sourcePortKey, targetPortKey);\n  const targetPort = findPort(targetNode, sourceNode, targetPortKey, sourcePortKey);\n  return [sourcePort, targetPort];\n}\n/**\n * <zh/> 查找节点上的最有可能连接的连接桩\n *\n * <en/> Find the most likely connected port on the node\n * @remarks\n * 1. If `portKey` is specified, return the port.\n * 2. If `portKey` is not specified, return the port closest to the opposite connection points.\n * 3. If the node has no ports, return undefined.\n * @param node - <zh/> 节点 | <en/> Node\n * @param oppositeNode - <zh/> 对端节点 | <en/> Opposite Node\n * @param portKey - <zh/> 连接桩的键值（key） | <en/> Port Key\n * @param oppositePortKey - <zh/> 对端连接桩的 key | <en/> Opposite Port Key\n * @returns <zh/> 连接桩 | <en/> Port\n */\nexport function findPort(node, oppositeNode, portKey, oppositePortKey) {\n  const portsMap = getAllPorts(node);\n  if (portKey) return portsMap[portKey];\n  const ports = Object.values(portsMap);\n  if (ports.length === 0) return undefined;\n  const positions = ports.map(port => getPortPosition(port));\n  const oppositePositions = findConnectionPoints(oppositeNode, oppositePortKey);\n  const [nearestPosition] = findNearestPoints(positions, oppositePositions);\n  return ports.find(port => getPortPosition(port) === nearestPosition);\n}\n/**\n * <zh/> 寻找节点上所有可能的连接点\n *\n * <en/> Find all possible connection points on the node\n * @remarks\n * 1. If `portKey` is specified, return the position of the port.\n * 2. If `portKey` is not specified, return positions of all ports.\n * 3. If the node has no ports, return the center of the node.\n * @param node - <zh/> 节点 | <en/> Node\n * @param portKey - <zh/> 连接桩的键值（key），如不指定则返回所有 | <en/> Port Key, return all if not specified\n * @returns <zh/> 连接点 | <en/> Connection Point\n */\nfunction findConnectionPoints(node, portKey) {\n  const allPortsMap = getAllPorts(node);\n  if (portKey) return [getPortPosition(allPortsMap[portKey])];\n  const oppositePorts = Object.values(allPortsMap);\n  return oppositePorts.length > 0 ? oppositePorts.map(port => getPortPosition(port)) : [node.getCenter()];\n}\n/**\n * <zh/> 获取连接点, 即从节点或连接桩中心到另一端的连线在节点或连接桩边界上的交点\n *\n * <en/> Get the connection point\n * @param node - <zh/> 节点或连接桩 | <en/> Node or Port\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * @returns <zh/> 连接点 | <en/> Connection Point\n */\nexport function getConnectionPoint(node, opposite) {\n  return isCombo(node) || isNode(node) ? getNodeConnectionPoint(node, opposite) : getPortConnectionPoint(node, opposite);\n}\n/**\n * <zh/> 获取连接桩的连接点，即从连接桩中心到另一端的连线在连接桩边界上的交点\n *\n * <en/> Get the connection point of the port\n * @param port - <zh/> 连接桩 | <en/> Port\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * // @param oppositePort - <zh/> 对端连接桩 | <en/> Opposite Port\n * @returns <zh/> 连接桩的连接点 | <en/> Port Point\n */\nexport function getPortConnectionPoint(port, opposite) {\n  if (!port || !opposite) return [0, 0, 0];\n  if (isPoint(port)) return port;\n  // 1. linkToCenter 为 true，则返回连接桩的中心 | If linkToCenter is true, return the center of the port\n  if (port.attributes.linkToCenter) return port.getPosition();\n  // 2. 推导对端的具体点：如果是连接桩或节点，则返回它的中心；如果是具体点，则直接返回\n  // 2. Get a specific opposite point: if it is a port or a node, return its center; if it is a specific point, return directly\n  const oppositePosition = isPoint(opposite) ? opposite : isNode(opposite) ? opposite.getCenter() : opposite.getPosition();\n  // 3. 返回连接桩边界上的交点 | Return the intersection point on the port boundary\n  return getEllipseIntersectPoint(oppositePosition, port.getBounds());\n}\n/**\n * <zh/> 获取节点的连接点\n *\n * <en/> Get the Node Connection Point\n * @param nodeLike - <zh/> 节点或组合 | <en/> Node or Combo\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * // @param oppositePort - <zh/> 对端连接桩 | <en/> Opposite Port\n * @returns <zh/> 节点的连接点 | <en/> Node Point\n */\nexport function getNodeConnectionPoint(nodeLike, opposite) {\n  if (!nodeLike || !opposite) return [0, 0, 0];\n  const oppositePosition = isPoint(opposite) ? opposite : isNode(opposite) ? opposite.getCenter() : opposite.getPosition();\n  return nodeLike.getIntersectPoint(oppositePosition) || nodeLike.getCenter();\n}\n/**\n * Get the Text style by `position`.\n * @param bbox - BBox of element.\n * @param placement - The position relative with element.\n * @param offsetX - The offset x.\n * @param offsetY - The offset y.\n * @param isReverseBaseline - Whether reverse the baseline.\n * @returns Partial<TextStyleProps>\n */\nexport function getTextStyleByPlacement(bbox, placement = 'bottom', offsetX = 0, offsetY = 0, isReverseBaseline = false) {\n  const direction = placement.split('-');\n  const [x, y] = getXYByPlacement(bbox, placement);\n  const [top, bottom] = isReverseBaseline ? ['bottom', 'top'] : ['top', 'bottom'];\n  const textBaseline = direction.includes('top') ? bottom : direction.includes('bottom') ? top : 'middle';\n  const textAlign = direction.includes('left') ? 'right' : direction.includes('right') ? 'left' : 'center';\n  return {\n    transform: [['translate', x + offsetX, y + offsetY]],\n    textBaseline,\n    textAlign\n  };\n}\n/**\n * <zh/> 获取五角星的顶点\n *\n * <en/> Get Star Points\n * @param outerR - <zh/> 外半径 | <en/> outer radius\n * @param innerR - <zh/> 内半径 | <en/> inner radius\n * @returns <zh/> 五角星的顶点 | <en/> Star Points\n */\nexport function getStarPoints(outerR, innerR) {\n  return [[0, -outerR], [innerR * Math.cos(3 * Math.PI / 10), -innerR * Math.sin(3 * Math.PI / 10)], [outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)], [innerR * Math.cos(Math.PI / 10), innerR * Math.sin(Math.PI / 10)], [outerR * Math.cos(3 * Math.PI / 10), outerR * Math.sin(3 * Math.PI / 10)], [0, innerR], [-outerR * Math.cos(3 * Math.PI / 10), outerR * Math.sin(3 * Math.PI / 10)], [-innerR * Math.cos(Math.PI / 10), innerR * Math.sin(Math.PI / 10)], [-outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)], [-innerR * Math.cos(3 * Math.PI / 10), -innerR * Math.sin(3 * Math.PI / 10)]];\n}\n/**\n * Get Star Port Point.\n * @param outerR - outer radius\n * @param innerR - inner radius\n * @returns Port points for Star.\n */\nexport function getStarPorts(outerR, innerR) {\n  const r = {};\n  r['top'] = [0, -outerR];\n  r['left'] = [-outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)];\n  r['left-bottom'] = [-outerR * Math.cos(3 * Math.PI / 10), outerR * Math.sin(3 * Math.PI / 10)];\n  r['bottom'] = [0, innerR];\n  r['right-bottom'] = [outerR * Math.cos(3 * Math.PI / 10), outerR * Math.sin(3 * Math.PI / 10)];\n  r['right'] = r['default'] = [outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)];\n  return r;\n}\n/**\n * <zh/> 获取三角形的顶点\n *\n * <en/> Get the points of a triangle\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @param direction - <zh/> 三角形的方向 | <en/> The direction of the triangle\n * @returns <zh/> 矩形的顶点 | <en/> The points of a rectangle\n */\nexport function getTrianglePoints(width, height, direction) {\n  const halfHeight = height / 2;\n  const halfWidth = width / 2;\n  const MAP = {\n    up: [[-halfWidth, halfHeight], [halfWidth, halfHeight], [0, -halfHeight]],\n    left: [[-halfWidth, 0], [halfWidth, halfHeight], [halfWidth, -halfHeight]],\n    right: [[-halfWidth, halfHeight], [-halfWidth, -halfHeight], [halfWidth, 0]],\n    down: [[-halfWidth, -halfHeight], [halfWidth, -halfHeight], [0, halfHeight]]\n  };\n  return MAP[direction] || MAP['up'];\n}\n/**\n * <zh/> 获取三角形的连接桩\n *\n * <en/> Get the Ports of Triangle.\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @param direction - <zh/> 三角形的方向 | <en/> The direction of the triangle\n * @returns <zh/> 三角形的连接桩 | <en/> The Ports of Triangle\n */\nexport function getTrianglePorts(width, height, direction) {\n  const halfHeight = height / 2;\n  const halfWidth = width / 2;\n  const ports = {};\n  if (direction === 'down') {\n    ports['bottom'] = ports['default'] = [0, halfHeight];\n    ports['right'] = [halfWidth, -halfHeight];\n    ports['left'] = [-halfWidth, -halfHeight];\n  } else if (direction === 'left') {\n    ports['top'] = [halfWidth, -halfHeight];\n    ports['bottom'] = [halfWidth, halfHeight];\n    ports['left'] = ports['default'] = [-halfWidth, 0];\n  } else if (direction === 'right') {\n    ports['top'] = [-halfWidth, -halfHeight];\n    ports['bottom'] = [-halfWidth, halfHeight];\n    ports['right'] = ports['default'] = [halfWidth, 0];\n  } else {\n    //up\n    ports['left'] = [-halfWidth, halfHeight];\n    ports['top'] = ports['default'] = [0, -halfHeight];\n    ports['right'] = [halfWidth, halfHeight];\n  }\n  return ports;\n}\n/**\n * <zh/> 获取矩形的顶点\n *\n * <en/> Get the points of a rectangle\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @returns <zh/> 矩形的顶点 | <en/> The points of a rectangle\n */\nexport function getBoundingPoints(width, height) {\n  return [[width / 2, -height / 2], [width / 2, height / 2], [-width / 2, height / 2], [-width / 2, -height / 2]];\n}\n/**\n * Get Diamond PathArray.\n * @param width - diamond width\n * @param height - diamond height\n * @returns The PathArray for G\n */\nexport function getDiamondPoints(width, height) {\n  return [[0, -height / 2], [width / 2, 0], [0, height / 2], [-width / 2, 0]];\n}\n/**\n * <zh/> 元素是否可见\n *\n * <en/> Whether the element is visible\n * @param element - <zh/> 元素 | <en/> element\n * @returns <zh/> 是否可见 | <en/> whether the element is visible\n */\nexport function isVisible(element) {\n  return get(element, ['style', 'visibility']) !== 'hidden';\n}\n/**\n * <zh/> 设置元素属性（优化性能）\n *\n * <en/> Set element attributes (optimize performance)\n * @param element - <zh/> 元素 | <en/> element\n * @param style - <zh/> 样式 | <en/> style\n */\nexport function setAttributes(element, style) {\n  const {\n      zIndex,\n      transform,\n      transformOrigin,\n      visibility,\n      cursor,\n      clipPath,\n      component\n    } = style,\n    rest = __rest(style, [\"zIndex\", \"transform\", \"transformOrigin\", \"visibility\", \"cursor\", \"clipPath\", \"component\"]);\n  Object.assign(element.attributes, rest);\n  if (transform) element.setAttribute('transform', transform);\n  if (isNumber(zIndex)) element.setAttribute('zIndex', zIndex);\n  if (transformOrigin) element.setAttribute('transformOrigin', transformOrigin);\n  if (visibility) element.setAttribute('visibility', visibility);\n  if (cursor) element.setAttribute('cursor', cursor);\n  if (clipPath) element.setAttribute('clipPath', clipPath);\n  if (component) element.setAttribute('component', component);\n}\n/**\n * <zh/> 更新图形样式\n *\n * <en/> Update shape style\n * @param shape - <zh/> 图形 | <en/> shape\n * @param style - <zh/> 样式 | <en/> style\n */\nexport function updateStyle(shape, style) {\n  if ('update' in shape) shape.update(style);else shape.attr(style);\n}\n/**\n * Get Hexagon PathArray\n * @param outerR - <zh/> 外接圆半径 | <en/> the  radius of circumscribed circle\n *  @returns The PathArray for G\n */\nexport function getHexagonPoints(outerR) {\n  return [[0, outerR], [outerR * Math.sqrt(3) / 2, outerR / 2], [outerR * Math.sqrt(3) / 2, -outerR / 2], [0, -outerR], [-outerR * Math.sqrt(3) / 2, -outerR / 2], [-outerR * Math.sqrt(3) / 2, outerR / 2]];\n}\n/**\n * <zh/> 将图形标记为即将销毁，用于在 element controller 中识别要销毁的元素\n *\n * <en/> Mark the element as to be destroyed, used to identify the element to be destroyed in the element controller\n * @param element - <zh/> 图形 | <en/> element\n */\nexport function markToBeDestroyed(element) {\n  set(element, '__to_be_destroyed__', true);\n}\n/**\n * <zh/> 判断图形是否即将销毁\n *\n * <en/> Determine whether the element is to be destroyed\n * @param element - <zh/> 图形 | <en/> element\n * @returns <zh/> 是否即将销毁 | <en/> whether the element is to be destroyed\n */\nexport function isToBeDestroyed(element) {\n  return get(element, '__to_be_destroyed__', false);\n}","map":{"version":3,"names":["get","isNumber","isString","set","BaseCombo","BaseEdge","BaseNode","getBBoxHeight","getBBoxWidth","isPoint","findNearestPoints","getEllipseIntersectPoint","getXYByPlacement","isNode","shape","type","isEdge","isCombo","isElement","isSameNode","node1","node2","PORT_MAP","top","right","bottom","left","default","getPortXYByPlacement","bbox","placement","portMap","isRelative","DEFAULT","p","toLocaleLowerCase","x","y","min","getAllPorts","node","ports","getPorts","portsStyle","attributes","forEach","portStyle","i","key","isSimplePort","_a","getShape","getBounds","r","Number","getPortPosition","port","getPosition","findPorts","sourceNode","targetNode","sourcePortKey","targetPortKey","sourcePort","findPort","targetPort","oppositeNode","portKey","oppositePortKey","portsMap","Object","values","length","undefined","positions","map","oppositePositions","findConnectionPoints","nearestPosition","find","allPortsMap","oppositePorts","getCenter","getConnectionPoint","opposite","getNodeConnectionPoint","getPortConnectionPoint","linkToCenter","oppositePosition","nodeLike","getIntersectPoint","getTextStyleByPlacement","offsetX","offsetY","isReverseBaseline","direction","split","textBaseline","includes","textAlign","transform","getStarPoints","outerR","innerR","Math","cos","PI","sin","getStarPorts","getTrianglePoints","width","height","halfHeight","halfWidth","MAP","up","down","getTrianglePorts","getBoundingPoints","getDiamondPoints","isVisible","element","setAttributes","style","zIndex","transformOrigin","visibility","cursor","clipPath","component","rest","__rest","assign","setAttribute","updateStyle","update","attr","getHexagonPoints","sqrt","markToBeDestroyed","isToBeDestroyed"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/element.ts"],"sourcesContent":["import type { AABB, DisplayObject, TextStyleProps } from '@antv/g';\nimport { get, isNumber, isString, set } from '@antv/util';\nimport { BaseCombo, BaseEdge, BaseNode } from '../elements';\nimport type { BaseShape, BaseShapeStyleProps } from '../elements/shapes';\nimport type { Combo, Edge, Element, Node, NodePortStyleProps, Placement, Point, TriangleDirection } from '../types';\nimport type { NodeLabelStyleProps, Port } from '../types/node';\nimport { getBBoxHeight, getBBoxWidth } from './bbox';\nimport { isPoint } from './is';\nimport { findNearestPoints, getEllipseIntersectPoint } from './point';\nimport { getXYByPlacement } from './position';\n\n/**\n * <zh/> 判断是否是 Node 的实例\n *\n * <en/> Judge whether the instance is Node\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Node 的实例 | <en/> whether the instance is Node\n */\nexport function isNode(shape: DisplayObject | Port): shape is Node {\n  return shape instanceof BaseNode && shape.type === 'node';\n}\n\n/**\n * <zh/> 判断是否是 Edge 的实例\n *\n * <en/> Judge whether the instance is Edge\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Edge 的实例 | <en/> whether the instance is Edge\n */\nexport function isEdge(shape: DisplayObject): shape is Edge {\n  return shape instanceof BaseEdge;\n}\n\n/**\n * <zh/> 判断是否是 Combo 的实例\n *\n * <en/> Judge whether the instance is Combo\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Combo 的实例 | <en/> whether the instance is Combo\n */\nexport function isCombo(shape: any): shape is Combo {\n  return shape instanceof BaseCombo;\n}\n\n/**\n * <zh/> 判断是否是 Element 的实例\n *\n * <en/> Judge whether the instance is Element\n * @param shape - <zh/> 实例 | <en/> instance\n * @returns <zh/> 是否是 Element 的实例 | <en/> whether the instance is Element\n */\nexport function isElement(shape: any): shape is Element {\n  return isNode(shape) || isEdge(shape) || isCombo(shape);\n}\n\n/**\n * <zh/> 判断两个节点是否相同\n *\n * <en/> Whether the two nodes are the same\n * @param node1 - <zh/> 节点1 | <en/> Node1\n * @param node2 - <zh/> 节点2 | <en/> Node2\n * @returns <zh/> 是否相同 | <en/> Whether the same\n */\nexport function isSameNode(node1: Node, node2: Node): boolean {\n  if (!node1 || !node2) return false;\n  return node1 === node2;\n}\n\nconst PORT_MAP: Record<string, Point> = {\n  top: [0.5, 0],\n  right: [1, 0.5],\n  bottom: [0.5, 1],\n  left: [0, 0.5],\n  'left-top': [0, 0],\n  'top-left': [0, 0],\n  'left-bottom': [0, 1],\n  'bottom-left': [0, 1],\n  'right-top': [1, 0],\n  'top-right': [1, 0],\n  'right-bottom': [1, 1],\n  'bottom-right': [1, 1],\n  default: [0.5, 0.5],\n};\n\n/**\n * Get the Port x, y by `position`.\n * @param bbox - BBox of element.\n * @param placement - The position relative with element.\n * @param portMap - The map of position.\n * @param isRelative - Whether the position in MAP is relative.\n * @returns [x, y]\n */\nexport function getPortXYByPlacement(\n  bbox: AABB,\n  placement?: Placement,\n  portMap: Record<string, Point> = PORT_MAP,\n  isRelative = true,\n): Point {\n  const DEFAULT = [0.5, 0.5];\n  const p: [number, number] = isString(placement) ? get(portMap, placement.toLocaleLowerCase(), DEFAULT) : placement;\n\n  if (!isRelative && isString(placement)) return p;\n\n  const [x, y] = p || DEFAULT;\n  return [bbox.min[0] + getBBoxWidth(bbox) * x, bbox.min[1] + getBBoxHeight(bbox) * y];\n}\n\n/**\n * <zh/> 获取节点上的所有连接桩\n *\n * <en/> Get all ports\n * @param node - <zh/> 节点 | <en/> Node\n * @returns <zh/> 所有连接桩 | <en/> All Ports\n */\nexport function getAllPorts(node: Node): Record<string, Port> {\n  if (!node) return {};\n  // 1. 需要绘制的连接桩 | Get the ports that need to be drawn\n  const ports = node.getPorts();\n\n  // 2. 不需要额外绘制的连接桩 | Get the ports that do not need to be drawn\n  const portsStyle = node.attributes.ports || [];\n  portsStyle.forEach((portStyle: NodePortStyleProps, i: number) => {\n    const { key, placement } = portStyle;\n    if (isSimplePort(portStyle)) {\n      ports[key || i] ||= getXYByPlacement(node.getShape('key').getBounds(), placement);\n    }\n  });\n  return ports;\n}\n\n/**\n * <zh/> 是否为简单连接桩，如果是则不会额外绘制图形\n *\n * <en/> Whether it is a simple port, which will not draw additional graphics\n * @param portStyle - <zh/> 连接桩样式 | <en/> Port Style\n * @returns <zh/> 是否是简单连接桩 | <en/> Whether it is a simple port\n */\nexport function isSimplePort(portStyle: NodePortStyleProps): boolean {\n  const { r } = portStyle;\n  return !r || Number(r) === 0;\n}\n\n/**\n * <zh/> 获取连接桩的位置\n *\n * <en/> Get the position of the port\n * @param port - <zh/> 连接桩 | <en/> Port\n * @returns <zh/> 连接桩的位置 | <en/> Port Position\n */\nexport function getPortPosition(port: Port): Point {\n  return isPoint(port) ? port : port.getPosition();\n}\n\n/**\n * <zh/> 查找起始连接桩和目标连接桩\n *\n * <en/> Find the source port and target port\n * @param sourceNode - <zh/> 起始节点 | <en/> Source Node\n * @param targetNode - <zh/> 目标节点 | <en/> Target Node\n * @param sourcePortKey - <zh/> 起始连接桩的 key | <en/> Source Port Key\n * @param targetPortKey - <zh/> 目标连接桩的 key | <en/> Target Port Key\n * @returns <zh/> 起始连接桩和目标连接桩 | <en/> Source Port and Target Port\n */\nexport function findPorts(\n  sourceNode: Node,\n  targetNode: Node,\n  sourcePortKey?: string,\n  targetPortKey?: string,\n): [Port | undefined, Port | undefined] {\n  const sourcePort = findPort(sourceNode, targetNode, sourcePortKey, targetPortKey);\n  const targetPort = findPort(targetNode, sourceNode, targetPortKey, sourcePortKey);\n  return [sourcePort, targetPort];\n}\n\n/**\n * <zh/> 查找节点上的最有可能连接的连接桩\n *\n * <en/> Find the most likely connected port on the node\n * @remarks\n * 1. If `portKey` is specified, return the port.\n * 2. If `portKey` is not specified, return the port closest to the opposite connection points.\n * 3. If the node has no ports, return undefined.\n * @param node - <zh/> 节点 | <en/> Node\n * @param oppositeNode - <zh/> 对端节点 | <en/> Opposite Node\n * @param portKey - <zh/> 连接桩的键值（key） | <en/> Port Key\n * @param oppositePortKey - <zh/> 对端连接桩的 key | <en/> Opposite Port Key\n * @returns <zh/> 连接桩 | <en/> Port\n */\nexport function findPort(node: Node, oppositeNode: Node, portKey?: string, oppositePortKey?: string): Port | undefined {\n  const portsMap = getAllPorts(node);\n  if (portKey) return portsMap[portKey];\n\n  const ports = Object.values(portsMap);\n  if (ports.length === 0) return undefined;\n\n  const positions = ports.map((port) => getPortPosition(port));\n  const oppositePositions = findConnectionPoints(oppositeNode, oppositePortKey);\n  const [nearestPosition] = findNearestPoints(positions, oppositePositions);\n  return ports.find((port) => getPortPosition(port) === nearestPosition);\n}\n\n/**\n * <zh/> 寻找节点上所有可能的连接点\n *\n * <en/> Find all possible connection points on the node\n * @remarks\n * 1. If `portKey` is specified, return the position of the port.\n * 2. If `portKey` is not specified, return positions of all ports.\n * 3. If the node has no ports, return the center of the node.\n * @param node - <zh/> 节点 | <en/> Node\n * @param portKey - <zh/> 连接桩的键值（key），如不指定则返回所有 | <en/> Port Key, return all if not specified\n * @returns <zh/> 连接点 | <en/> Connection Point\n */\nfunction findConnectionPoints(node: Node, portKey?: string): Point[] {\n  const allPortsMap = getAllPorts(node);\n  if (portKey) return [getPortPosition(allPortsMap[portKey])];\n  const oppositePorts = Object.values(allPortsMap);\n  return oppositePorts.length > 0 ? oppositePorts.map((port) => getPortPosition(port)) : [node.getCenter()];\n}\n\n/**\n * <zh/> 获取连接点, 即从节点或连接桩中心到另一端的连线在节点或连接桩边界上的交点\n *\n * <en/> Get the connection point\n * @param node - <zh/> 节点或连接桩 | <en/> Node or Port\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * @returns <zh/> 连接点 | <en/> Connection Point\n */\nexport function getConnectionPoint(node: Port | Node | Combo, opposite: Node | Port): Point {\n  return isCombo(node) || isNode(node)\n    ? getNodeConnectionPoint(node, opposite)\n    : getPortConnectionPoint(node, opposite);\n}\n\n/**\n * <zh/> 获取连接桩的连接点，即从连接桩中心到另一端的连线在连接桩边界上的交点\n *\n * <en/> Get the connection point of the port\n * @param port - <zh/> 连接桩 | <en/> Port\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * // @param oppositePort - <zh/> 对端连接桩 | <en/> Opposite Port\n * @returns <zh/> 连接桩的连接点 | <en/> Port Point\n */\nexport function getPortConnectionPoint(port: Port, opposite: Node | Port): Point {\n  if (!port || !opposite) return [0, 0, 0];\n  if (isPoint(port)) return port;\n\n  // 1. linkToCenter 为 true，则返回连接桩的中心 | If linkToCenter is true, return the center of the port\n  if (port.attributes.linkToCenter) return port.getPosition();\n\n  // 2. 推导对端的具体点：如果是连接桩或节点，则返回它的中心；如果是具体点，则直接返回\n  // 2. Get a specific opposite point: if it is a port or a node, return its center; if it is a specific point, return directly\n  const oppositePosition = isPoint(opposite)\n    ? opposite\n    : isNode(opposite)\n      ? opposite.getCenter()\n      : opposite.getPosition();\n\n  // 3. 返回连接桩边界上的交点 | Return the intersection point on the port boundary\n  return getEllipseIntersectPoint(oppositePosition, port.getBounds());\n}\n\n/**\n * <zh/> 获取节点的连接点\n *\n * <en/> Get the Node Connection Point\n * @param nodeLike - <zh/> 节点或组合 | <en/> Node or Combo\n * @param opposite - <zh/> 对端的具体点或节点 | <en/> Opposite Point or Node\n * // @param oppositePort - <zh/> 对端连接桩 | <en/> Opposite Port\n * @returns <zh/> 节点的连接点 | <en/> Node Point\n */\nexport function getNodeConnectionPoint(nodeLike: Node | Combo, opposite: Node | Port): Point {\n  if (!nodeLike || !opposite) return [0, 0, 0];\n  const oppositePosition = isPoint(opposite)\n    ? opposite\n    : isNode(opposite)\n      ? opposite.getCenter()\n      : opposite.getPosition();\n  return nodeLike.getIntersectPoint(oppositePosition) || nodeLike.getCenter();\n}\n\n/**\n * Get the Text style by `position`.\n * @param bbox - BBox of element.\n * @param placement - The position relative with element.\n * @param offsetX - The offset x.\n * @param offsetY - The offset y.\n * @param isReverseBaseline - Whether reverse the baseline.\n * @returns Partial<TextStyleProps>\n */\nexport function getTextStyleByPlacement(\n  bbox: AABB,\n  placement: NodeLabelStyleProps['placement'] = 'bottom',\n  offsetX: number = 0,\n  offsetY: number = 0,\n  isReverseBaseline = false,\n): Partial<TextStyleProps> {\n  const direction = placement.split('-');\n  const [x, y] = getXYByPlacement(bbox, placement);\n\n  const [top, bottom]: TextStyleProps['textBaseline'][] = isReverseBaseline ? ['bottom', 'top'] : ['top', 'bottom'];\n\n  const textBaseline: TextStyleProps['textBaseline'] = direction.includes('top')\n    ? bottom\n    : direction.includes('bottom')\n      ? top\n      : 'middle';\n\n  const textAlign: TextStyleProps['textAlign'] = direction.includes('left')\n    ? 'right'\n    : direction.includes('right')\n      ? 'left'\n      : 'center';\n\n  return {\n    transform: [['translate', x + offsetX, y + offsetY]],\n    textBaseline,\n    textAlign,\n  };\n}\n\n/**\n * <zh/> 获取五角星的顶点\n *\n * <en/> Get Star Points\n * @param outerR - <zh/> 外半径 | <en/> outer radius\n * @param innerR - <zh/> 内半径 | <en/> inner radius\n * @returns <zh/> 五角星的顶点 | <en/> Star Points\n */\nexport function getStarPoints(outerR: number, innerR: number): Point[] {\n  return [\n    [0, -outerR],\n    [innerR * Math.cos((3 * Math.PI) / 10), -innerR * Math.sin((3 * Math.PI) / 10)],\n    [outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)],\n    [innerR * Math.cos(Math.PI / 10), innerR * Math.sin(Math.PI / 10)],\n    [outerR * Math.cos((3 * Math.PI) / 10), outerR * Math.sin((3 * Math.PI) / 10)],\n    [0, innerR],\n    [-outerR * Math.cos((3 * Math.PI) / 10), outerR * Math.sin((3 * Math.PI) / 10)],\n    [-innerR * Math.cos(Math.PI / 10), innerR * Math.sin(Math.PI / 10)],\n    [-outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)],\n    [-innerR * Math.cos((3 * Math.PI) / 10), -innerR * Math.sin((3 * Math.PI) / 10)],\n  ];\n}\n\n/**\n * Get Star Port Point.\n * @param outerR - outer radius\n * @param innerR - inner radius\n * @returns Port points for Star.\n */\nexport function getStarPorts(outerR: number, innerR: number): Record<string, Point> {\n  const r: Record<string, Point> = {};\n\n  r['top'] = [0, -outerR];\n\n  r['left'] = [-outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)];\n\n  r['left-bottom'] = [-outerR * Math.cos((3 * Math.PI) / 10), outerR * Math.sin((3 * Math.PI) / 10)];\n\n  r['bottom'] = [0, innerR];\n\n  r['right-bottom'] = [outerR * Math.cos((3 * Math.PI) / 10), outerR * Math.sin((3 * Math.PI) / 10)];\n\n  r['right'] = r['default'] = [outerR * Math.cos(Math.PI / 10), -outerR * Math.sin(Math.PI / 10)];\n\n  return r;\n}\n\n/**\n * <zh/> 获取三角形的顶点\n *\n * <en/> Get the points of a triangle\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @param direction - <zh/> 三角形的方向 | <en/> The direction of the triangle\n * @returns <zh/> 矩形的顶点 | <en/> The points of a rectangle\n */\nexport function getTrianglePoints(width: number, height: number, direction: TriangleDirection): Point[] {\n  const halfHeight = height / 2;\n  const halfWidth = width / 2;\n  const MAP: Record<TriangleDirection, Point[]> = {\n    up: [\n      [-halfWidth, halfHeight],\n      [halfWidth, halfHeight],\n      [0, -halfHeight],\n    ],\n    left: [\n      [-halfWidth, 0],\n      [halfWidth, halfHeight],\n      [halfWidth, -halfHeight],\n    ],\n    right: [\n      [-halfWidth, halfHeight],\n      [-halfWidth, -halfHeight],\n      [halfWidth, 0],\n    ],\n    down: [\n      [-halfWidth, -halfHeight],\n      [halfWidth, -halfHeight],\n      [0, halfHeight],\n    ],\n  };\n  return MAP[direction] || MAP['up'];\n}\n\n/**\n * <zh/> 获取三角形的连接桩\n *\n * <en/> Get the Ports of Triangle.\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @param direction - <zh/> 三角形的方向 | <en/> The direction of the triangle\n * @returns <zh/> 三角形的连接桩 | <en/> The Ports of Triangle\n */\nexport function getTrianglePorts(width: number, height: number, direction: TriangleDirection): Record<string, Point> {\n  const halfHeight = height / 2;\n  const halfWidth = width / 2;\n  const ports: Record<string, Point> = {};\n  if (direction === 'down') {\n    ports['bottom'] = ports['default'] = [0, halfHeight];\n    ports['right'] = [halfWidth, -halfHeight];\n    ports['left'] = [-halfWidth, -halfHeight];\n  } else if (direction === 'left') {\n    ports['top'] = [halfWidth, -halfHeight];\n    ports['bottom'] = [halfWidth, halfHeight];\n    ports['left'] = ports['default'] = [-halfWidth, 0];\n  } else if (direction === 'right') {\n    ports['top'] = [-halfWidth, -halfHeight];\n    ports['bottom'] = [-halfWidth, halfHeight];\n    ports['right'] = ports['default'] = [halfWidth, 0];\n  } else {\n    //up\n    ports['left'] = [-halfWidth, halfHeight];\n    ports['top'] = ports['default'] = [0, -halfHeight];\n    ports['right'] = [halfWidth, halfHeight];\n  }\n  return ports;\n}\n\n/**\n * <zh/> 获取矩形的顶点\n *\n * <en/> Get the points of a rectangle\n * @param width - <zh/> 宽度 | <en/> width\n * @param height - <zh/> 高度 | <en/> height\n * @returns <zh/> 矩形的顶点 | <en/> The points of a rectangle\n */\nexport function getBoundingPoints(width: number, height: number): Point[] {\n  return [\n    [width / 2, -height / 2],\n    [width / 2, height / 2],\n    [-width / 2, height / 2],\n    [-width / 2, -height / 2],\n  ];\n}\n\n/**\n * Get Diamond PathArray.\n * @param width - diamond width\n * @param height - diamond height\n * @returns The PathArray for G\n */\nexport function getDiamondPoints(width: number, height: number): Point[] {\n  return [\n    [0, -height / 2],\n    [width / 2, 0],\n    [0, height / 2],\n    [-width / 2, 0],\n  ];\n}\n/**\n * <zh/> 元素是否可见\n *\n * <en/> Whether the element is visible\n * @param element - <zh/> 元素 | <en/> element\n * @returns <zh/> 是否可见 | <en/> whether the element is visible\n */\nexport function isVisible(element: DisplayObject) {\n  return get(element, ['style', 'visibility']) !== 'hidden';\n}\n\n/**\n * <zh/> 设置元素属性（优化性能）\n *\n * <en/> Set element attributes (optimize performance)\n * @param element - <zh/> 元素 | <en/> element\n * @param style - <zh/> 样式 | <en/> style\n */\nexport function setAttributes(element: BaseShape<any>, style: Partial<BaseShapeStyleProps> & Record<string, any>) {\n  const { zIndex, transform, transformOrigin, visibility, cursor, clipPath, component, ...rest } = style;\n  Object.assign(element.attributes, rest);\n\n  if (transform) element.setAttribute('transform', transform);\n  if (isNumber(zIndex)) element.setAttribute('zIndex', zIndex);\n  if (transformOrigin) element.setAttribute('transformOrigin', transformOrigin);\n  if (visibility) element.setAttribute('visibility', visibility);\n  if (cursor) element.setAttribute('cursor', cursor);\n  if (clipPath) element.setAttribute('clipPath', clipPath);\n  if (component) element.setAttribute('component', component);\n}\n\n/**\n * <zh/> 更新图形样式\n *\n * <en/> Update shape style\n * @param shape - <zh/> 图形 | <en/> shape\n * @param style - <zh/> 样式 | <en/> style\n */\nexport function updateStyle<T extends DisplayObject>(shape: T, style: Record<string, unknown>) {\n  if ('update' in shape) (shape.update as (style: Record<string, unknown>) => void)(style);\n  else shape.attr(style);\n}\n\n/**\n * Get Hexagon PathArray\n * @param outerR - <zh/> 外接圆半径 | <en/> the  radius of circumscribed circle\n *  @returns The PathArray for G\n */\nexport function getHexagonPoints(outerR: number): Point[] {\n  return [\n    [0, outerR],\n    [(outerR * Math.sqrt(3)) / 2, outerR / 2],\n    [(outerR * Math.sqrt(3)) / 2, -outerR / 2],\n    [0, -outerR],\n    [(-outerR * Math.sqrt(3)) / 2, -outerR / 2],\n    [(-outerR * Math.sqrt(3)) / 2, outerR / 2],\n  ];\n}\n\n/**\n * <zh/> 将图形标记为即将销毁，用于在 element controller 中识别要销毁的元素\n *\n * <en/> Mark the element as to be destroyed, used to identify the element to be destroyed in the element controller\n * @param element - <zh/> 图形 | <en/> element\n */\nexport function markToBeDestroyed(element: DisplayObject) {\n  set(element, '__to_be_destroyed__', true);\n}\n\n/**\n * <zh/> 判断图形是否即将销毁\n *\n * <en/> Determine whether the element is to be destroyed\n * @param element - <zh/> 图形 | <en/> element\n * @returns <zh/> 是否即将销毁 | <en/> whether the element is to be destroyed\n */\nexport function isToBeDestroyed(element: DisplayObject) {\n  return get(element, '__to_be_destroyed__', false);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}