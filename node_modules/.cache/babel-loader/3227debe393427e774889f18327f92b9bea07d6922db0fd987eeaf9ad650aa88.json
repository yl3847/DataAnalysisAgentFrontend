{"ast":null,"code":"import { Graph } from '@antv/graphlib';\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nexport const buildLayerGraph = (g, rank, direction) => {\n  const root = createRootNode(g);\n  const result = new Graph({\n    tree: [{\n      id: root,\n      children: [],\n      data: {}\n    }]\n  });\n  g.getAllNodes().forEach(v => {\n    const parent = g.getParent(v.id);\n    if (v.data.rank === rank || v.data.minRank <= rank && rank <= v.data.maxRank) {\n      if (!result.hasNode(v.id)) {\n        result.addNode(Object.assign({}, v));\n      }\n      if ((parent === null || parent === void 0 ? void 0 : parent.id) && !result.hasNode(parent === null || parent === void 0 ? void 0 : parent.id)) {\n        result.addNode(Object.assign({}, parent));\n      }\n      result.setParent(v.id, (parent === null || parent === void 0 ? void 0 : parent.id) || root);\n      // This assumes we have only short edges!\n      g.getRelatedEdges(v.id, direction).forEach(e => {\n        const u = e.source === v.id ? e.target : e.source;\n        if (!result.hasNode(u)) {\n          result.addNode(Object.assign({}, g.getNode(u)));\n        }\n        const edge = result.getRelatedEdges(u, 'out').find(({\n          target\n        }) => target === v.id);\n        const weight = edge !== undefined ? edge.data.weight : 0;\n        if (!edge) {\n          result.addEdge({\n            id: e.id,\n            source: u,\n            target: v.id,\n            data: {\n              weight: e.data.weight + weight\n            }\n          });\n        } else {\n          result.updateEdgeData(edge.id, Object.assign(Object.assign({}, edge.data), {\n            weight: e.data.weight + weight\n          }));\n        }\n      });\n      // console.log(v);\n      if (v.data.hasOwnProperty('minRank')) {\n        result.updateNodeData(v.id, Object.assign(Object.assign({}, v.data), {\n          borderLeft: v.data.borderLeft[rank],\n          borderRight: v.data.borderRight[rank]\n        }));\n      }\n    }\n  });\n  return result;\n};\nconst createRootNode = g => {\n  let v;\n  while (g.hasNode(v = `_root${Math.random()}`));\n  return v;\n};","map":{"version":3,"names":["Graph","buildLayerGraph","g","rank","direction","root","createRootNode","result","tree","id","children","data","getAllNodes","forEach","v","parent","getParent","minRank","maxRank","hasNode","addNode","Object","assign","setParent","getRelatedEdges","e","u","source","target","getNode","edge","find","weight","undefined","addEdge","updateEdgeData","hasOwnProperty","updateNodeData","borderLeft","borderRight","Math","random"],"sources":["../../../src/antv-dagre/order/build-layer-graph.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}