{"ast":null,"code":"import dijkstra from './dijkstra';\nimport { getNeighbors } from './util';\nexport var findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = dijkstra(graphData, start, directed, weightPropertyName),\n    length = _a.length,\n    path = _a.path,\n    allPath = _a.allPath;\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\nexport var findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n    edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n  var allPath = [];\n  var neighbors = directed ? getNeighbors(start, edges, 'target') : getNeighbors(start, edges);\n  stack.push(neighbors);\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n    if (children.length) {\n      var child = children.shift();\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? getNeighbors(child, edges, 'target') : getNeighbors(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n  return allPath;\n};","map":{"version":3,"names":["dijkstra","getNeighbors","findShortestPath","graphData","start","end","directed","weightPropertyName","_a","length","path","allPath","findAllPath","_b","edges","visited","isVisited","stack","neighbors","push","children","child","shift","filter","neighbor","node","pop","map"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/find-path.js"],"sourcesContent":["import dijkstra from './dijkstra';\nimport { getNeighbors } from './util';\nexport var findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = dijkstra(graphData, start, directed, weightPropertyName),\n    length = _a.length,\n    path = _a.path,\n    allPath = _a.allPath;\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\nexport var findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n    edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n  var allPath = [];\n  var neighbors = directed ? getNeighbors(start, edges, 'target') : getNeighbors(start, edges);\n  stack.push(neighbors);\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n    if (children.length) {\n      var child = children.shift();\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? getNeighbors(child, edges, 'target') : getNeighbors(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n  return allPath;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}