{"ast":null,"code":"import { ShapeShape } from '../shape';\nimport { MaybeTuple, MaybeVisualPosition, MaybeFunctionAttribute } from '../transform';\nimport { basePreInference, createBandOffset, visualMark } from './utils';\nconst shape = {\n  shape: ShapeShape\n};\n/**\n * @todo Unify with text, image and point.\n */\nexport const Shape = options => {\n  const {\n    cartesian\n  } = options;\n  if (cartesian) return visualMark;\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y\n    } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, i => {\n      const p = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))];\n    });\n    return [index, P];\n  };\n};\nShape.props = {\n  defaultShape: 'shape',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [{\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeTuple\n  }, {\n    type: MaybeVisualPosition\n  }, {\n    type: MaybeFunctionAttribute\n  }]\n};","map":{"version":3,"names":["ShapeShape","MaybeTuple","MaybeVisualPosition","MaybeFunctionAttribute","basePreInference","createBandOffset","visualMark","shape","Shape","options","cartesian","index","scale","value","coordinate","x","X","y","Y","offset","P","Array","from","i","p","map","props","defaultShape","defaultLabelShape","composite","channels","name","required","preInference","type"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/shape.ts"],"sourcesContent":["import { Mark, MarkComponent as MC, Vector2 } from '../runtime';\nimport { ShapeMark } from '../spec';\nimport { ShapeShape } from '../shape';\nimport {\n  MaybeTuple,\n  MaybeVisualPosition,\n  MaybeFunctionAttribute,\n} from '../transform';\nimport { basePreInference, createBandOffset, visualMark } from './utils';\n\nconst shape = {\n  shape: ShapeShape,\n};\n\nexport type ShapeOptions = Omit<ShapeMark, 'type'>;\n\n/**\n * @todo Unify with text, image and point.\n */\nexport const Shape: MC<ShapeOptions> = (options) => {\n  const { cartesian } = options;\n  if (cartesian) return visualMark as Mark;\n  return (index, scale, value, coordinate) => {\n    const { x: X, y: Y } = value;\n    const offset = createBandOffset(scale, value, options);\n    const P = Array.from(index, (i) => {\n      const p: Vector2 = [+X[i], +Y[i]];\n      return [coordinate.map(offset(p, i))] as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nShape.props = {\n  defaultShape: 'shape',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    { name: 'x', required: true },\n    { name: 'y', required: true },\n  ],\n  preInference: [\n    ...basePreInference(),\n    { type: MaybeTuple },\n    { type: MaybeVisualPosition },\n    { type: MaybeFunctionAttribute },\n  ],\n};\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SACEC,UAAU,EACVC,mBAAmB,EACnBC,sBAAsB,QACjB,cAAc;AACrB,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,SAAS;AAExE,MAAMC,KAAK,GAAG;EACZA,KAAK,EAAEP;CACR;AAID;;;AAGA,OAAO,MAAMQ,KAAK,GAAsBC,OAAO,IAAI;EACjD,MAAM;IAAEC;EAAS,CAAE,GAAGD,OAAO;EAC7B,IAAIC,SAAS,EAAE,OAAOJ,UAAkB;EACxC,OAAO,CAACK,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAM;MAAEC,CAAC,EAAEC,CAAC;MAAEC,CAAC,EAAEC;IAAC,CAAE,GAAGL,KAAK;IAC5B,MAAMM,MAAM,GAAGd,gBAAgB,CAACO,KAAK,EAAEC,KAAK,EAAEJ,OAAO,CAAC;IACtD,MAAMW,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACX,KAAK,EAAGY,CAAC,IAAI;MAChC,MAAMC,CAAC,GAAY,CAAC,CAACR,CAAC,CAACO,CAAC,CAAC,EAAE,CAACL,CAAC,CAACK,CAAC,CAAC,CAAC;MACjC,OAAO,CAACT,UAAU,CAACW,GAAG,CAACN,MAAM,CAACK,CAAC,EAAED,CAAC,CAAC,CAAC,CAAc;IACpD,CAAC,CAAC;IACF,OAAO,CAACZ,KAAK,EAAES,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDZ,KAAK,CAACkB,KAAK,GAAG;EACZC,YAAY,EAAE,OAAO;EACrBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBtB,KAAK;EACLuB,QAAQ,EAAE,CACR;IAAEC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,CAC9B;EACDC,YAAY,EAAE,CACZ,GAAG7B,gBAAgB,EAAE,EACrB;IAAE8B,IAAI,EAAEjC;EAAU,CAAE,EACpB;IAAEiC,IAAI,EAAEhC;EAAmB,CAAE,EAC7B;IAAEgC,IAAI,EAAE/B;EAAsB,CAAE;CAEnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}