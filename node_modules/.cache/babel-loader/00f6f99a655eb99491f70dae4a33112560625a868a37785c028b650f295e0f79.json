{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Tooltip as TooltipComponent } from '@antv/component';\nimport { get } from '@antv/util';\nimport { isToBeDestroyed } from '../utils/element';\nimport { BasePlugin } from './base-plugin';\n/**\n * <zh/> 提示框插件\n *\n * <en/> Tooltip plugin\n */\nexport class Tooltip extends BasePlugin {\n  constructor(context, options) {\n    super(context, Object.assign({}, Tooltip.defaultOptions, options));\n    this.currentTarget = null;\n    this.tooltipElement = null;\n    this.container = null;\n    this.isEnable = (event, items) => {\n      const {\n        enable\n      } = this.options;\n      if (typeof enable === 'function') {\n        return enable(event, items);\n      }\n      return enable;\n    };\n    /**\n     * <zh/> 点击事件\n     *\n     * <en/> Click event\n     * @param event - <zh/> 元素 | <en/> element\n     */\n    this.onClick = event => {\n      const {\n        target: {\n          id\n        }\n      } = event;\n      // click the same item twice, tooltip will be hidden\n      if (this.currentTarget === id) {\n        this.hide(event);\n      } else {\n        this.show(event);\n      }\n    };\n    /**\n     * <zh/> 在目标元素(node/edge/combo)上移动\n     *\n     * <en/> Move on target element (node/edge/combo)\n     * @param event - <zh/> 目标元素 | <en/> target element\n     */\n    this.onPointerMove = event => {\n      const {\n        target\n      } = event;\n      if (!this.currentTarget || target.id === this.currentTarget) {\n        return;\n      }\n      this.show(event);\n    };\n    /**\n     * <zh/> 点击画布/触发拖拽/出现上下文菜单隐藏tooltip\n     *\n     * <en/> Hide tooltip when clicking canvas/triggering drag/appearing context menu\n     * @param event - <zh/> 目标元素 | <en/> target element\n     */\n    this.onPointerLeave = event => {\n      this.hide(event);\n    };\n    /**\n     * <zh/> 移动画布\n     *\n     * <en/> Move canvas\n     * @param event - <zh/> 目标元素 | <en/> target element\n     */\n    this.onCanvasMove = event => {\n      this.hide(event);\n    };\n    this.onPointerOver = event => {\n      this.show(event);\n    };\n    /**\n     * <zh/> 显示目标元素的提示框\n     *\n     * <en/> Show tooltip of target element\n     * @param id - <zh/> 元素 ID | <en/> element ID\n     */\n    this.showById = id => __awaiter(this, void 0, void 0, function* () {\n      const event = {\n        target: {\n          id\n        }\n      };\n      yield this.show(event);\n    });\n    this.getElementData = (id, targetType) => {\n      const {\n        model\n      } = this.context;\n      switch (targetType) {\n        case 'node':\n          return model.getNodeData([id]);\n        case 'edge':\n          return model.getEdgeData([id]);\n        case 'combo':\n          return model.getComboData([id]);\n        default:\n          return [];\n      }\n    };\n    /**\n     * <zh/> 在目标元素上显示tooltip\n     *\n     * <en/> Show tooltip on target element\n     * @param event - <zh/> 目标元素 | <en/> target element\n     * @internal\n     */\n    this.show = event => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b;\n      const {\n        client,\n        target: {\n          id\n        }\n      } = event;\n      if (isToBeDestroyed(event.target)) return;\n      const targetType = this.context.graph.getElementType(id);\n      const {\n        getContent,\n        title\n      } = this.options;\n      const items = this.getElementData(id, targetType);\n      if (!this.tooltipElement || !this.isEnable(event, items)) return;\n      let tooltipContent = {};\n      if (getContent) {\n        tooltipContent.content = yield getContent(event, items);\n        if (!tooltipContent.content) return;\n      } else {\n        const style = this.context.graph.getElementRenderStyle(id);\n        const color = targetType === 'node' ? style.fill : style.stroke;\n        tooltipContent = {\n          title: title || targetType,\n          data: items.map(item => {\n            return {\n              name: 'ID',\n              value: item.id || `${item.source} -> ${item.target}`,\n              color\n            };\n          })\n        };\n      }\n      this.currentTarget = id;\n      let x;\n      let y;\n      if (client) {\n        x = client.x;\n        y = client.y;\n      } else {\n        const style = get(items, '0.style', {\n          x: 0,\n          y: 0\n        });\n        x = style.x;\n        y = style.y;\n      }\n      (_b = (_a = this.options).onOpenChange) === null || _b === void 0 ? void 0 : _b.call(_a, true);\n      this.tooltipElement.update(Object.assign(Object.assign(Object.assign({}, this.tooltipStyleProps), {\n        x,\n        y,\n        style: {\n          '.tooltip': {\n            visibility: 'visible'\n          }\n        }\n      }), tooltipContent));\n    });\n    /**\n     * <zh/> 隐藏tooltip\n     *\n     * <en/> Hidden tooltip\n     * @param event - <zh/> 目标元素,不传则为外部调用 | <en/> Target element, not passed in as external call\n     */\n    this.hide = event => {\n      var _a, _b, _c, _d, _e;\n      // if e is undefined, hide the tooltip， external call\n      if (!event) {\n        (_b = (_a = this.options).onOpenChange) === null || _b === void 0 ? void 0 : _b.call(_a, false);\n        (_c = this.tooltipElement) === null || _c === void 0 ? void 0 : _c.hide();\n        this.currentTarget = null;\n        return;\n      }\n      if (!this.tooltipElement) return;\n      // No target node: tooltip has been hidden. No need for duplicated call.\n      if (!this.currentTarget) return;\n      const {\n        client: {\n          x,\n          y\n        }\n      } = event;\n      (_e = (_d = this.options).onOpenChange) === null || _e === void 0 ? void 0 : _e.call(_d, false);\n      this.tooltipElement.hide(x, y);\n      this.currentTarget = null;\n    };\n    this.initTooltip = () => {\n      var _a;\n      const tooltipElement = new TooltipComponent({\n        className: 'tooltip',\n        style: this.tooltipStyleProps\n      });\n      (_a = this.container) === null || _a === void 0 ? void 0 : _a.appendChild(tooltipElement.HTMLTooltipElement);\n      return tooltipElement;\n    };\n    this.render();\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 获取事件及处理事件的方法\n   *\n   * <en/> Get event and handle event methods\n   * @returns <zh/> 事件及处理事件的方法 | <en/> Event and handling event methods\n   */\n  getEvents() {\n    if (this.options.trigger === 'click') {\n      return {\n        'node:click': this.onClick,\n        'edge:click': this.onClick,\n        'combo:click': this.onClick,\n        'canvas:click': this.onPointerLeave,\n        contextmenu: this.onPointerLeave,\n        drag: this.onPointerLeave\n      };\n    }\n    return {\n      'node:pointerover': this.onPointerOver,\n      'node:pointermove': this.onPointerMove,\n      'canvas:pointermove': this.onCanvasMove,\n      'edge:pointerover': this.onPointerOver,\n      'edge:pointermove': this.onPointerMove,\n      'combo:pointerover': this.onPointerOver,\n      'combo:pointermove': this.onPointerMove,\n      contextmenu: this.onPointerLeave,\n      'node:drag': this.onPointerLeave\n    };\n  }\n  /**\n   * <zh/> 更新tooltip配置\n   *\n   * <en/> Update the tooltip configuration\n   * @param options - <zh/> 配置项 | <en/> options\n   * @internal\n   */\n  update(options) {\n    var _a;\n    this.unbindEvents();\n    super.update(options);\n    if (this.tooltipElement) {\n      (_a = this.container) === null || _a === void 0 ? void 0 : _a.removeChild(this.tooltipElement.HTMLTooltipElement);\n    }\n    this.tooltipElement = this.initTooltip();\n    this.bindEvents();\n  }\n  render() {\n    const {\n      canvas\n    } = this.context;\n    const $container = canvas.getContainer();\n    if (!$container) return;\n    this.container = $container;\n    this.tooltipElement = this.initTooltip();\n  }\n  unbindEvents() {\n    const {\n      graph\n    } = this.context;\n    /** The previous event binding needs to be removed when updating the trigger. */\n    const events = this.getEvents();\n    Object.keys(events).forEach(eventName => {\n      graph.off(eventName, events[eventName]);\n    });\n  }\n  bindEvents() {\n    const {\n      graph\n    } = this.context;\n    const events = this.getEvents();\n    Object.keys(events).forEach(eventName => {\n      graph.on(eventName, events[eventName]);\n    });\n  }\n  get tooltipStyleProps() {\n    const {\n      canvas\n    } = this.context;\n    const {\n      center\n    } = canvas.getBounds();\n    const $container = canvas.getContainer();\n    const {\n      top,\n      left\n    } = $container.getBoundingClientRect();\n    const {\n      style,\n      position,\n      enterable,\n      container = {\n        x: -left,\n        y: -top\n      },\n      title,\n      offset\n    } = this.options;\n    const [x, y] = center;\n    const [width, height] = canvas.getSize();\n    return {\n      x,\n      y,\n      container,\n      title,\n      bounding: {\n        x: 0,\n        y: 0,\n        width,\n        height\n      },\n      position,\n      enterable,\n      offset,\n      style\n    };\n  }\n  /**\n   * <zh/> 销毁tooltip\n   *\n   * <en/> Destroy tooltip\n   * @internal\n   */\n  destroy() {\n    var _a;\n    this.unbindEvents();\n    if (this.tooltipElement) {\n      (_a = this.container) === null || _a === void 0 ? void 0 : _a.removeChild(this.tooltipElement.HTMLTooltipElement);\n    }\n    super.destroy();\n  }\n}\nTooltip.defaultOptions = {\n  trigger: 'hover',\n  position: 'top-right',\n  enterable: false,\n  enable: true,\n  offset: [10, 10],\n  style: {\n    '.tooltip': {\n      visibility: 'hidden'\n    }\n  }\n};","map":{"version":3,"names":["Tooltip","TooltipComponent","get","isToBeDestroyed","BasePlugin","constructor","context","options","Object","assign","defaultOptions","currentTarget","tooltipElement","container","isEnable","event","items","enable","onClick","target","id","hide","show","onPointerMove","onPointerLeave","onCanvasMove","onPointerOver","showById","__awaiter","getElementData","targetType","model","getNodeData","getEdgeData","getComboData","client","graph","getElementType","getContent","title","tooltipContent","content","style","getElementRenderStyle","color","fill","stroke","data","map","item","name","value","source","x","y","_b","_a","onOpenChange","call","update","tooltipStyleProps","visibility","_c","_e","_d","initTooltip","className","appendChild","HTMLTooltipElement","render","bindEvents","getEvents","trigger","contextmenu","drag","unbindEvents","removeChild","canvas","$container","getContainer","events","keys","forEach","eventName","off","on","center","getBounds","top","left","getBoundingClientRect","position","enterable","offset","width","height","getSize","bounding","destroy"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/tooltip.ts"],"sourcesContent":["import type { TooltipStyleProps } from '@antv/component';\nimport { Tooltip as TooltipComponent } from '@antv/component';\nimport { get } from '@antv/util';\nimport type { RuntimeContext } from '../runtime/types';\nimport type { ElementDatum, ElementType, ID, IElementEvent } from '../types';\nimport { isToBeDestroyed } from '../utils/element';\nimport type { BasePluginOptions } from './base-plugin';\nimport { BasePlugin } from './base-plugin';\n\n/**\n * <zh/> 提示框插件配置项\n *\n * <en/> Tooltip plugin options\n */\nexport interface TooltipOptions\n  extends BasePluginOptions,\n    Pick<TooltipStyleProps, 'position' | 'offset' | 'enterable' | 'style' | 'container' | 'title'> {\n  /**\n   *  <zh/> 触发行为，可选 hover | click\n   * - `'hover'`：鼠标移入元素时触发\n   * - `'click'`：鼠标点击元素时触发\n   *\n   *  <en/> Trigger behavior, optional hover | click\n   * - `'hover'`：mouse hover element\n   * - `'click'`：mouse click element\n   * @defaultValue 'hover\n   */\n  trigger?: 'hover' | 'click';\n  /**\n   *  <zh/> 自定义内容\n   *\n   *  <en/> Function for getting tooltip content\n   */\n  getContent?: (event: IElementEvent, items: ElementDatum[]) => Promise<HTMLElement | string>;\n  /**\n   *  <zh/> 是否启用\n   *\n   *  <en/> Is enable\n   *  @defaultValue true\n   */\n  enable?: boolean | ((event: IElementEvent, items: ElementDatum[]) => boolean);\n  /**\n   * <zh/> 显示隐藏的回调\n   *\n   * <en/> Callback executed when visibility of the tooltip card is changed\n   */\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * <zh/> 提示框插件\n *\n * <en/> Tooltip plugin\n */\nexport class Tooltip extends BasePlugin<TooltipOptions> {\n  static defaultOptions: Partial<TooltipOptions> = {\n    trigger: 'hover',\n    position: 'top-right',\n    enterable: false,\n    enable: true,\n    offset: [10, 10],\n    style: {\n      '.tooltip': {\n        visibility: 'hidden',\n      },\n    },\n  };\n  private currentTarget: string | null = null;\n  private tooltipElement: TooltipComponent | null = null;\n  private container: HTMLElement | null = null;\n\n  constructor(context: RuntimeContext, options: TooltipOptions) {\n    super(context, Object.assign({}, Tooltip.defaultOptions, options));\n    this.render();\n    this.bindEvents();\n  }\n\n  /**\n   * <zh/> 获取事件及处理事件的方法\n   *\n   * <en/> Get event and handle event methods\n   * @returns <zh/> 事件及处理事件的方法 | <en/> Event and handling event methods\n   */\n  private getEvents(): { [key: string]: (event: IElementEvent) => void } {\n    if (this.options.trigger === 'click') {\n      return {\n        'node:click': this.onClick,\n        'edge:click': this.onClick,\n        'combo:click': this.onClick,\n        'canvas:click': this.onPointerLeave,\n        contextmenu: this.onPointerLeave,\n        drag: this.onPointerLeave,\n      };\n    }\n\n    return {\n      'node:pointerover': this.onPointerOver,\n      'node:pointermove': this.onPointerMove,\n      'canvas:pointermove': this.onCanvasMove,\n      'edge:pointerover': this.onPointerOver,\n      'edge:pointermove': this.onPointerMove,\n      'combo:pointerover': this.onPointerOver,\n      'combo:pointermove': this.onPointerMove,\n      contextmenu: this.onPointerLeave,\n      'node:drag': this.onPointerLeave,\n    };\n  }\n  /**\n   * <zh/> 更新tooltip配置\n   *\n   * <en/> Update the tooltip configuration\n   * @param options - <zh/> 配置项 | <en/> options\n   * @internal\n   */\n  public update(options: Partial<TooltipOptions>) {\n    this.unbindEvents();\n    super.update(options);\n    if (this.tooltipElement) {\n      this.container?.removeChild(this.tooltipElement.HTMLTooltipElement);\n    }\n    this.tooltipElement = this.initTooltip();\n    this.bindEvents();\n  }\n\n  private render() {\n    const { canvas } = this.context;\n    const $container = canvas.getContainer();\n    if (!$container) return;\n    this.container = $container;\n    this.tooltipElement = this.initTooltip();\n  }\n\n  private unbindEvents() {\n    const { graph } = this.context;\n    /** The previous event binding needs to be removed when updating the trigger. */\n    const events = this.getEvents();\n    Object.keys(events).forEach((eventName) => {\n      graph.off(eventName, events[eventName]);\n    });\n  }\n\n  private bindEvents() {\n    const { graph } = this.context;\n    const events = this.getEvents();\n    Object.keys(events).forEach((eventName) => {\n      graph.on(eventName, events[eventName]);\n    });\n  }\n\n  private isEnable = (event: IElementEvent, items: ElementDatum[]) => {\n    const { enable } = this.options;\n    if (typeof enable === 'function') {\n      return enable(event, items);\n    }\n    return enable;\n  };\n\n  /**\n   * <zh/> 点击事件\n   *\n   * <en/> Click event\n   * @param event - <zh/> 元素 | <en/> element\n   */\n  public onClick = (event: IElementEvent) => {\n    const {\n      target: { id },\n    } = event;\n    // click the same item twice, tooltip will be hidden\n    if (this.currentTarget === id) {\n      this.hide(event);\n    } else {\n      this.show(event);\n    }\n  };\n\n  /**\n   * <zh/> 在目标元素(node/edge/combo)上移动\n   *\n   * <en/> Move on target element (node/edge/combo)\n   * @param event - <zh/> 目标元素 | <en/> target element\n   */\n  public onPointerMove = (event: IElementEvent) => {\n    const { target } = event;\n    if (!this.currentTarget || target.id === this.currentTarget) {\n      return;\n    }\n    this.show(event);\n  };\n  /**\n   * <zh/> 点击画布/触发拖拽/出现上下文菜单隐藏tooltip\n   *\n   * <en/> Hide tooltip when clicking canvas/triggering drag/appearing context menu\n   * @param event - <zh/> 目标元素 | <en/> target element\n   */\n  public onPointerLeave = (event: IElementEvent) => {\n    this.hide(event);\n  };\n  /**\n   * <zh/> 移动画布\n   *\n   * <en/> Move canvas\n   * @param event - <zh/> 目标元素 | <en/> target element\n   */\n  public onCanvasMove = (event: IElementEvent) => {\n    this.hide(event);\n  };\n\n  private onPointerOver = (event: IElementEvent) => {\n    this.show(event);\n  };\n\n  /**\n   * <zh/> 显示目标元素的提示框\n   *\n   * <en/> Show tooltip of target element\n   * @param id - <zh/> 元素 ID | <en/> element ID\n   */\n  public showById = async (id: ID) => {\n    const event = {\n      target: { id },\n    } as IElementEvent;\n    await this.show(event);\n  };\n\n  private getElementData = (id: ID, targetType: ElementType) => {\n    const { model } = this.context;\n    switch (targetType) {\n      case 'node':\n        return model.getNodeData([id]);\n      case 'edge':\n        return model.getEdgeData([id]);\n      case 'combo':\n        return model.getComboData([id]);\n      default:\n        return [];\n    }\n  };\n\n  /**\n   * <zh/> 在目标元素上显示tooltip\n   *\n   * <en/> Show tooltip on target element\n   * @param event - <zh/> 目标元素 | <en/> target element\n   * @internal\n   */\n  public show = async (event: IElementEvent) => {\n    const {\n      client,\n      target: { id },\n    } = event;\n    if (isToBeDestroyed(event.target)) return;\n\n    const targetType = this.context.graph.getElementType(id);\n    const { getContent, title } = this.options;\n    const items: ElementDatum[] = this.getElementData(id, targetType as ElementType);\n\n    if (!this.tooltipElement || !this.isEnable(event, items)) return;\n\n    let tooltipContent: { [key: string]: unknown } = {};\n    if (getContent) {\n      tooltipContent.content = await getContent(event, items);\n      if (!tooltipContent.content) return;\n    } else {\n      const style = this.context.graph.getElementRenderStyle(id);\n      const color = targetType === 'node' ? style.fill : style.stroke;\n      tooltipContent = {\n        title: title || targetType,\n        data: items.map((item) => {\n          return {\n            name: 'ID',\n            value: item.id || `${item.source} -> ${item.target}`,\n            color,\n          };\n        }),\n      };\n    }\n\n    this.currentTarget = id;\n\n    let x;\n    let y;\n    if (client) {\n      x = client.x;\n      y = client.y;\n    } else {\n      const style = get(items, '0.style', { x: 0, y: 0 });\n      x = style.x;\n      y = style.y;\n    }\n\n    this.options.onOpenChange?.(true);\n    this.tooltipElement.update({\n      ...this.tooltipStyleProps,\n      x,\n      y,\n      style: {\n        '.tooltip': {\n          visibility: 'visible',\n        },\n      },\n      ...tooltipContent,\n    });\n  };\n  /**\n   * <zh/> 隐藏tooltip\n   *\n   * <en/> Hidden tooltip\n   * @param event - <zh/> 目标元素,不传则为外部调用 | <en/> Target element, not passed in as external call\n   */\n  public hide = (event?: IElementEvent) => {\n    // if e is undefined, hide the tooltip， external call\n    if (!event) {\n      this.options.onOpenChange?.(false);\n      this.tooltipElement?.hide();\n      this.currentTarget = null;\n      return;\n    }\n    if (!this.tooltipElement) return;\n    // No target node: tooltip has been hidden. No need for duplicated call.\n    if (!this.currentTarget) return;\n    const {\n      client: { x, y },\n    } = event;\n    this.options.onOpenChange?.(false);\n    this.tooltipElement.hide(x, y);\n    this.currentTarget = null;\n  };\n\n  private get tooltipStyleProps() {\n    const { canvas } = this.context;\n    const { center } = canvas.getBounds();\n    const $container = canvas.getContainer() as HTMLElement;\n    const { top, left } = $container.getBoundingClientRect();\n    const { style, position, enterable, container = { x: -left, y: -top }, title, offset } = this.options;\n    const [x, y] = center;\n    const [width, height] = canvas.getSize();\n\n    return {\n      x,\n      y,\n      container,\n      title,\n      bounding: { x: 0, y: 0, width, height },\n      position,\n      enterable,\n      offset,\n      style,\n    };\n  }\n\n  private initTooltip = () => {\n    const tooltipElement = new TooltipComponent({\n      className: 'tooltip',\n      style: this.tooltipStyleProps,\n    });\n    this.container?.appendChild(tooltipElement.HTMLTooltipElement);\n    return tooltipElement;\n  };\n\n  /**\n   * <zh/> 销毁tooltip\n   *\n   * <en/> Destroy tooltip\n   * @internal\n   */\n  public destroy(): void {\n    this.unbindEvents();\n    if (this.tooltipElement) {\n      this.container?.removeChild(this.tooltipElement.HTMLTooltipElement);\n    }\n    super.destroy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}