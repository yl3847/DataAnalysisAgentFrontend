{"ast":null,"code":"import { getCubicPath, getCurveControlPoint, parseCurveOffset, parseCurvePosition } from '../../utils/edge';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseEdge } from './base-edge';\n/**\n * <zh/> 三次贝塞尔曲线\n *\n * <en/> Cubic Bezier curve\n */\nexport class Cubic extends BaseEdge {\n  constructor(options) {\n    super(mergeOptions({\n      style: Cubic.defaultStyleProps\n    }, options));\n  }\n  /**\n   * @inheritdoc\n   */\n  getKeyPath(attributes) {\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n    const {\n      controlPoints,\n      curvePosition,\n      curveOffset\n    } = attributes;\n    const actualControlPoints = this.getControlPoints(sourcePoint, targetPoint, parseCurvePosition(curvePosition), parseCurveOffset(curveOffset), controlPoints);\n    return getCubicPath(sourcePoint, targetPoint, actualControlPoints);\n  }\n  getControlPoints(sourcePoint, targetPoint, curvePosition, curveOffset, controlPoints) {\n    return (controlPoints === null || controlPoints === void 0 ? void 0 : controlPoints.length) === 2 ? controlPoints : [getCurveControlPoint(sourcePoint, targetPoint, curvePosition[0], curveOffset[0]), getCurveControlPoint(sourcePoint, targetPoint, curvePosition[1], curveOffset[1])];\n  }\n}\nCubic.defaultStyleProps = {\n  curvePosition: 0.5,\n  curveOffset: 20\n};","map":{"version":3,"names":["getCubicPath","getCurveControlPoint","parseCurveOffset","parseCurvePosition","mergeOptions","BaseEdge","Cubic","constructor","options","style","defaultStyleProps","getKeyPath","attributes","sourcePoint","targetPoint","getEndpoints","controlPoints","curvePosition","curveOffset","actualControlPoints","getControlPoints","length"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/edges/cubic.ts"],"sourcesContent":["import type { DisplayObjectConfig } from '@antv/g';\nimport type { PathArray } from '@antv/util';\nimport type { Point } from '../../types';\nimport { getCubicPath, getCurveControlPoint, parseCurveOffset, parseCurvePosition } from '../../utils/edge';\nimport { mergeOptions } from '../../utils/style';\nimport type { BaseEdgeStyleProps } from './base-edge';\nimport { BaseEdge } from './base-edge';\n\n/**\n * <zh/> 三次贝塞尔曲线样式配置项\n *\n * <en/> Cubic Bezier curve style properties\n */\nexport interface CubicStyleProps extends BaseEdgeStyleProps {\n  /**\n   * <zh/> 控制点数组，用于定义曲线的形状。如果不指定，将会通过 `curveOffset` 和 `curvePosition` 来计算控制点\n   *\n   * <en/> Control points. Used to define the shape of the curve. If not specified, it will be calculated using `curveOffset` and `curvePosition`.\n   */\n  controlPoints?: [Point, Point];\n  /**\n   * <zh/> 控制点在两端点连线上的相对位置，范围为`0-1`\n   *\n   * <en/> The relative position of the control point on the line, ranging from `0-1`\n   * @defaultValue 0.5\n   */\n  curvePosition?: number | [number, number];\n  /**\n   * <zh/> 控制点距离两端点连线的距离，可理解为控制边的弯曲程度\n   *\n   * <en/> The distance of the control point from the line\n   * @defaultValue 20\n   */\n  curveOffset?: number | [number, number];\n}\n\ntype ParsedCubicStyleProps = Required<CubicStyleProps>;\n\n/**\n * <zh/> 三次贝塞尔曲线\n *\n * <en/> Cubic Bezier curve\n */\nexport class Cubic extends BaseEdge {\n  static defaultStyleProps: Partial<CubicStyleProps> = {\n    curvePosition: 0.5,\n    curveOffset: 20,\n  };\n\n  constructor(options: DisplayObjectConfig<CubicStyleProps>) {\n    super(mergeOptions({ style: Cubic.defaultStyleProps }, options));\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected getKeyPath(attributes: ParsedCubicStyleProps): PathArray {\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n    const { controlPoints, curvePosition, curveOffset } = attributes;\n\n    const actualControlPoints = this.getControlPoints(\n      sourcePoint,\n      targetPoint,\n      parseCurvePosition(curvePosition),\n      parseCurveOffset(curveOffset),\n      controlPoints,\n    );\n\n    return getCubicPath(sourcePoint, targetPoint, actualControlPoints);\n  }\n\n  protected getControlPoints(\n    sourcePoint: Point,\n    targetPoint: Point,\n    curvePosition: [number, number],\n    curveOffset: [number, number],\n    controlPoints?: [Point, Point],\n  ): [Point, Point] {\n    return controlPoints?.length === 2\n      ? controlPoints\n      : [\n          getCurveControlPoint(sourcePoint, targetPoint, curvePosition[0], curveOffset[0]),\n          getCurveControlPoint(sourcePoint, targetPoint, curvePosition[1], curveOffset[1]),\n        ];\n  }\n}\n"],"mappings":"AAGA,SAASA,YAAY,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC3G,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,SAASC,QAAQ,QAAQ,aAAa;AAgCtC;;;;;AAKA,OAAM,MAAOC,KAAM,SAAQD,QAAQ;EAMjCE,YAAYC,OAA6C;IACvD,KAAK,CAACJ,YAAY,CAAC;MAAEK,KAAK,EAAEH,KAAK,CAACI;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EAClE;EAEA;;;EAGUG,UAAUA,CAACC,UAAiC;IACpD,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAG,IAAI,CAACC,YAAY,CAACH,UAAU,CAAC;IAChE,MAAM;MAAEI,aAAa;MAAEC,aAAa;MAAEC;IAAW,CAAE,GAAGN,UAAU;IAEhE,MAAMO,mBAAmB,GAAG,IAAI,CAACC,gBAAgB,CAC/CP,WAAW,EACXC,WAAW,EACXX,kBAAkB,CAACc,aAAa,CAAC,EACjCf,gBAAgB,CAACgB,WAAW,CAAC,EAC7BF,aAAa,CACd;IAED,OAAOhB,YAAY,CAACa,WAAW,EAAEC,WAAW,EAAEK,mBAAmB,CAAC;EACpE;EAEUC,gBAAgBA,CACxBP,WAAkB,EAClBC,WAAkB,EAClBG,aAA+B,EAC/BC,WAA6B,EAC7BF,aAA8B;IAE9B,OAAO,CAAAA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,MAAM,MAAK,CAAC,GAC9BL,aAAa,GACb,CACEf,oBAAoB,CAACY,WAAW,EAAEC,WAAW,EAAEG,aAAa,CAAC,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC,EAChFjB,oBAAoB,CAACY,WAAW,EAAEC,WAAW,EAAEG,aAAa,CAAC,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC,CACjF;EACP;;AAxCOZ,KAAA,CAAAI,iBAAiB,GAA6B;EACnDO,aAAa,EAAE,GAAG;EAClBC,WAAW,EAAE;CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}