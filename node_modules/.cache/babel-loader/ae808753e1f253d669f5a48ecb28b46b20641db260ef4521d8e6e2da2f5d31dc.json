{"ast":null,"code":"import { BoxShape, BoxViolin } from '../shape';\nimport { MaybeZeroX } from '../transform';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip1d } from './utils';\nconst shape = {\n  box: BoxShape,\n  violin: BoxViolin\n};\n/**\n * Convert value for each channel to box shapes.\n *\n * p0           p2          p1\n *    ──────────┬──────────\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │ p3\n * p4 ┌─────────┴──────────┐ p5\n *    │                    │\n *    │                    │\n * p8 ├────────────────────┤ p9\n *    │                    │\n *    │        p10         │\n * p7 └─────────┬──────────┘ p6\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *   ───────────┴───────────\n * p12         p11           p13\n */\nexport const Box = () => {\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y,\n      y1: Y1,\n      y2: Y2,\n      y3: Y3,\n      y4: Y4,\n      series: S\n    } = value;\n    // Calc width for each box.\n    // The scales for x and series channels must be band scale.\n    const xScale = scale.x;\n    const series = scale.series;\n    const P = Array.from(index, i => {\n      const groupWidth = xScale.getBandWidth(xScale.invert(+X[i]));\n      const ratio = series ? series.getBandWidth(series.invert(+(S === null || S === void 0 ? void 0 : S[i]))) : 1;\n      const width = groupWidth * ratio;\n      const offset = (+(S === null || S === void 0 ? void 0 : S[i]) || 0) * groupWidth;\n      const x = +X[i] + offset + width / 2;\n      const [low, q1, median, q3, high] = [+Y[i], +Y1[i], +Y2[i], +Y3[i], +Y4[i]];\n      const P13 = [[x - width / 2, high], [x + width / 2, high], [x, high], [x, q3], [x - width / 2, q3], [x + width / 2, q3], [x + width / 2, q1], [x - width / 2, q1], [x - width / 2, median], [x + width / 2, median], [x, q1], [x, low], [x - width / 2, low], [x + width / 2, low]];\n      return P13.map(d => coordinate.map(d));\n    });\n    return [index, P];\n  };\n};\nBox.props = {\n  defaultShape: 'box',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    scale: 'band',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'series',\n    scale: 'band'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeZeroX\n  }],\n  postInference: [...basePostInference(), ...tooltip1d()],\n  interaction: {\n    shareTooltip: true\n  }\n};","map":{"version":3,"names":["BoxShape","BoxViolin","MaybeZeroX","baseGeometryChannels","basePostInference","basePreInference","tooltip1d","shape","box","violin","Box","index","scale","value","coordinate","x","X","y","Y","y1","Y1","y2","Y2","y3","Y3","y4","Y4","series","S","xScale","P","Array","from","i","groupWidth","getBandWidth","invert","ratio","width","offset","low","q1","median","q3","high","P13","map","d","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","type","postInference","interaction","shareTooltip"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/box.ts"],"sourcesContent":["import { Band } from '@antv/scale';\nimport { Vector2, MarkComponent as MC } from '../runtime';\nimport { BoxMark } from '../spec';\nimport { BoxShape, BoxViolin } from '../shape';\nimport { MaybeZeroX } from '../transform';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  tooltip1d,\n} from './utils';\n\nconst shape = {\n  box: BoxShape,\n  violin: BoxViolin,\n};\n\nexport type BoxOptions = Omit<BoxMark, 'type'>;\n\n/**\n * Convert value for each channel to box shapes.\n *\n * p0           p2          p1\n *    ──────────┬──────────\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │ p3\n * p4 ┌─────────┴──────────┐ p5\n *    │                    │\n *    │                    │\n * p8 ├────────────────────┤ p9\n *    │                    │\n *    │        p10         │\n * p7 └─────────┬──────────┘ p6\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *              │\n *   ───────────┴───────────\n * p12         p11           p13\n */\nexport const Box: MC<BoxOptions> = () => {\n  return (index, scale, value, coordinate) => {\n    const { x: X, y: Y, y1: Y1, y2: Y2, y3: Y3, y4: Y4, series: S } = value;\n\n    // Calc width for each box.\n    // The scales for x and series channels must be band scale.\n    const xScale = scale.x as Band;\n    const series = scale.series as Band;\n\n    const P = Array.from(index, (i) => {\n      const groupWidth = xScale.getBandWidth(xScale.invert(+X[i]));\n      const ratio = series ? series.getBandWidth(series.invert(+S?.[i])) : 1;\n      const width = groupWidth * ratio;\n      const offset = (+S?.[i] || 0) * groupWidth;\n\n      const x = +X[i] + offset + width / 2;\n      const [low, q1, median, q3, high] = [\n        +Y[i],\n        +Y1[i],\n        +Y2[i],\n        +Y3[i],\n        +Y4[i],\n      ];\n\n      const P13 = [\n        [x - width / 2, high],\n        [x + width / 2, high],\n        [x, high],\n        [x, q3], // idx = 3\n        [x - width / 2, q3],\n        [x + width / 2, q3],\n        [x + width / 2, q1],\n        [x - width / 2, q1],\n        [x - width / 2, median], // idx = 8\n        [x + width / 2, median],\n        [x, q1], // idx = 10\n        [x, low],\n        [x - width / 2, low],\n        [x + width / 2, low],\n      ];\n\n      return P13.map((d) => coordinate.map(d)) as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nBox.props = {\n  defaultShape: 'box',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', scale: 'band', required: true },\n    { name: 'y', required: true },\n    { name: 'series', scale: 'band' },\n  ],\n  preInference: [...basePreInference(), { type: MaybeZeroX }],\n  postInference: [...basePostInference(), ...tooltip1d()],\n  interaction: {\n    shareTooltip: true,\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}