{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { autoType as d3AutoType, dsvFormat } from '@antv/vendor/d3-dsv';\nimport { identity } from '../utils/helper';\nexport const Fetch = options => {\n  const {\n    value,\n    format = value.split('.').pop(),\n    delimiter = ',',\n    autoType = true\n  } = options;\n  return () => __awaiter(void 0, void 0, void 0, function* () {\n    const response = yield fetch(value);\n    if (format === 'csv') {\n      // @see: https://github.com/d3/d3-dsv#dsv_parse\n      const str = yield response.text();\n      return dsvFormat(delimiter).parse(str, autoType ? d3AutoType : identity);\n    }\n    if (format === 'json') {\n      return yield response.json();\n    }\n    throw new Error(`Unknown format: ${format}.`);\n  });\n};\nFetch.props = {};","map":{"version":3,"names":["autoType","d3AutoType","dsvFormat","identity","Fetch","options","value","format","split","pop","delimiter","__awaiter","response","fetch","str","text","parse","json","Error","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/data/fetch.ts"],"sourcesContent":["import { autoType as d3AutoType, dsvFormat } from '@antv/vendor/d3-dsv';\nimport type { DataComponent as DC } from '../runtime';\nimport type { FetchConnector } from '../spec';\nimport { identity } from '../utils/helper';\n\nexport type FetchOptions = Omit<FetchConnector, 'type'>;\n\nexport const Fetch: DC<FetchOptions> = (options) => {\n  const {\n    value,\n    format = value.split('.').pop(),\n    delimiter = ',',\n    autoType = true,\n  } = options;\n  return async () => {\n    const response = await fetch(value);\n\n    if (format === 'csv') {\n      // @see: https://github.com/d3/d3-dsv#dsv_parse\n      const str = await response.text();\n      return dsvFormat(delimiter).parse(str, autoType ? d3AutoType : identity);\n    }\n    if (format === 'json') {\n      return await response.json();\n    }\n    throw new Error(`Unknown format: ${format}.`);\n  };\n};\n\nFetch.props = {};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAQ,IAAIC,UAAU,EAAEC,SAAS,QAAQ,qBAAqB;AAGvE,SAASC,QAAQ,QAAQ,iBAAiB;AAI1C,OAAO,MAAMC,KAAK,GAAsBC,OAAO,IAAI;EACjD,MAAM;IACJC,KAAK;IACLC,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;IAC/BC,SAAS,GAAG,GAAG;IACfV,QAAQ,GAAG;EAAI,CAChB,GAAGK,OAAO;EACX,OAAO,MAAWM,SAAA;IAChB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,KAAK,CAAC;IAEnC,IAAIC,MAAM,KAAK,KAAK,EAAE;MACpB;MACA,MAAMO,GAAG,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACjC,OAAOb,SAAS,CAACQ,SAAS,CAAC,CAACM,KAAK,CAACF,GAAG,EAAEd,QAAQ,GAAGC,UAAU,GAAGE,QAAQ,CAAC;;IAE1E,IAAII,MAAM,KAAK,MAAM,EAAE;MACrB,OAAO,MAAMK,QAAQ,CAACK,IAAI,EAAE;;IAE9B,MAAM,IAAIC,KAAK,CAAC,mBAAmBX,MAAM,GAAG,CAAC;EAC/C,CAAC;AACH,CAAC;AAEDH,KAAK,CAACe,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}