{"ast":null,"code":"import { idOf } from './id';\nimport { bfs } from './traverse';\n/**\n * <zh/> 获取指定元素在 n 度关系内的所有元素的 ID\n *\n * <en/> Get the IDs of all elements within an n-degree relationship from the specified element\n * @remarks\n * <zh/> 对于节点，0 度关系是节点本身，1 度关系包括节点的直接相邻节点和边，以此类推。\n * 对于边，0 度关系是边本身，1 度关系包括边本身及其两个端点，以此类推。\n *\n * <en/> For a node, 0-degree relationship includes the node itself; 1-degree relationship includes the node's direct neighbors and their connecting edges, etc.\n * For an edge, 0-degree relationship includes the edge itself; 1-degree relationship includes the edge and its two endpoints, etc\n * @param graph - <zh/> 图实例 | <en/> graph instance\n * @param elementType - <zh/> 元素类型 | <en/> element type\n * @param elementId - <zh/> 起始元素的 ID | <en/> start element ID\n * @param degree - <zh/> 指定的度数 | <en/> the specified degree\n * @param direction - <zh/> 边的方向 | <en/> edge direction\n * @returns - <zh/> 返回节点和边的 ID 数组 | <en/> Returns an array of node and edge IDs\n */\nexport function getElementNthDegreeIds(graph, elementType, elementId, degree, direction = 'both') {\n  if (elementType === 'combo' || elementType === 'node') {\n    return getNodeNthDegreeIds(graph, elementId, degree, direction);\n  }\n  const edgeData = graph.getEdgeData(elementId);\n  if (!edgeData) return [];\n  const sourceRelations = getNodeNthDegreeIds(graph, edgeData.source, degree - 1, direction);\n  const targetRelations = getNodeNthDegreeIds(graph, edgeData.target, degree - 1, direction);\n  return Array.from(new Set([...sourceRelations, ...targetRelations, elementId]));\n}\n/**\n * <zh/> 获取指定节点在 n 度关系内的所有元素的 ID\n *\n * <en/> Get all elements IDs within n-degree relationship of the specified node\n * @remarks\n * <zh/> 节点的 0 度关系是节点本身，1 度关系是节点的直接相邻节点和边，以此类推\n * @param direction\n * <en/> 0-degree relationship of a node is the node itself; 1-degree relationship is the node's neighboring nodes and related edges, etc\n * @param graph - <zh/> 图实例 | <en/> graph instance\n * @param startNodeId - <zh/> 起始节点的 ID | <en/> The ID of the starting node\n * @param degree - <zh/> 指定的度数 | <en/> The specified degree\n * @param direction - <zh/> 边的方向 | <en/> The direction of the edge\n * @returns - <zh/> 返回节点和边的 ID 数组 | <en/> Returns an array of node and edge IDs\n */\nexport function getNodeNthDegreeIds(graph, startNodeId, degree, direction = 'both') {\n  const visitedNodes = new Set();\n  const visitedEdges = new Set();\n  const relations = new Set();\n  bfs(startNodeId, (nodeId, depth) => {\n    if (depth > degree) return;\n    relations.add(nodeId);\n    graph.getRelatedEdgesData(nodeId, direction).forEach(edge => {\n      const edgeId = idOf(edge);\n      if (!visitedEdges.has(edgeId) && depth < degree) {\n        relations.add(edgeId);\n        visitedEdges.add(edgeId);\n      }\n    });\n  }, nodeId => {\n    return graph.getRelatedEdgesData(nodeId, direction).map(edge => edge.source === nodeId ? edge.target : edge.source).filter(neighborNodeId => {\n      if (!visitedNodes.has(neighborNodeId)) {\n        visitedNodes.add(neighborNodeId);\n        return true;\n      }\n      return false;\n    });\n  });\n  return Array.from(relations);\n}","map":{"version":3,"names":["idOf","bfs","getElementNthDegreeIds","graph","elementType","elementId","degree","direction","getNodeNthDegreeIds","edgeData","getEdgeData","sourceRelations","source","targetRelations","target","Array","from","Set","startNodeId","visitedNodes","visitedEdges","relations","nodeId","depth","add","getRelatedEdgesData","forEach","edge","edgeId","has","map","filter","neighborNodeId"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/relation.ts"],"sourcesContent":["import type { Graph } from '../runtime/graph';\nimport type { EdgeDirection, ElementType, ID } from '../types';\nimport { idOf } from './id';\nimport { bfs } from './traverse';\n\n/**\n * <zh/> 获取指定元素在 n 度关系内的所有元素的 ID\n *\n * <en/> Get the IDs of all elements within an n-degree relationship from the specified element\n * @remarks\n * <zh/> 对于节点，0 度关系是节点本身，1 度关系包括节点的直接相邻节点和边，以此类推。\n * 对于边，0 度关系是边本身，1 度关系包括边本身及其两个端点，以此类推。\n *\n * <en/> For a node, 0-degree relationship includes the node itself; 1-degree relationship includes the node's direct neighbors and their connecting edges, etc.\n * For an edge, 0-degree relationship includes the edge itself; 1-degree relationship includes the edge and its two endpoints, etc\n * @param graph - <zh/> 图实例 | <en/> graph instance\n * @param elementType - <zh/> 元素类型 | <en/> element type\n * @param elementId - <zh/> 起始元素的 ID | <en/> start element ID\n * @param degree - <zh/> 指定的度数 | <en/> the specified degree\n * @param direction - <zh/> 边的方向 | <en/> edge direction\n * @returns - <zh/> 返回节点和边的 ID 数组 | <en/> Returns an array of node and edge IDs\n */\nexport function getElementNthDegreeIds(\n  graph: Graph,\n  elementType: ElementType,\n  elementId: ID,\n  degree: number,\n  direction: EdgeDirection = 'both',\n): ID[] {\n  if (elementType === 'combo' || elementType === 'node') {\n    return getNodeNthDegreeIds(graph, elementId, degree, direction);\n  }\n\n  const edgeData = graph.getEdgeData(elementId);\n  if (!edgeData) return [];\n\n  const sourceRelations = getNodeNthDegreeIds(graph, edgeData.source, degree - 1, direction);\n  const targetRelations = getNodeNthDegreeIds(graph, edgeData.target, degree - 1, direction);\n\n  return Array.from(new Set<ID>([...sourceRelations, ...targetRelations, elementId]));\n}\n\n/**\n * <zh/> 获取指定节点在 n 度关系内的所有元素的 ID\n *\n * <en/> Get all elements IDs within n-degree relationship of the specified node\n * @remarks\n * <zh/> 节点的 0 度关系是节点本身，1 度关系是节点的直接相邻节点和边，以此类推\n * @param direction\n * <en/> 0-degree relationship of a node is the node itself; 1-degree relationship is the node's neighboring nodes and related edges, etc\n * @param graph - <zh/> 图实例 | <en/> graph instance\n * @param startNodeId - <zh/> 起始节点的 ID | <en/> The ID of the starting node\n * @param degree - <zh/> 指定的度数 | <en/> The specified degree\n * @param direction - <zh/> 边的方向 | <en/> The direction of the edge\n * @returns - <zh/> 返回节点和边的 ID 数组 | <en/> Returns an array of node and edge IDs\n */\nexport function getNodeNthDegreeIds(\n  graph: Graph,\n  startNodeId: ID,\n  degree: number,\n  direction: EdgeDirection = 'both',\n): ID[] {\n  const visitedNodes = new Set<ID>();\n  const visitedEdges = new Set<ID>();\n  const relations = new Set<ID>();\n\n  bfs(\n    startNodeId,\n    (nodeId: ID, depth: number) => {\n      if (depth > degree) return;\n      relations.add(nodeId);\n\n      graph.getRelatedEdgesData(nodeId, direction).forEach((edge) => {\n        const edgeId = idOf(edge);\n        if (!visitedEdges.has(edgeId) && depth < degree) {\n          relations.add(edgeId);\n          visitedEdges.add(edgeId);\n        }\n      });\n    },\n    (nodeId: ID) => {\n      return graph\n        .getRelatedEdgesData(nodeId, direction)\n        .map((edge) => (edge.source === nodeId ? edge.target : edge.source))\n        .filter((neighborNodeId) => {\n          if (!visitedNodes.has(neighborNodeId)) {\n            visitedNodes.add(neighborNodeId);\n            return true;\n          }\n          return false;\n        });\n    },\n  );\n\n  return Array.from(relations);\n}\n"],"mappings":"AAEA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,GAAG,QAAQ,YAAY;AAEhC;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,sBAAsBA,CACpCC,KAAY,EACZC,WAAwB,EACxBC,SAAa,EACbC,MAAc,EACdC,SAAA,GAA2B,MAAM;EAEjC,IAAIH,WAAW,KAAK,OAAO,IAAIA,WAAW,KAAK,MAAM,EAAE;IACrD,OAAOI,mBAAmB,CAACL,KAAK,EAAEE,SAAS,EAAEC,MAAM,EAAEC,SAAS,CAAC;EACjE;EAEA,MAAME,QAAQ,GAAGN,KAAK,CAACO,WAAW,CAACL,SAAS,CAAC;EAC7C,IAAI,CAACI,QAAQ,EAAE,OAAO,EAAE;EAExB,MAAME,eAAe,GAAGH,mBAAmB,CAACL,KAAK,EAAEM,QAAQ,CAACG,MAAM,EAAEN,MAAM,GAAG,CAAC,EAAEC,SAAS,CAAC;EAC1F,MAAMM,eAAe,GAAGL,mBAAmB,CAACL,KAAK,EAAEM,QAAQ,CAACK,MAAM,EAAER,MAAM,GAAG,CAAC,EAAEC,SAAS,CAAC;EAE1F,OAAOQ,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAK,CAAC,GAAGN,eAAe,EAAE,GAAGE,eAAe,EAAER,SAAS,CAAC,CAAC,CAAC;AACrF;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,mBAAmBA,CACjCL,KAAY,EACZe,WAAe,EACfZ,MAAc,EACdC,SAAA,GAA2B,MAAM;EAEjC,MAAMY,YAAY,GAAG,IAAIF,GAAG,EAAM;EAClC,MAAMG,YAAY,GAAG,IAAIH,GAAG,EAAM;EAClC,MAAMI,SAAS,GAAG,IAAIJ,GAAG,EAAM;EAE/BhB,GAAG,CACDiB,WAAW,EACX,CAACI,MAAU,EAAEC,KAAa,KAAI;IAC5B,IAAIA,KAAK,GAAGjB,MAAM,EAAE;IACpBe,SAAS,CAACG,GAAG,CAACF,MAAM,CAAC;IAErBnB,KAAK,CAACsB,mBAAmB,CAACH,MAAM,EAAEf,SAAS,CAAC,CAACmB,OAAO,CAAEC,IAAI,IAAI;MAC5D,MAAMC,MAAM,GAAG5B,IAAI,CAAC2B,IAAI,CAAC;MACzB,IAAI,CAACP,YAAY,CAACS,GAAG,CAACD,MAAM,CAAC,IAAIL,KAAK,GAAGjB,MAAM,EAAE;QAC/Ce,SAAS,CAACG,GAAG,CAACI,MAAM,CAAC;QACrBR,YAAY,CAACI,GAAG,CAACI,MAAM,CAAC;MAC1B;IACF,CAAC,CAAC;EACJ,CAAC,EACAN,MAAU,IAAI;IACb,OAAOnB,KAAK,CACTsB,mBAAmB,CAACH,MAAM,EAAEf,SAAS,CAAC,CACtCuB,GAAG,CAAEH,IAAI,IAAMA,IAAI,CAACf,MAAM,KAAKU,MAAM,GAAGK,IAAI,CAACb,MAAM,GAAGa,IAAI,CAACf,MAAO,CAAC,CACnEmB,MAAM,CAAEC,cAAc,IAAI;MACzB,IAAI,CAACb,YAAY,CAACU,GAAG,CAACG,cAAc,CAAC,EAAE;QACrCb,YAAY,CAACK,GAAG,CAACQ,cAAc,CAAC;QAChC,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC;EACN,CAAC,CACF;EAED,OAAOjB,KAAK,CAACC,IAAI,CAACK,SAAS,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}