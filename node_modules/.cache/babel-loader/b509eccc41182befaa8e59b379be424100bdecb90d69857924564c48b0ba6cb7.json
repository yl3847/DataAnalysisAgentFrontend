{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { path as d3path } from '@antv/vendor/d3-path';\nimport { appendArc, applyStyle } from '../utils';\nimport { select } from '../../utils/selection';\nimport { isPolar } from '../../utils/coordinate';\nimport { dist, mid } from '../../utils/vector';\n/**\n * Connect points for 2 points:\n * - In rect, draw half circle.\n * - In polar, draw quadratic curve.\n */\nexport const Arc = (options, context) => {\n  const style = __rest(options, []);\n  const {\n    coordinate,\n    document\n  } = context;\n  return (points, value, defaults) => {\n    const {\n        color: defaultColor\n      } = defaults,\n      rest = __rest(defaults, [\"color\"]);\n    const {\n      color = defaultColor,\n      transform\n    } = value;\n    const [from, to] = points;\n    const path = d3path();\n    path.moveTo(from[0], from[1]);\n    if (isPolar(coordinate)) {\n      const center = coordinate.getCenter();\n      path.quadraticCurveTo(center[0], center[1], to[0], to[1]);\n    } else {\n      const center = mid(from, to);\n      const raduis = dist(from, to) / 2;\n      appendArc(path, from, to, center, raduis);\n    }\n    return select(document.createElement('path', {})).call(applyStyle, rest).style('d', path.toString()).style('stroke', color).style('transform', transform).call(applyStyle, style).node();\n  };\n};\nArc.props = {\n  defaultMarker: 'smooth',\n  defaultEnterAnimation: 'fadeIn',\n  defaultUpdateAnimation: 'morphing',\n  defaultExitAnimation: 'fadeOut'\n};","map":{"version":3,"names":["path","d3path","appendArc","applyStyle","select","isPolar","dist","mid","Arc","options","context","style","__rest","coordinate","document","points","value","defaults","color","defaultColor","rest","transform","from","to","moveTo","center","getCenter","quadraticCurveTo","raduis","createElement","call","toString","node","props","defaultMarker","defaultEnterAnimation","defaultUpdateAnimation","defaultExitAnimation"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/shape/link/arc.ts"],"sourcesContent":["import { path as d3path } from '@antv/vendor/d3-path';\nimport { appendArc, applyStyle } from '../utils';\nimport { select } from '../../utils/selection';\nimport { isPolar } from '../../utils/coordinate';\nimport { dist, mid } from '../../utils/vector';\nimport { ShapeComponent as SC } from '../../runtime';\n\nexport type ArcOptions = Record<string, any>;\n\n/**\n * Connect points for 2 points:\n * - In rect, draw half circle.\n * - In polar, draw quadratic curve.\n */\nexport const Arc: SC<ArcOptions> = (options, context) => {\n  const { ...style } = options;\n  const { coordinate, document } = context;\n  return (points, value, defaults) => {\n    const { color: defaultColor, ...rest } = defaults;\n\n    const { color = defaultColor, transform } = value;\n    const [from, to] = points;\n\n    const path = d3path();\n    path.moveTo(from[0], from[1]);\n\n    if (isPolar(coordinate)) {\n      const center = coordinate.getCenter();\n      path.quadraticCurveTo(center[0], center[1], to[0], to[1]);\n    } else {\n      const center = mid(from, to);\n      const raduis = dist(from, to) / 2;\n      appendArc(path, from, to, center, raduis);\n    }\n\n    return select(document.createElement('path', {}))\n      .call(applyStyle, rest)\n      .style('d', path.toString())\n      .style('stroke', color)\n      .style('transform', transform)\n      .call(applyStyle, style)\n      .node();\n  };\n};\n\nArc.props = {\n  defaultMarker: 'smooth',\n  defaultEnterAnimation: 'fadeIn',\n  defaultUpdateAnimation: 'morphing',\n  defaultExitAnimation: 'fadeOut',\n};\n"],"mappings":";;;;;;;;AAAA,SAASA,IAAI,IAAIC,MAAM,QAAQ,sBAAsB;AACrD,SAASC,SAAS,EAAEC,UAAU,QAAQ,UAAU;AAChD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAK9C;;;;;AAKA,OAAO,MAAMC,GAAG,GAAmBA,CAACC,OAAO,EAAEC,OAAO,KAAI;EACtD,MAAWC,KAAK,GAAAC,MAAA,CAAKH,OAAO,EAAtB,EAAY,CAAU;EAC5B,MAAM;IAAEI,UAAU;IAAEC;EAAQ,CAAE,GAAGJ,OAAO;EACxC,OAAO,CAACK,MAAM,EAAEC,KAAK,EAAEC,QAAQ,KAAI;IACjC,MAAM;QAAEC,KAAK,EAAEC;MAAY,IAAcF,QAAQ;MAAjBG,IAAI,GAAAR,MAAA,CAAKK,QAAQ,EAA3C,SAAgC,CAAW;IAEjD,MAAM;MAAEC,KAAK,GAAGC,YAAY;MAAEE;IAAS,CAAE,GAAGL,KAAK;IACjD,MAAM,CAACM,IAAI,EAAEC,EAAE,CAAC,GAAGR,MAAM;IAEzB,MAAMf,IAAI,GAAGC,MAAM,EAAE;IACrBD,IAAI,CAACwB,MAAM,CAACF,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IAE7B,IAAIjB,OAAO,CAACQ,UAAU,CAAC,EAAE;MACvB,MAAMY,MAAM,GAAGZ,UAAU,CAACa,SAAS,EAAE;MACrC1B,IAAI,CAAC2B,gBAAgB,CAACF,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEF,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC;KAC1D,MAAM;MACL,MAAME,MAAM,GAAGlB,GAAG,CAACe,IAAI,EAAEC,EAAE,CAAC;MAC5B,MAAMK,MAAM,GAAGtB,IAAI,CAACgB,IAAI,EAAEC,EAAE,CAAC,GAAG,CAAC;MACjCrB,SAAS,CAACF,IAAI,EAAEsB,IAAI,EAAEC,EAAE,EAAEE,MAAM,EAAEG,MAAM,CAAC;;IAG3C,OAAOxB,MAAM,CAACU,QAAQ,CAACe,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAC9CC,IAAI,CAAC3B,UAAU,EAAEiB,IAAI,CAAC,CACtBT,KAAK,CAAC,GAAG,EAAEX,IAAI,CAAC+B,QAAQ,EAAE,CAAC,CAC3BpB,KAAK,CAAC,QAAQ,EAAEO,KAAK,CAAC,CACtBP,KAAK,CAAC,WAAW,EAAEU,SAAS,CAAC,CAC7BS,IAAI,CAAC3B,UAAU,EAAEQ,KAAK,CAAC,CACvBqB,IAAI,EAAE;EACX,CAAC;AACH,CAAC;AAEDxB,GAAG,CAACyB,KAAK,GAAG;EACVC,aAAa,EAAE,QAAQ;EACvBC,qBAAqB,EAAE,QAAQ;EAC/BC,sBAAsB,EAAE,UAAU;EAClCC,oBAAoB,EAAE;CACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}