{"ast":null,"code":"import { positionOf } from '../../utils/position';\nimport { mergeOptions } from '../../utils/style';\nimport { distance, rad, subtract } from '../../utils/vector';\nimport { Cubic } from './cubic';\n/**\n * <zh/> 径向贝塞尔曲线\n *\n * <en/> Radial cubic edge\n */\nexport class CubicRadial extends Cubic {\n  constructor(options) {\n    super(mergeOptions({\n      style: CubicRadial.defaultStyleProps\n    }, options));\n  }\n  get ref() {\n    return this.context.model.getRootsData()[0];\n  }\n  getEndpoints(attributes) {\n    if (this.sourceNode.id === this.ref.id) {\n      return super.getEndpoints(attributes);\n    }\n    const refPoint = positionOf(this.ref);\n    const sourcePoint = this.sourceNode.getIntersectPoint(refPoint, true);\n    const targetPoint = this.targetNode.getIntersectPoint(refPoint);\n    return [sourcePoint, targetPoint];\n  }\n  toRadialCoordinate(p) {\n    const refPoint = positionOf(this.ref);\n    const r = distance(p, refPoint);\n    const radian = rad(subtract(p, refPoint));\n    return [r, radian];\n  }\n  getControlPoints(sourcePoint, targetPoint, curvePosition, curveOffset) {\n    const [r1, rad1] = this.toRadialCoordinate(sourcePoint);\n    const [r2] = this.toRadialCoordinate(targetPoint);\n    const rDist = r2 - r1;\n    return [[sourcePoint[0] + (rDist * curvePosition[0] + curveOffset[0]) * Math.cos(rad1), sourcePoint[1] + (rDist * curvePosition[0] + curveOffset[0]) * Math.sin(rad1)], [targetPoint[0] - (rDist * curvePosition[1] - curveOffset[0]) * Math.cos(rad1), targetPoint[1] - (rDist * curvePosition[1] - curveOffset[0]) * Math.sin(rad1)]];\n  }\n}\nCubicRadial.defaultStyleProps = {\n  curvePosition: 0.5,\n  curveOffset: 20\n};","map":{"version":3,"names":["positionOf","mergeOptions","distance","rad","subtract","Cubic","CubicRadial","constructor","options","style","defaultStyleProps","ref","context","model","getRootsData","getEndpoints","attributes","sourceNode","id","refPoint","sourcePoint","getIntersectPoint","targetPoint","targetNode","toRadialCoordinate","p","r","radian","getControlPoints","curvePosition","curveOffset","r1","rad1","r2","rDist","Math","cos","sin"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/edges/cubic-radial.ts"],"sourcesContent":["import type { DisplayObjectConfig } from '@antv/g';\nimport type { NodeData } from '../../spec';\nimport type { Point } from '../../types';\nimport { positionOf } from '../../utils/position';\nimport { mergeOptions } from '../../utils/style';\nimport { distance, rad, subtract } from '../../utils/vector';\nimport type { CubicStyleProps } from './cubic';\nimport { Cubic } from './cubic';\n\n/**\n * <zh/> 径向贝塞尔曲线样式配置项\n *\n * <en/> Radial cubic style props\n */\nexport interface CubicRadialStyleProps extends CubicStyleProps {}\n\n/**\n * <zh/> 径向贝塞尔曲线\n *\n * <en/> Radial cubic edge\n */\nexport class CubicRadial extends Cubic {\n  static defaultStyleProps: Partial<CubicStyleProps> = {\n    curvePosition: 0.5,\n    curveOffset: 20,\n  };\n\n  constructor(options: DisplayObjectConfig<CubicStyleProps>) {\n    super(mergeOptions({ style: CubicRadial.defaultStyleProps }, options));\n  }\n\n  private get ref(): NodeData {\n    return this.context.model.getRootsData()[0];\n  }\n\n  protected getEndpoints(attributes: Required<CubicStyleProps>): [Point, Point] {\n    if (this.sourceNode.id === this.ref.id) {\n      return super.getEndpoints(attributes);\n    }\n\n    const refPoint = positionOf(this.ref);\n    const sourcePoint = this.sourceNode.getIntersectPoint(refPoint, true);\n    const targetPoint = this.targetNode.getIntersectPoint(refPoint);\n\n    return [sourcePoint, targetPoint];\n  }\n\n  private toRadialCoordinate(p: Point) {\n    const refPoint = positionOf(this.ref);\n    const r = distance(p, refPoint);\n    const radian = rad(subtract(p, refPoint));\n    return [r, radian];\n  }\n\n  protected getControlPoints(\n    sourcePoint: Point,\n    targetPoint: Point,\n    curvePosition: [number, number],\n    curveOffset: [number, number],\n  ): [Point, Point] {\n    const [r1, rad1] = this.toRadialCoordinate(sourcePoint);\n    const [r2] = this.toRadialCoordinate(targetPoint);\n\n    const rDist = r2 - r1;\n\n    return [\n      [\n        sourcePoint[0] + (rDist * curvePosition[0] + curveOffset[0]) * Math.cos(rad1),\n        sourcePoint[1] + (rDist * curvePosition[0] + curveOffset[0]) * Math.sin(rad1),\n      ],\n      [\n        targetPoint[0] - (rDist * curvePosition[1] - curveOffset[0]) * Math.cos(rad1),\n        targetPoint[1] - (rDist * curvePosition[1] - curveOffset[0]) * Math.sin(rad1),\n      ],\n    ];\n  }\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,oBAAoB;AAE5D,SAASC,KAAK,QAAQ,SAAS;AAS/B;;;;;AAKA,OAAM,MAAOC,WAAY,SAAQD,KAAK;EAMpCE,YAAYC,OAA6C;IACvD,KAAK,CAACP,YAAY,CAAC;MAAEQ,KAAK,EAAEH,WAAW,CAACI;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EACxE;EAEA,IAAYG,GAAGA,CAAA;IACb,OAAO,IAAI,CAACC,OAAO,CAACC,KAAK,CAACC,YAAY,EAAE,CAAC,CAAC,CAAC;EAC7C;EAEUC,YAAYA,CAACC,UAAqC;IAC1D,IAAI,IAAI,CAACC,UAAU,CAACC,EAAE,KAAK,IAAI,CAACP,GAAG,CAACO,EAAE,EAAE;MACtC,OAAO,KAAK,CAACH,YAAY,CAACC,UAAU,CAAC;IACvC;IAEA,MAAMG,QAAQ,GAAGnB,UAAU,CAAC,IAAI,CAACW,GAAG,CAAC;IACrC,MAAMS,WAAW,GAAG,IAAI,CAACH,UAAU,CAACI,iBAAiB,CAACF,QAAQ,EAAE,IAAI,CAAC;IACrE,MAAMG,WAAW,GAAG,IAAI,CAACC,UAAU,CAACF,iBAAiB,CAACF,QAAQ,CAAC;IAE/D,OAAO,CAACC,WAAW,EAAEE,WAAW,CAAC;EACnC;EAEQE,kBAAkBA,CAACC,CAAQ;IACjC,MAAMN,QAAQ,GAAGnB,UAAU,CAAC,IAAI,CAACW,GAAG,CAAC;IACrC,MAAMe,CAAC,GAAGxB,QAAQ,CAACuB,CAAC,EAAEN,QAAQ,CAAC;IAC/B,MAAMQ,MAAM,GAAGxB,GAAG,CAACC,QAAQ,CAACqB,CAAC,EAAEN,QAAQ,CAAC,CAAC;IACzC,OAAO,CAACO,CAAC,EAAEC,MAAM,CAAC;EACpB;EAEUC,gBAAgBA,CACxBR,WAAkB,EAClBE,WAAkB,EAClBO,aAA+B,EAC/BC,WAA6B;IAE7B,MAAM,CAACC,EAAE,EAAEC,IAAI,CAAC,GAAG,IAAI,CAACR,kBAAkB,CAACJ,WAAW,CAAC;IACvD,MAAM,CAACa,EAAE,CAAC,GAAG,IAAI,CAACT,kBAAkB,CAACF,WAAW,CAAC;IAEjD,MAAMY,KAAK,GAAGD,EAAE,GAAGF,EAAE;IAErB,OAAO,CACL,CACEX,WAAW,CAAC,CAAC,CAAC,GAAG,CAACc,KAAK,GAAGL,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAIK,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC,EAC7EZ,WAAW,CAAC,CAAC,CAAC,GAAG,CAACc,KAAK,GAAGL,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAIK,IAAI,CAACE,GAAG,CAACL,IAAI,CAAC,CAC9E,EACD,CACEV,WAAW,CAAC,CAAC,CAAC,GAAG,CAACY,KAAK,GAAGL,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAIK,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC,EAC7EV,WAAW,CAAC,CAAC,CAAC,GAAG,CAACY,KAAK,GAAGL,aAAa,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAIK,IAAI,CAACE,GAAG,CAACL,IAAI,CAAC,CAC9E,CACF;EACH;;AArDO1B,WAAA,CAAAI,iBAAiB,GAA6B;EACnDmB,aAAa,EAAE,GAAG;EAClBC,WAAW,EAAE;CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}