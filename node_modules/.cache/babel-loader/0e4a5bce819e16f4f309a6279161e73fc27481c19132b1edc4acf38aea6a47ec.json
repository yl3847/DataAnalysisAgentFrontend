{"ast":null,"code":"import { TREE_KEY } from '../constants';\nimport { isCollapsed } from '../utils/collapsibility';\nimport { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\nimport { reassignTo } from './utils';\n// 如果在任务列表中不存在，则添加到任务列表\n// If it does not exist in the task list, add it to the task list\nconst weakAssignTo = (input, type, elementType, datum) => {\n  const typeName = `${elementType}s`;\n  const id = idOf(datum);\n  if (!input.add[typeName].has(id) && !input.update[typeName].has(id)) {\n    input[type][typeName].set(idOf(datum), datum);\n  }\n};\n/**\n * <zh/> 处理(树图)节点的收起和展开\n *\n * <en/> Process the collapse and expand of (tree)nodes\n */\nexport class CollapseExpandNode extends BaseTransform {\n  getElement(id) {\n    return this.context.element.getElement(id);\n  }\n  handleExpand(node, input) {\n    weakAssignTo(input, 'add', 'node', node);\n    if (isCollapsed(node)) return;\n    const id = idOf(node);\n    weakAssignTo(input, 'add', 'node', node);\n    const relatedEdges = this.context.model.getRelatedEdgesData(id);\n    relatedEdges.forEach(edge => {\n      reassignTo(input, 'add', 'edge', edge);\n    });\n    const children = this.context.model.getChildrenData(id);\n    children.forEach(child => {\n      this.handleExpand(child, input);\n    });\n  }\n  beforeDraw(input) {\n    const {\n      graph,\n      model\n    } = this.context;\n    if (!model.model.hasTreeStructure(TREE_KEY)) return input;\n    const {\n      add: {\n        nodes: nodesToAdd,\n        edges: edgesToAdd\n      },\n      update: {\n        nodes: nodesToUpdate\n      }\n    } = input;\n    const nodesToCollapse = new Map();\n    const nodesToExpand = new Map();\n    nodesToAdd.forEach((node, id) => {\n      if (isCollapsed(node)) nodesToCollapse.set(id, node);\n    });\n    // 如果创建了一条连接到收起的节点的边，则将其添加到待展开列表\n    // If an edge is created that connects to a collapsed node, add it to the list to be expanded\n    edgesToAdd.forEach(edge => {\n      if (graph.getElementType(edge.source) !== 'node') return;\n      const source = graph.getNodeData(edge.source);\n      if (isCollapsed(source)) nodesToCollapse.set(edge.source, source);\n    });\n    nodesToUpdate.forEach((node, id) => {\n      const nodeElement = this.getElement(id);\n      if (!nodeElement) return;\n      const isCurrentCollapsed = nodeElement.attributes.collapsed;\n      if (isCollapsed(node)) {\n        if (!isCurrentCollapsed) nodesToCollapse.set(id, node);\n      } else {\n        if (isCurrentCollapsed) nodesToExpand.set(id, node);\n      }\n    });\n    const handledNodes = new Set();\n    nodesToCollapse.forEach((node, id) => {\n      // 将子节点添加到待删除列表，并删除关联的边\n      // Add child nodes to the list to be deleted，and delete the associated edges\n      const descendants = model.getDescendantsData(id);\n      descendants.forEach(descendant => {\n        const id = idOf(descendant);\n        if (handledNodes.has(id)) return;\n        reassignTo(input, 'remove', 'node', descendant);\n        const relatedEdges = model.getRelatedEdgesData(id);\n        relatedEdges.forEach(edge => {\n          reassignTo(input, 'remove', 'edge', edge);\n        });\n        handledNodes.add(id);\n      });\n    });\n    nodesToExpand.forEach((node, id) => {\n      const ancestors = model.getAncestorsData(id, TREE_KEY);\n      // 如果祖先节点是收起的，添加到移除列表\n      // If the ancestor node is collapsed, add it to the removal list\n      if (ancestors.some(isCollapsed)) {\n        reassignTo(input, 'remove', 'node', node);\n        return;\n      }\n      this.handleExpand(node, input);\n    });\n    return input;\n  }\n}","map":{"version":3,"names":["TREE_KEY","isCollapsed","idOf","BaseTransform","reassignTo","weakAssignTo","input","type","elementType","datum","typeName","id","add","has","update","set","CollapseExpandNode","getElement","context","element","handleExpand","node","relatedEdges","model","getRelatedEdgesData","forEach","edge","children","getChildrenData","child","beforeDraw","graph","hasTreeStructure","nodes","nodesToAdd","edges","edgesToAdd","nodesToUpdate","nodesToCollapse","Map","nodesToExpand","getElementType","source","getNodeData","nodeElement","isCurrentCollapsed","attributes","collapsed","handledNodes","Set","descendants","getDescendantsData","descendant","ancestors","getAncestorsData","some"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/transforms/collapse-expand-node.ts"],"sourcesContent":["import { TREE_KEY } from '../constants';\nimport type { NodeData } from '../spec';\nimport type { ElementDatum, ElementType, ID } from '../types';\nimport { isCollapsed } from '../utils/collapsibility';\nimport { idOf } from '../utils/id';\nimport { BaseTransform } from './base-transform';\nimport type { DrawData, ProcedureData } from './types';\nimport { reassignTo } from './utils';\n\n// 如果在任务列表中不存在，则添加到任务列表\n// If it does not exist in the task list, add it to the task list\nconst weakAssignTo = (input: DrawData, type: 'add' | 'update', elementType: ElementType, datum: ElementDatum) => {\n  const typeName = `${elementType}s` as keyof ProcedureData;\n  const id = idOf(datum);\n  if (!input.add[typeName].has(id) && !input.update[typeName].has(id)) {\n    input[type][typeName].set(idOf(datum), datum as any);\n  }\n};\n\n/**\n * <zh/> 处理(树图)节点的收起和展开\n *\n * <en/> Process the collapse and expand of (tree)nodes\n */\nexport class CollapseExpandNode extends BaseTransform {\n  private getElement(id: ID) {\n    return this.context.element!.getElement(id);\n  }\n\n  private handleExpand(node: NodeData, input: DrawData) {\n    weakAssignTo(input, 'add', 'node', node);\n    if (isCollapsed(node)) return;\n\n    const id = idOf(node);\n    weakAssignTo(input, 'add', 'node', node);\n\n    const relatedEdges = this.context.model.getRelatedEdgesData(id);\n    relatedEdges.forEach((edge) => {\n      reassignTo(input, 'add', 'edge', edge);\n    });\n\n    const children = this.context.model.getChildrenData(id);\n    children.forEach((child) => {\n      this.handleExpand(child, input);\n    });\n  }\n\n  public beforeDraw(input: DrawData): DrawData {\n    const { graph, model } = this.context;\n\n    if (!model.model.hasTreeStructure(TREE_KEY)) return input;\n\n    const {\n      add: { nodes: nodesToAdd, edges: edgesToAdd },\n      update: { nodes: nodesToUpdate },\n    } = input;\n    const nodesToCollapse = new Map<ID, NodeData>();\n    const nodesToExpand = new Map<ID, NodeData>();\n\n    nodesToAdd.forEach((node, id) => {\n      if (isCollapsed(node)) nodesToCollapse.set(id, node);\n    });\n\n    // 如果创建了一条连接到收起的节点的边，则将其添加到待展开列表\n    // If an edge is created that connects to a collapsed node, add it to the list to be expanded\n    edgesToAdd.forEach((edge) => {\n      if (graph.getElementType(edge.source) !== 'node') return;\n      const source = graph.getNodeData(edge.source);\n      if (isCollapsed(source)) nodesToCollapse.set(edge.source, source);\n    });\n\n    nodesToUpdate.forEach((node, id) => {\n      const nodeElement = this.getElement(id);\n      if (!nodeElement) return;\n\n      const isCurrentCollapsed = nodeElement.attributes.collapsed;\n      if (isCollapsed(node)) {\n        if (!isCurrentCollapsed) nodesToCollapse.set(id, node);\n      } else {\n        if (isCurrentCollapsed) nodesToExpand.set(id, node);\n      }\n    });\n\n    const handledNodes = new Set<ID>();\n\n    nodesToCollapse.forEach((node, id) => {\n      // 将子节点添加到待删除列表，并删除关联的边\n      // Add child nodes to the list to be deleted，and delete the associated edges\n      const descendants = model.getDescendantsData(id);\n      descendants.forEach((descendant) => {\n        const id = idOf(descendant);\n        if (handledNodes.has(id)) return;\n\n        reassignTo(input, 'remove', 'node', descendant);\n        const relatedEdges = model.getRelatedEdgesData(id);\n        relatedEdges.forEach((edge) => {\n          reassignTo(input, 'remove', 'edge', edge);\n        });\n\n        handledNodes.add(id);\n      });\n    });\n\n    nodesToExpand.forEach((node, id) => {\n      const ancestors = model.getAncestorsData(id, TREE_KEY);\n\n      // 如果祖先节点是收起的，添加到移除列表\n      // If the ancestor node is collapsed, add it to the removal list\n      if (ancestors.some(isCollapsed)) {\n        reassignTo(input, 'remove', 'node', node);\n        return;\n      }\n\n      this.handleExpand(node, input);\n    });\n\n    return input;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}