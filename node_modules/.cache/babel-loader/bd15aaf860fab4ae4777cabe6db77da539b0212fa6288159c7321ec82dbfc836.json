{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/types.ts"],"sourcesContent":["export type Point = { x: number; y: number };\nexport type MCommand = 'M';\nexport type mCommand = 'm';\n\nexport type LCommand = 'L';\nexport type lCommand = 'l';\n\nexport type VCommand = 'V';\nexport type vCommand = 'v';\n\nexport type HCommand = 'H';\nexport type hCommand = 'h';\n\nexport type ZCommand = 'Z';\nexport type zCommand = 'z';\n\nexport type CCommand = 'C';\nexport type cCommand = 'c';\n\nexport type SCommand = 'S';\nexport type sCommand = 's';\n\nexport type QCommand = 'Q';\nexport type qCommand = 'q';\n\nexport type TCommand = 'T';\nexport type tCommand = 't';\n\nexport type ACommand = 'A';\nexport type aCommand = 'a';\n\nexport type AbsoluteCommand =\n  | MCommand\n  | LCommand\n  | VCommand\n  | HCommand\n  | ZCommand\n  | CCommand\n  | SCommand\n  | QCommand\n  | TCommand\n  | ACommand;\nexport type RelativeCommand =\n  | mCommand\n  | lCommand\n  | vCommand\n  | hCommand\n  | zCommand\n  | cCommand\n  | sCommand\n  | qCommand\n  | tCommand\n  | aCommand;\n\nexport type PathCommand = AbsoluteCommand | RelativeCommand;\n\nexport type MSegment = [MCommand, number, number];\nexport type mSegment = [mCommand, number, number];\nexport type MoveSegment = MSegment | mSegment;\n\nexport type LSegment = [LCommand, number, number];\nexport type lSegment = [lCommand, number, number];\nexport type LineSegment = LSegment | lSegment;\n\nexport type VSegment = [VCommand, number];\nexport type vSegment = [vCommand, number];\nexport type VertLineSegment = vSegment | VSegment;\n\nexport type HSegment = [HCommand, number];\nexport type hSegment = [hCommand, number];\nexport type HorLineSegment = HSegment | hSegment;\n\nexport type ZSegment = [ZCommand];\nexport type zSegment = [zCommand];\nexport type CloseSegment = ZSegment | zSegment;\n\nexport type CSegment = [CCommand, number, number, number, number, number, number];\nexport type cSegment = [cCommand, number, number, number, number, number, number];\nexport type CubicSegment = CSegment | cSegment;\n\nexport type SSegment = [SCommand, number, number, number, number];\nexport type sSegment = [sCommand, number, number, number, number];\nexport type ShortCubicSegment = SSegment | sSegment;\n\nexport type QSegment = [QCommand, number, number, number, number];\nexport type qSegment = [qCommand, number, number, number, number];\nexport type QuadSegment = QSegment | qSegment;\n\nexport type TSegment = [TCommand, number, number];\nexport type tSegment = [tCommand, number, number];\nexport type ShortQuadSegment = TSegment | tSegment;\n\nexport type ASegment = [ACommand, number, number, number, number, number, number, number];\nexport type aSegment = [aCommand, number, number, number, number, number, number, number];\nexport type ArcSegment = ASegment | aSegment;\n\nexport type PathSegment =\n  | MoveSegment\n  | LineSegment\n  | VertLineSegment\n  | HorLineSegment\n  | CloseSegment\n  | CubicSegment\n  | ShortCubicSegment\n  | QuadSegment\n  | ShortQuadSegment\n  | ArcSegment;\n\nexport interface SegmentProperties {\n  /** the segment */\n  segment: PathSegment;\n  /** the segment index */\n  index: number;\n  /** the segment length */\n  length: number;\n  /** the length including the segment length */\n  lengthAtSegment: number;\n  [key: string]: any;\n}\n\nexport type ShortSegment = VertLineSegment | HorLineSegment | ShortCubicSegment | ShortQuadSegment | CloseSegment;\nexport type AbsoluteSegment =\n  | MSegment\n  | LSegment\n  | VSegment\n  | HSegment\n  | CSegment\n  | SSegment\n  | QSegment\n  | TSegment\n  | ASegment\n  | ZSegment;\nexport type RelativeSegment =\n  | mSegment\n  | lSegment\n  | vSegment\n  | hSegment\n  | cSegment\n  | sSegment\n  | qSegment\n  | tSegment\n  | aSegment\n  | zSegment;\nexport type NormalSegment = MSegment | LSegment | CSegment | QSegment | ASegment | ZSegment;\n\nexport type PathArray = [MSegment | mSegment, ...PathSegment[]];\nexport type AbsoluteArray = [MSegment, ...AbsoluteSegment[]];\nexport type RelativeArray = [MSegment, ...RelativeSegment[]];\nexport type NormalArray = [MSegment, ...NormalSegment[]];\nexport type CurveArray = [MSegment, ...CSegment[]];\nexport type PolygonArray = [MSegment, ...LSegment[], ZSegment];\nexport type PolylineArray = [MSegment, ...LSegment[]];\n\nexport interface ParserParams {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  x: number;\n  y: number;\n  qx: number | null;\n  qy: number | null;\n}\n\nexport interface PathBBox {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n  x2: number;\n  y2: number;\n  cx: number;\n  cy: number;\n  cz: number;\n}\nexport interface PathBBoxTotalLength extends PathBBox {\n  length: number;\n}\nexport interface PathLengthFactoryOptions {\n  bbox: boolean;\n  length: boolean;\n  sampleSize: number;\n}\nexport interface SegmentLimits {\n  min: Point;\n  max: Point;\n}\n\nexport interface PointProperties {\n  closest: {\n    x: number;\n    y: number;\n  };\n  distance: number;\n  segment?: SegmentProperties;\n}\n\nexport interface LengthFactory {\n  length: number;\n  point: Point;\n  min: Point;\n  max: Point;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}