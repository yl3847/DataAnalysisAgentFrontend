{"ast":null,"code":"import { Circle as GCircle } from '@antv/g';\nimport { ICON_SIZE_RATIO } from '../../constants/element';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseNode } from './base-node';\n/**\n * <zh/> 圆形节点\n *\n * <en/> Circle node\n */\nexport class Circle extends BaseNode {\n  constructor(options) {\n    super(mergeOptions({\n      style: Circle.defaultStyleProps\n    }, options));\n  }\n  drawKeyShape(attributes, container) {\n    return this.upsert('key', GCircle, this.getKeyStyle(attributes), container);\n  }\n  getKeyStyle(attributes) {\n    const keyStyle = super.getKeyStyle(attributes);\n    return Object.assign(Object.assign({}, keyStyle), {\n      r: Math.min(...this.getSize(attributes)) / 2\n    });\n  }\n  getIconStyle(attributes) {\n    const style = super.getIconStyle(attributes);\n    const {\n      r\n    } = this.getShape('key').attributes;\n    const size = r * 2 * ICON_SIZE_RATIO;\n    return style ? Object.assign({\n      width: size,\n      height: size\n    }, style) : false;\n  }\n  getIntersectPoint(point, useExtendedLine = false) {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}\nCircle.defaultStyleProps = {\n  size: 32\n};","map":{"version":3,"names":["Circle","GCircle","ICON_SIZE_RATIO","getEllipseIntersectPoint","mergeOptions","BaseNode","constructor","options","style","defaultStyleProps","drawKeyShape","attributes","container","upsert","getKeyStyle","keyStyle","Object","assign","r","Math","min","getSize","getIconStyle","getShape","size","width","height","getIntersectPoint","point","useExtendedLine","keyShapeBounds","getBounds"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/nodes/circle.ts"],"sourcesContent":["import type { DisplayObjectConfig, CircleStyleProps as GCircleStyleProps, Group } from '@antv/g';\nimport { Circle as GCircle } from '@antv/g';\nimport { ICON_SIZE_RATIO } from '../../constants/element';\nimport type { Point } from '../../types';\nimport { getEllipseIntersectPoint } from '../../utils/point';\nimport { mergeOptions } from '../../utils/style';\nimport type { IconStyleProps } from '../shapes';\nimport type { BaseNodeStyleProps } from './base-node';\nimport { BaseNode } from './base-node';\n\n/**\n * <zh/> 圆形节点样式配置项\n *\n * <en/> Circle node style props\n */\nexport interface CircleStyleProps extends BaseNodeStyleProps {}\n\n/**\n * <zh/> 圆形节点\n *\n * <en/> Circle node\n */\nexport class Circle extends BaseNode {\n  static defaultStyleProps: Partial<CircleStyleProps> = {\n    size: 32,\n  };\n\n  constructor(options: DisplayObjectConfig<CircleStyleProps>) {\n    super(mergeOptions({ style: Circle.defaultStyleProps }, options));\n  }\n\n  protected drawKeyShape(attributes: Required<CircleStyleProps>, container: Group) {\n    return this.upsert('key', GCircle, this.getKeyStyle(attributes), container);\n  }\n\n  protected getKeyStyle(attributes: Required<CircleStyleProps>): GCircleStyleProps {\n    const keyStyle = super.getKeyStyle(attributes);\n    return { ...keyStyle, r: Math.min(...this.getSize(attributes)) / 2 };\n  }\n\n  protected getIconStyle(attributes: Required<CircleStyleProps>): false | IconStyleProps {\n    const style = super.getIconStyle(attributes);\n    const { r } = this.getShape<GCircle>('key').attributes;\n    const size = (r as number) * 2 * ICON_SIZE_RATIO;\n    return style ? ({ width: size, height: size, ...style } as IconStyleProps) : false;\n  }\n\n  public getIntersectPoint(point: Point, useExtendedLine = false): Point {\n    const keyShapeBounds = this.getShape('key').getBounds();\n    return getEllipseIntersectPoint(point, keyShapeBounds, useExtendedLine);\n  }\n}\n"],"mappings":"AACA,SAASA,MAAM,IAAIC,OAAO,QAAQ,SAAS;AAC3C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,SAASC,wBAAwB,QAAQ,mBAAmB;AAC5D,SAASC,YAAY,QAAQ,mBAAmB;AAGhD,SAASC,QAAQ,QAAQ,aAAa;AAStC;;;;;AAKA,OAAM,MAAOL,MAAO,SAAQK,QAAQ;EAKlCC,YAAYC,OAA8C;IACxD,KAAK,CAACH,YAAY,CAAC;MAAEI,KAAK,EAAER,MAAM,CAACS;IAAiB,CAAE,EAAEF,OAAO,CAAC,CAAC;EACnE;EAEUG,YAAYA,CAACC,UAAsC,EAAEC,SAAgB;IAC7E,OAAO,IAAI,CAACC,MAAM,CAAC,KAAK,EAAEZ,OAAO,EAAE,IAAI,CAACa,WAAW,CAACH,UAAU,CAAC,EAAEC,SAAS,CAAC;EAC7E;EAEUE,WAAWA,CAACH,UAAsC;IAC1D,MAAMI,QAAQ,GAAG,KAAK,CAACD,WAAW,CAACH,UAAU,CAAC;IAC9C,OAAAK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYF,QAAQ;MAAEG,CAAC,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,CAACV,UAAU,CAAC,CAAC,GAAG;IAAC;EACpE;EAEUW,YAAYA,CAACX,UAAsC;IAC3D,MAAMH,KAAK,GAAG,KAAK,CAACc,YAAY,CAACX,UAAU,CAAC;IAC5C,MAAM;MAAEO;IAAC,CAAE,GAAG,IAAI,CAACK,QAAQ,CAAU,KAAK,CAAC,CAACZ,UAAU;IACtD,MAAMa,IAAI,GAAIN,CAAY,GAAG,CAAC,GAAGhB,eAAe;IAChD,OAAOM,KAAK,GAAIQ,MAAA,CAAAC,MAAA;MAAEQ,KAAK,EAAED,IAAI;MAAEE,MAAM,EAAEF;IAAI,GAAKhB,KAAK,CAAqB,GAAG,KAAK;EACpF;EAEOmB,iBAAiBA,CAACC,KAAY,EAAEC,eAAe,GAAG,KAAK;IAC5D,MAAMC,cAAc,GAAG,IAAI,CAACP,QAAQ,CAAC,KAAK,CAAC,CAACQ,SAAS,EAAE;IACvD,OAAO5B,wBAAwB,CAACyB,KAAK,EAAEE,cAAc,EAAED,eAAe,CAAC;EACzE;;AA3BO7B,MAAA,CAAAS,iBAAiB,GAA8B;EACpDe,IAAI,EAAE;CACP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}