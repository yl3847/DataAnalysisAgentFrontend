{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { FederatedPointerEvent, HTML as GHTML, Rect } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport { isNil, isUndefined, pick, set } from '@antv/util';\nimport { CommonEvent } from '../../constants';\nimport { BaseNode } from './base-node';\n/**\n * <zh/> HTML 节点\n *\n * <en/> HTML node\n * @see https://github.com/antvis/G/blob/next/packages/g/src/plugins/EventPlugin.ts\n */\nexport class HTML extends BaseNode {\n  constructor(options) {\n    super(Object.assign(Object.assign({}, options), {\n      style: Object.assign({}, HTML.defaultStyleProps, options.style)\n    }));\n    this.rootPointerEvent = new FederatedPointerEvent(null);\n    this.forwardEvents = nativeEvent => {\n      const canvas = this.context.canvas;\n      const iCanvas = canvas.context.renderingContext.root.ownerDocument.defaultView;\n      const normalizedEvents = this.normalizeToPointerEvent(nativeEvent, iCanvas);\n      normalizedEvents.forEach(normalizedEvent => {\n        const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvent, iCanvas, nativeEvent);\n        // 当点击到 html 元素时，避免触发 pointerupoutside 事件\n        // When clicking on the html element, avoid triggering the pointerupoutside event\n        set(canvas.context.eventService, 'mappingTable.pointerupoutside', []);\n        canvas.context.eventService.mapEvent(event);\n      });\n    };\n  }\n  get eventService() {\n    return this.context.canvas.context.eventService;\n  }\n  get events() {\n    return [CommonEvent.CLICK, CommonEvent.POINTER_DOWN, CommonEvent.POINTER_MOVE, CommonEvent.POINTER_UP, CommonEvent.POINTER_OVER, CommonEvent.POINTER_LEAVE];\n  }\n  getDomElement() {\n    return this.getShape('key').getDomElement();\n  }\n  /**\n   * @override\n   */\n  render(attributes = this.parsedAttributes, container = this) {\n    this.drawKeyShape(attributes, container);\n    this.drawPortShapes(attributes, container);\n  }\n  getKeyStyle(attributes) {\n    const _a = pick(attributes, ['dx', 'dy', 'innerHTML', 'pointerEvents', 'cursor']),\n      {\n        dx = 0,\n        dy = 0\n      } = _a,\n      style = __rest(_a, [\"dx\", \"dy\"]);\n    const [width, height] = this.getSize(attributes);\n    return Object.assign(Object.assign({\n      x: dx,\n      y: dy\n    }, style), {\n      width,\n      height\n    });\n  }\n  drawKeyShape(attributes, container) {\n    const style = this.getKeyStyle(attributes);\n    const {\n      x,\n      y,\n      width = 0,\n      height = 0\n    } = style;\n    const bounds = this.upsert('key-container', Rect, {\n      x,\n      y,\n      width,\n      height,\n      opacity: 0\n    }, container);\n    return this.upsert('key', GHTML, style, bounds);\n  }\n  connectedCallback() {\n    // only enable in canvas renderer\n    const renderer = this.context.canvas.getRenderer('main');\n    const isCanvasRenderer = renderer instanceof Renderer;\n    if (!isCanvasRenderer) return;\n    const element = this.getDomElement();\n    this.events.forEach(eventName => {\n      // @ts-expect-error assert event is PointerEvent\n      element.addEventListener(eventName, this.forwardEvents);\n    });\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'zIndex' && oldValue !== newValue) {\n      this.getDomElement().style.zIndex = newValue;\n    }\n  }\n  destroy() {\n    const element = this.getDomElement();\n    this.events.forEach(eventName => {\n      // @ts-expect-error assert event is PointerEvent\n      element.removeEventListener(eventName, this.forwardEvents);\n    });\n    super.destroy();\n  }\n  normalizeToPointerEvent(event, canvas) {\n    const normalizedEvents = [];\n    if (canvas.isTouchEvent(event)) {\n      for (let i = 0; i < event.changedTouches.length; i++) {\n        const touch = event.changedTouches[i];\n        // use changedTouches instead of touches since touchend has no touches\n        // @see https://stackoverflow.com/a/10079076\n        if (isUndefined(touch.button)) touch.button = 0;\n        if (isUndefined(touch.buttons)) touch.buttons = 1;\n        if (isUndefined(touch.isPrimary)) {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n        if (isUndefined(touch.width)) touch.width = touch.radiusX || 1;\n        if (isUndefined(touch.height)) touch.height = touch.radiusY || 1;\n        if (isUndefined(touch.tiltX)) touch.tiltX = 0;\n        if (isUndefined(touch.tiltY)) touch.tiltY = 0;\n        if (isUndefined(touch.pointerType)) touch.pointerType = 'touch';\n        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Touch/identifier\n        if (isUndefined(touch.pointerId)) touch.pointerId = touch.identifier || 0;\n        if (isUndefined(touch.pressure)) touch.pressure = touch.force || 0.5;\n        if (isUndefined(touch.twist)) touch.twist = 0;\n        if (isUndefined(touch.tangentialPressure)) touch.tangentialPressure = 0;\n        touch.isNormalized = true;\n        touch.type = event.type;\n        normalizedEvents.push(touch);\n      }\n    } else if (canvas.isMouseEvent(event)) {\n      const tempEvent = event;\n      if (isUndefined(tempEvent.isPrimary)) tempEvent.isPrimary = true;\n      if (isUndefined(tempEvent.width)) tempEvent.width = 1;\n      if (isUndefined(tempEvent.height)) tempEvent.height = 1;\n      if (isUndefined(tempEvent.tiltX)) tempEvent.tiltX = 0;\n      if (isUndefined(tempEvent.tiltY)) tempEvent.tiltY = 0;\n      if (isUndefined(tempEvent.pointerType)) tempEvent.pointerType = 'mouse';\n      if (isUndefined(tempEvent.pointerId)) tempEvent.pointerId = 1;\n      if (isUndefined(tempEvent.pressure)) tempEvent.pressure = 0.5;\n      if (isUndefined(tempEvent.twist)) tempEvent.twist = 0;\n      if (isUndefined(tempEvent.tangentialPressure)) tempEvent.tangentialPressure = 0;\n      tempEvent.isNormalized = true;\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n    return normalizedEvents;\n  }\n  transferMouseData(event, nativeEvent) {\n    event.isTrusted = nativeEvent.isTrusted;\n    event.srcElement = nativeEvent.srcElement;\n    event.timeStamp = performance.now();\n    event.type = nativeEvent.type;\n    event.altKey = nativeEvent.altKey;\n    event.metaKey = nativeEvent.metaKey;\n    event.shiftKey = nativeEvent.shiftKey;\n    event.ctrlKey = nativeEvent.ctrlKey;\n    event.button = nativeEvent.button;\n    event.buttons = nativeEvent.buttons;\n    event.client.x = nativeEvent.clientX;\n    event.client.y = nativeEvent.clientY;\n    event.movement.x = nativeEvent.movementX;\n    event.movement.y = nativeEvent.movementY;\n    event.page.x = nativeEvent.pageX;\n    event.page.y = nativeEvent.pageY;\n    event.screen.x = nativeEvent.screenX;\n    event.screen.y = nativeEvent.screenY;\n    event.relatedTarget = null;\n  }\n  bootstrapEvent(event, normalizedEvent, view, nativeEvent) {\n    event.view = view;\n    // @ts-ignore\n    event.originalEvent = null;\n    event.nativeEvent = nativeEvent;\n    event.pointerId = normalizedEvent.pointerId;\n    event.width = normalizedEvent.width;\n    event.height = normalizedEvent.height;\n    event.isPrimary = normalizedEvent.isPrimary;\n    event.pointerType = normalizedEvent.pointerType;\n    event.pressure = normalizedEvent.pressure;\n    event.tangentialPressure = normalizedEvent.tangentialPressure;\n    event.tiltX = normalizedEvent.tiltX;\n    event.tiltY = normalizedEvent.tiltY;\n    event.twist = normalizedEvent.twist;\n    this.transferMouseData(event, normalizedEvent);\n    const {\n      x,\n      y\n    } = this.getViewportXY(normalizedEvent);\n    event.viewport.x = x;\n    event.viewport.y = y;\n    const [canvasX, canvasY] = this.context.canvas.getCanvasByViewport([x, y]);\n    event.canvas.x = canvasX;\n    event.canvas.y = canvasY;\n    event.global.copyFrom(event.canvas);\n    event.offset.copyFrom(event.canvas);\n    event.isTrusted = nativeEvent.isTrusted;\n    if (event.type === 'pointerleave') {\n      event.type = 'pointerout';\n    }\n    return event;\n  }\n  getViewportXY(nativeEvent) {\n    let x;\n    let y;\n    const {\n      offsetX,\n      offsetY,\n      clientX,\n      clientY\n    } = nativeEvent;\n    if (!isNil(offsetX) && !isNil(offsetY)) {\n      x = offsetX;\n      y = offsetY;\n    } else {\n      const point = this.eventService.client2Viewport({\n        x: clientX,\n        y: clientY\n      });\n      x = point.x;\n      y = point.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n  onframe() {\n    super.onframe();\n    // sync opacity\n    const {\n      opacity\n    } = this.attributes;\n    this.getDomElement().style.opacity = `${opacity}`;\n  }\n}\nHTML.defaultStyleProps = {\n  size: [160, 80],\n  halo: false,\n  icon: false,\n  label: false,\n  pointerEvents: 'auto'\n};","map":{"version":3,"names":["FederatedPointerEvent","HTML","GHTML","Rect","Renderer","isNil","isUndefined","pick","set","CommonEvent","BaseNode","constructor","options","Object","assign","style","defaultStyleProps","rootPointerEvent","forwardEvents","nativeEvent","canvas","context","iCanvas","renderingContext","root","ownerDocument","defaultView","normalizedEvents","normalizeToPointerEvent","forEach","normalizedEvent","event","bootstrapEvent","eventService","mapEvent","events","CLICK","POINTER_DOWN","POINTER_MOVE","POINTER_UP","POINTER_OVER","POINTER_LEAVE","getDomElement","getShape","render","attributes","parsedAttributes","container","drawKeyShape","drawPortShapes","getKeyStyle","_a","dx","dy","__rest","width","height","getSize","x","y","bounds","upsert","opacity","connectedCallback","renderer","getRenderer","isCanvasRenderer","element","eventName","addEventListener","attributeChangedCallback","name","oldValue","newValue","zIndex","destroy","removeEventListener","isTouchEvent","i","changedTouches","length","touch","button","buttons","isPrimary","touches","type","radiusX","radiusY","tiltX","tiltY","pointerType","pointerId","identifier","pressure","force","twist","tangentialPressure","isNormalized","push","isMouseEvent","tempEvent","transferMouseData","isTrusted","srcElement","timeStamp","performance","now","altKey","metaKey","shiftKey","ctrlKey","client","clientX","clientY","movement","movementX","movementY","page","pageX","pageY","screen","screenX","screenY","relatedTarget","view","originalEvent","getViewportXY","viewport","canvasX","canvasY","getCanvasByViewport","global","copyFrom","offset","offsetX","offsetY","point","client2Viewport","onframe","size","halo","icon","label","pointerEvents"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/nodes/html.ts"],"sourcesContent":["import {\n  DisplayObjectConfig,\n  FederatedMouseEvent,\n  FederatedPointerEvent,\n  HTML as GHTML,\n  HTMLStyleProps as GHTMLStyleProps,\n  Group,\n  ICanvas,\n  IEventTarget,\n  Rect,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport { isNil, isUndefined, pick, set } from '@antv/util';\nimport { CommonEvent } from '../../constants';\nimport type { BaseNodeStyleProps } from './base-node';\nimport { BaseNode } from './base-node';\n\n/**\n * <zh/> HTML 节点样式配置项\n *\n * <en/> HTML node style props\n */\nexport interface HTMLStyleProps extends BaseNodeStyleProps {\n  /**\n   * <zh/> HTML 内容，可以为字符串或者 `HTMLElement`\n   *\n   * <en/> HTML content, can be a string or `HTMLElement`\n   */\n  innerHTML: string | HTMLElement;\n  /**\n   * <zh/> 横行偏移量。HTML 容器默认以左上角为原点，通过 dx 来进行横向偏移\n   *\n   * <en/> Horizontal offset. The HTML container defaults to the upper left corner as the origin, and the horizontal offset is performed through dx\n   * @defaultValue 0\n   */\n  dx?: number;\n  /**\n   * <zh/> 纵向偏移量。HTML 容器默认以左上角为原点，通过 dy 来进行纵向偏移\n   *\n   * <en/> Vertical offset. The HTML container defaults to the upper left corner as the origin, and the vertical offset is performed through dy\n   * @defaultValue 0\n   */\n  dy?: number;\n}\n\n/**\n * <zh/> HTML 节点\n *\n * <en/> HTML node\n * @see https://github.com/antvis/G/blob/next/packages/g/src/plugins/EventPlugin.ts\n */\nexport class HTML extends BaseNode<HTMLStyleProps> {\n  static defaultStyleProps: Partial<HTMLStyleProps> = {\n    size: [160, 80],\n    halo: false,\n    icon: false,\n    label: false,\n    pointerEvents: 'auto',\n  };\n\n  constructor(options: DisplayObjectConfig<HTMLStyleProps>) {\n    super({ ...options, style: Object.assign({}, HTML.defaultStyleProps, options.style) });\n  }\n\n  private rootPointerEvent = new FederatedPointerEvent(null);\n\n  private get eventService() {\n    return this.context.canvas.context.eventService;\n  }\n\n  private get events() {\n    return [\n      CommonEvent.CLICK,\n      CommonEvent.POINTER_DOWN,\n      CommonEvent.POINTER_MOVE,\n      CommonEvent.POINTER_UP,\n      CommonEvent.POINTER_OVER,\n      CommonEvent.POINTER_LEAVE,\n    ];\n  }\n\n  protected getDomElement() {\n    return this.getShape<GHTML>('key').getDomElement();\n  }\n\n  /**\n   * @override\n   */\n  public render(attributes: Required<HTMLStyleProps> = this.parsedAttributes, container: Group = this): void {\n    this.drawKeyShape(attributes, container);\n\n    this.drawPortShapes(attributes, container);\n  }\n\n  protected getKeyStyle(attributes: Required<HTMLStyleProps>): GHTMLStyleProps {\n    const {\n      dx = 0,\n      dy = 0,\n      ...style\n    } = pick(attributes, ['dx', 'dy', 'innerHTML', 'pointerEvents', 'cursor']) as unknown as HTMLStyleProps;\n    const [width, height] = this.getSize(attributes);\n    return { x: dx, y: dy, ...style, width, height };\n  }\n\n  protected drawKeyShape(attributes: Required<HTMLStyleProps>, container: Group) {\n    const style = this.getKeyStyle(attributes);\n    const { x, y, width = 0, height = 0 } = style;\n    const bounds = this.upsert('key-container', Rect, { x, y, width, height, opacity: 0 }, container)!;\n    return this.upsert('key', GHTML, style, bounds);\n  }\n\n  public connectedCallback() {\n    // only enable in canvas renderer\n    const renderer = this.context.canvas.getRenderer('main');\n    const isCanvasRenderer = renderer instanceof Renderer;\n    if (!isCanvasRenderer) return;\n\n    const element = this.getDomElement();\n    this.events.forEach((eventName) => {\n      // @ts-expect-error assert event is PointerEvent\n      element.addEventListener(eventName, this.forwardEvents);\n    });\n  }\n\n  public attributeChangedCallback(name: any, oldValue: any, newValue: any) {\n    if (name === 'zIndex' && oldValue !== newValue) {\n      this.getDomElement().style.zIndex = newValue;\n    }\n  }\n\n  public destroy() {\n    const element = this.getDomElement();\n    this.events.forEach((eventName) => {\n      // @ts-expect-error assert event is PointerEvent\n      element.removeEventListener(eventName, this.forwardEvents);\n    });\n    super.destroy();\n  }\n\n  private forwardEvents = (nativeEvent: PointerEvent) => {\n    const canvas = this.context.canvas;\n    const iCanvas = canvas.context.renderingContext.root!.ownerDocument!.defaultView!;\n\n    const normalizedEvents = this.normalizeToPointerEvent(nativeEvent, iCanvas);\n\n    normalizedEvents.forEach((normalizedEvent) => {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvent, iCanvas, nativeEvent);\n      // 当点击到 html 元素时，避免触发 pointerupoutside 事件\n      // When clicking on the html element, avoid triggering the pointerupoutside event\n      set(canvas.context.eventService, 'mappingTable.pointerupoutside', []);\n      canvas.context.eventService.mapEvent(event);\n    });\n  };\n\n  private normalizeToPointerEvent(event: PointerEvent, canvas: ICanvas): PointerEvent[] {\n    const normalizedEvents = [];\n    if (canvas.isTouchEvent(event)) {\n      for (let i = 0; i < event.changedTouches.length; i++) {\n        const touch = event.changedTouches[i] as any;\n\n        // use changedTouches instead of touches since touchend has no touches\n        // @see https://stackoverflow.com/a/10079076\n        if (isUndefined(touch.button)) touch.button = 0;\n        if (isUndefined(touch.buttons)) touch.buttons = 1;\n        if (isUndefined(touch.isPrimary)) {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n        if (isUndefined(touch.width)) touch.width = touch.radiusX || 1;\n        if (isUndefined(touch.height)) touch.height = touch.radiusY || 1;\n        if (isUndefined(touch.tiltX)) touch.tiltX = 0;\n        if (isUndefined(touch.tiltY)) touch.tiltY = 0;\n        if (isUndefined(touch.pointerType)) touch.pointerType = 'touch';\n        // @see https://developer.mozilla.org/zh-CN/docs/Web/API/Touch/identifier\n        if (isUndefined(touch.pointerId)) touch.pointerId = touch.identifier || 0;\n        if (isUndefined(touch.pressure)) touch.pressure = touch.force || 0.5;\n        if (isUndefined(touch.twist)) touch.twist = 0;\n        if (isUndefined(touch.tangentialPressure)) touch.tangentialPressure = 0;\n        touch.isNormalized = true;\n        touch.type = event.type;\n\n        normalizedEvents.push(touch);\n      }\n    } else if (canvas.isMouseEvent(event)) {\n      const tempEvent = event as any;\n      if (isUndefined(tempEvent.isPrimary)) tempEvent.isPrimary = true;\n      if (isUndefined(tempEvent.width)) tempEvent.width = 1;\n      if (isUndefined(tempEvent.height)) tempEvent.height = 1;\n      if (isUndefined(tempEvent.tiltX)) tempEvent.tiltX = 0;\n      if (isUndefined(tempEvent.tiltY)) tempEvent.tiltY = 0;\n      if (isUndefined(tempEvent.pointerType)) tempEvent.pointerType = 'mouse';\n      if (isUndefined(tempEvent.pointerId)) tempEvent.pointerId = 1;\n      if (isUndefined(tempEvent.pressure)) tempEvent.pressure = 0.5;\n      if (isUndefined(tempEvent.twist)) tempEvent.twist = 0;\n      if (isUndefined(tempEvent.tangentialPressure)) tempEvent.tangentialPressure = 0;\n      tempEvent.isNormalized = true;\n\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n\n    return normalizedEvents as PointerEvent[];\n  }\n\n  private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void {\n    event.isTrusted = nativeEvent.isTrusted;\n    event.srcElement = nativeEvent.srcElement as IEventTarget;\n    event.timeStamp = performance.now();\n    event.type = nativeEvent.type;\n\n    event.altKey = nativeEvent.altKey;\n    event.metaKey = nativeEvent.metaKey;\n    event.shiftKey = nativeEvent.shiftKey;\n    event.ctrlKey = nativeEvent.ctrlKey;\n    event.button = nativeEvent.button;\n    event.buttons = nativeEvent.buttons;\n    event.client.x = nativeEvent.clientX;\n    event.client.y = nativeEvent.clientY;\n    event.movement.x = nativeEvent.movementX;\n    event.movement.y = nativeEvent.movementY;\n    event.page.x = nativeEvent.pageX;\n    event.page.y = nativeEvent.pageY;\n    event.screen.x = nativeEvent.screenX;\n    event.screen.y = nativeEvent.screenY;\n    event.relatedTarget = null;\n  }\n\n  private bootstrapEvent(\n    event: FederatedPointerEvent,\n    normalizedEvent: PointerEvent,\n    view: ICanvas,\n    nativeEvent: PointerEvent | MouseEvent | TouchEvent,\n  ): FederatedPointerEvent {\n    event.view = view;\n    // @ts-ignore\n    event.originalEvent = null;\n    event.nativeEvent = nativeEvent;\n\n    event.pointerId = normalizedEvent.pointerId;\n    event.width = normalizedEvent.width;\n    event.height = normalizedEvent.height;\n    event.isPrimary = normalizedEvent.isPrimary;\n    event.pointerType = normalizedEvent.pointerType;\n    event.pressure = normalizedEvent.pressure;\n    event.tangentialPressure = normalizedEvent.tangentialPressure;\n    event.tiltX = normalizedEvent.tiltX;\n    event.tiltY = normalizedEvent.tiltY;\n    event.twist = normalizedEvent.twist;\n    this.transferMouseData(event, normalizedEvent);\n\n    const { x, y } = this.getViewportXY(normalizedEvent);\n    event.viewport.x = x;\n    event.viewport.y = y;\n    const [canvasX, canvasY] = this.context.canvas.getCanvasByViewport([x, y]);\n    event.canvas.x = canvasX;\n    event.canvas.y = canvasY;\n    event.global.copyFrom(event.canvas);\n    event.offset.copyFrom(event.canvas);\n\n    event.isTrusted = nativeEvent.isTrusted;\n    if (event.type === 'pointerleave') {\n      event.type = 'pointerout';\n    }\n    return event;\n  }\n\n  private getViewportXY(nativeEvent: PointerEvent | WheelEvent) {\n    let x: number;\n    let y: number;\n    const { offsetX, offsetY, clientX, clientY } = nativeEvent;\n    if (!isNil(offsetX) && !isNil(offsetY)) {\n      x = offsetX;\n      y = offsetY;\n    } else {\n      const point = this.eventService.client2Viewport({ x: clientX, y: clientY });\n      x = point.x;\n      y = point.y;\n    }\n    return { x, y };\n  }\n\n  protected onframe(): void {\n    super.onframe();\n    // sync opacity\n    const { opacity } = this.attributes;\n    this.getDomElement().style.opacity = `${opacity}`;\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAGEA,qBAAqB,EACrBC,IAAI,IAAIC,KAAK,EAKbC,IAAI,QACC,SAAS;AAChB,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,KAAK,EAAEC,WAAW,EAAEC,IAAI,EAAEC,GAAG,QAAQ,YAAY;AAC1D,SAASC,WAAW,QAAQ,iBAAiB;AAE7C,SAASC,QAAQ,QAAQ,aAAa;AA8BtC;;;;;;AAMA,OAAM,MAAOT,IAAK,SAAQS,QAAwB;EAShDC,YAAYC,OAA4C;IACtD,KAAK,CAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMF,OAAO;MAAEG,KAAK,EAAEF,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEb,IAAI,CAACe,iBAAiB,EAAEJ,OAAO,CAACG,KAAK;IAAC,GAAG;IAGhF,KAAAE,gBAAgB,GAAG,IAAIjB,qBAAqB,CAAC,IAAI,CAAC;IA2ElD,KAAAkB,aAAa,GAAIC,WAAyB,IAAI;MACpD,MAAMC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACD,MAAM;MAClC,MAAME,OAAO,GAAGF,MAAM,CAACC,OAAO,CAACE,gBAAgB,CAACC,IAAK,CAACC,aAAc,CAACC,WAAY;MAEjF,MAAMC,gBAAgB,GAAG,IAAI,CAACC,uBAAuB,CAACT,WAAW,EAAEG,OAAO,CAAC;MAE3EK,gBAAgB,CAACE,OAAO,CAAEC,eAAe,IAAI;QAC3C,MAAMC,KAAK,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAACf,gBAAgB,EAAEa,eAAe,EAAER,OAAO,EAAEH,WAAW,CAAC;QAC/F;QACA;QACAX,GAAG,CAACY,MAAM,CAACC,OAAO,CAACY,YAAY,EAAE,+BAA+B,EAAE,EAAE,CAAC;QACrEb,MAAM,CAACC,OAAO,CAACY,YAAY,CAACC,QAAQ,CAACH,KAAK,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC;EA1FD;EAIA,IAAYE,YAAYA,CAAA;IACtB,OAAO,IAAI,CAACZ,OAAO,CAACD,MAAM,CAACC,OAAO,CAACY,YAAY;EACjD;EAEA,IAAYE,MAAMA,CAAA;IAChB,OAAO,CACL1B,WAAW,CAAC2B,KAAK,EACjB3B,WAAW,CAAC4B,YAAY,EACxB5B,WAAW,CAAC6B,YAAY,EACxB7B,WAAW,CAAC8B,UAAU,EACtB9B,WAAW,CAAC+B,YAAY,EACxB/B,WAAW,CAACgC,aAAa,CAC1B;EACH;EAEUC,aAAaA,CAAA;IACrB,OAAO,IAAI,CAACC,QAAQ,CAAQ,KAAK,CAAC,CAACD,aAAa,EAAE;EACpD;EAEA;;;EAGOE,MAAMA,CAACC,UAAA,GAAuC,IAAI,CAACC,gBAAgB,EAAEC,SAAA,GAAmB,IAAI;IACjG,IAAI,CAACC,YAAY,CAACH,UAAU,EAAEE,SAAS,CAAC;IAExC,IAAI,CAACE,cAAc,CAACJ,UAAU,EAAEE,SAAS,CAAC;EAC5C;EAEUG,WAAWA,CAACL,UAAoC;IACxD,MAAMM,EAAA,GAIF5C,IAAI,CAACsC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,CAAC,CAA8B;MAJjG;QACJO,EAAE,GAAG,CAAC;QACNC,EAAE,GAAG;MAAC,IAAAF,EAE+F;MADlGpC,KAAK,GAAAuC,MAAA,CAAAH,EAAA,EAHJ,YAIL,CAAsG;IACvG,MAAM,CAACI,KAAK,EAAEC,MAAM,CAAC,GAAG,IAAI,CAACC,OAAO,CAACZ,UAAU,CAAC;IAChD,OAAAhC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;MAAS4C,CAAC,EAAEN,EAAE;MAAEO,CAAC,EAAEN;IAAE,GAAKtC,KAAK;MAAEwC,KAAK;MAAEC;IAAM;EAChD;EAEUR,YAAYA,CAACH,UAAoC,EAAEE,SAAgB;IAC3E,MAAMhC,KAAK,GAAG,IAAI,CAACmC,WAAW,CAACL,UAAU,CAAC;IAC1C,MAAM;MAAEa,CAAC;MAAEC,CAAC;MAAEJ,KAAK,GAAG,CAAC;MAAEC,MAAM,GAAG;IAAC,CAAE,GAAGzC,KAAK;IAC7C,MAAM6C,MAAM,GAAG,IAAI,CAACC,MAAM,CAAC,eAAe,EAAE1D,IAAI,EAAE;MAAEuD,CAAC;MAAEC,CAAC;MAAEJ,KAAK;MAAEC,MAAM;MAAEM,OAAO,EAAE;IAAC,CAAE,EAAEf,SAAS,CAAE;IAClG,OAAO,IAAI,CAACc,MAAM,CAAC,KAAK,EAAE3D,KAAK,EAAEa,KAAK,EAAE6C,MAAM,CAAC;EACjD;EAEOG,iBAAiBA,CAAA;IACtB;IACA,MAAMC,QAAQ,GAAG,IAAI,CAAC3C,OAAO,CAACD,MAAM,CAAC6C,WAAW,CAAC,MAAM,CAAC;IACxD,MAAMC,gBAAgB,GAAGF,QAAQ,YAAY5D,QAAQ;IACrD,IAAI,CAAC8D,gBAAgB,EAAE;IAEvB,MAAMC,OAAO,GAAG,IAAI,CAACzB,aAAa,EAAE;IACpC,IAAI,CAACP,MAAM,CAACN,OAAO,CAAEuC,SAAS,IAAI;MAChC;MACAD,OAAO,CAACE,gBAAgB,CAACD,SAAS,EAAE,IAAI,CAAClD,aAAa,CAAC;IACzD,CAAC,CAAC;EACJ;EAEOoD,wBAAwBA,CAACC,IAAS,EAAEC,QAAa,EAAEC,QAAa;IACrE,IAAIF,IAAI,KAAK,QAAQ,IAAIC,QAAQ,KAAKC,QAAQ,EAAE;MAC9C,IAAI,CAAC/B,aAAa,EAAE,CAAC3B,KAAK,CAAC2D,MAAM,GAAGD,QAAQ;IAC9C;EACF;EAEOE,OAAOA,CAAA;IACZ,MAAMR,OAAO,GAAG,IAAI,CAACzB,aAAa,EAAE;IACpC,IAAI,CAACP,MAAM,CAACN,OAAO,CAAEuC,SAAS,IAAI;MAChC;MACAD,OAAO,CAACS,mBAAmB,CAACR,SAAS,EAAE,IAAI,CAAClD,aAAa,CAAC;IAC5D,CAAC,CAAC;IACF,KAAK,CAACyD,OAAO,EAAE;EACjB;EAiBQ/C,uBAAuBA,CAACG,KAAmB,EAAEX,MAAe;IAClE,MAAMO,gBAAgB,GAAG,EAAE;IAC3B,IAAIP,MAAM,CAACyD,YAAY,CAAC9C,KAAK,CAAC,EAAE;MAC9B,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/C,KAAK,CAACgD,cAAc,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QACpD,MAAMG,KAAK,GAAGlD,KAAK,CAACgD,cAAc,CAACD,CAAC,CAAQ;QAE5C;QACA;QACA,IAAIxE,WAAW,CAAC2E,KAAK,CAACC,MAAM,CAAC,EAAED,KAAK,CAACC,MAAM,GAAG,CAAC;QAC/C,IAAI5E,WAAW,CAAC2E,KAAK,CAACE,OAAO,CAAC,EAAEF,KAAK,CAACE,OAAO,GAAG,CAAC;QACjD,IAAI7E,WAAW,CAAC2E,KAAK,CAACG,SAAS,CAAC,EAAE;UAChCH,KAAK,CAACG,SAAS,GAAGrD,KAAK,CAACsD,OAAO,CAACL,MAAM,KAAK,CAAC,IAAIjD,KAAK,CAACuD,IAAI,KAAK,YAAY;QAC7E;QACA,IAAIhF,WAAW,CAAC2E,KAAK,CAAC1B,KAAK,CAAC,EAAE0B,KAAK,CAAC1B,KAAK,GAAG0B,KAAK,CAACM,OAAO,IAAI,CAAC;QAC9D,IAAIjF,WAAW,CAAC2E,KAAK,CAACzB,MAAM,CAAC,EAAEyB,KAAK,CAACzB,MAAM,GAAGyB,KAAK,CAACO,OAAO,IAAI,CAAC;QAChE,IAAIlF,WAAW,CAAC2E,KAAK,CAACQ,KAAK,CAAC,EAAER,KAAK,CAACQ,KAAK,GAAG,CAAC;QAC7C,IAAInF,WAAW,CAAC2E,KAAK,CAACS,KAAK,CAAC,EAAET,KAAK,CAACS,KAAK,GAAG,CAAC;QAC7C,IAAIpF,WAAW,CAAC2E,KAAK,CAACU,WAAW,CAAC,EAAEV,KAAK,CAACU,WAAW,GAAG,OAAO;QAC/D;QACA,IAAIrF,WAAW,CAAC2E,KAAK,CAACW,SAAS,CAAC,EAAEX,KAAK,CAACW,SAAS,GAAGX,KAAK,CAACY,UAAU,IAAI,CAAC;QACzE,IAAIvF,WAAW,CAAC2E,KAAK,CAACa,QAAQ,CAAC,EAAEb,KAAK,CAACa,QAAQ,GAAGb,KAAK,CAACc,KAAK,IAAI,GAAG;QACpE,IAAIzF,WAAW,CAAC2E,KAAK,CAACe,KAAK,CAAC,EAAEf,KAAK,CAACe,KAAK,GAAG,CAAC;QAC7C,IAAI1F,WAAW,CAAC2E,KAAK,CAACgB,kBAAkB,CAAC,EAAEhB,KAAK,CAACgB,kBAAkB,GAAG,CAAC;QACvEhB,KAAK,CAACiB,YAAY,GAAG,IAAI;QACzBjB,KAAK,CAACK,IAAI,GAAGvD,KAAK,CAACuD,IAAI;QAEvB3D,gBAAgB,CAACwE,IAAI,CAAClB,KAAK,CAAC;MAC9B;IACF,CAAC,MAAM,IAAI7D,MAAM,CAACgF,YAAY,CAACrE,KAAK,CAAC,EAAE;MACrC,MAAMsE,SAAS,GAAGtE,KAAY;MAC9B,IAAIzB,WAAW,CAAC+F,SAAS,CAACjB,SAAS,CAAC,EAAEiB,SAAS,CAACjB,SAAS,GAAG,IAAI;MAChE,IAAI9E,WAAW,CAAC+F,SAAS,CAAC9C,KAAK,CAAC,EAAE8C,SAAS,CAAC9C,KAAK,GAAG,CAAC;MACrD,IAAIjD,WAAW,CAAC+F,SAAS,CAAC7C,MAAM,CAAC,EAAE6C,SAAS,CAAC7C,MAAM,GAAG,CAAC;MACvD,IAAIlD,WAAW,CAAC+F,SAAS,CAACZ,KAAK,CAAC,EAAEY,SAAS,CAACZ,KAAK,GAAG,CAAC;MACrD,IAAInF,WAAW,CAAC+F,SAAS,CAACX,KAAK,CAAC,EAAEW,SAAS,CAACX,KAAK,GAAG,CAAC;MACrD,IAAIpF,WAAW,CAAC+F,SAAS,CAACV,WAAW,CAAC,EAAEU,SAAS,CAACV,WAAW,GAAG,OAAO;MACvE,IAAIrF,WAAW,CAAC+F,SAAS,CAACT,SAAS,CAAC,EAAES,SAAS,CAACT,SAAS,GAAG,CAAC;MAC7D,IAAItF,WAAW,CAAC+F,SAAS,CAACP,QAAQ,CAAC,EAAEO,SAAS,CAACP,QAAQ,GAAG,GAAG;MAC7D,IAAIxF,WAAW,CAAC+F,SAAS,CAACL,KAAK,CAAC,EAAEK,SAAS,CAACL,KAAK,GAAG,CAAC;MACrD,IAAI1F,WAAW,CAAC+F,SAAS,CAACJ,kBAAkB,CAAC,EAAEI,SAAS,CAACJ,kBAAkB,GAAG,CAAC;MAC/EI,SAAS,CAACH,YAAY,GAAG,IAAI;MAE7BvE,gBAAgB,CAACwE,IAAI,CAACE,SAAS,CAAC;IAClC,CAAC,MAAM;MACL1E,gBAAgB,CAACwE,IAAI,CAACpE,KAAK,CAAC;IAC9B;IAEA,OAAOJ,gBAAkC;EAC3C;EAEQ2E,iBAAiBA,CAACvE,KAA0B,EAAEZ,WAAuB;IAC3EY,KAAK,CAACwE,SAAS,GAAGpF,WAAW,CAACoF,SAAS;IACvCxE,KAAK,CAACyE,UAAU,GAAGrF,WAAW,CAACqF,UAA0B;IACzDzE,KAAK,CAAC0E,SAAS,GAAGC,WAAW,CAACC,GAAG,EAAE;IACnC5E,KAAK,CAACuD,IAAI,GAAGnE,WAAW,CAACmE,IAAI;IAE7BvD,KAAK,CAAC6E,MAAM,GAAGzF,WAAW,CAACyF,MAAM;IACjC7E,KAAK,CAAC8E,OAAO,GAAG1F,WAAW,CAAC0F,OAAO;IACnC9E,KAAK,CAAC+E,QAAQ,GAAG3F,WAAW,CAAC2F,QAAQ;IACrC/E,KAAK,CAACgF,OAAO,GAAG5F,WAAW,CAAC4F,OAAO;IACnChF,KAAK,CAACmD,MAAM,GAAG/D,WAAW,CAAC+D,MAAM;IACjCnD,KAAK,CAACoD,OAAO,GAAGhE,WAAW,CAACgE,OAAO;IACnCpD,KAAK,CAACiF,MAAM,CAACtD,CAAC,GAAGvC,WAAW,CAAC8F,OAAO;IACpClF,KAAK,CAACiF,MAAM,CAACrD,CAAC,GAAGxC,WAAW,CAAC+F,OAAO;IACpCnF,KAAK,CAACoF,QAAQ,CAACzD,CAAC,GAAGvC,WAAW,CAACiG,SAAS;IACxCrF,KAAK,CAACoF,QAAQ,CAACxD,CAAC,GAAGxC,WAAW,CAACkG,SAAS;IACxCtF,KAAK,CAACuF,IAAI,CAAC5D,CAAC,GAAGvC,WAAW,CAACoG,KAAK;IAChCxF,KAAK,CAACuF,IAAI,CAAC3D,CAAC,GAAGxC,WAAW,CAACqG,KAAK;IAChCzF,KAAK,CAAC0F,MAAM,CAAC/D,CAAC,GAAGvC,WAAW,CAACuG,OAAO;IACpC3F,KAAK,CAAC0F,MAAM,CAAC9D,CAAC,GAAGxC,WAAW,CAACwG,OAAO;IACpC5F,KAAK,CAAC6F,aAAa,GAAG,IAAI;EAC5B;EAEQ5F,cAAcA,CACpBD,KAA4B,EAC5BD,eAA6B,EAC7B+F,IAAa,EACb1G,WAAmD;IAEnDY,KAAK,CAAC8F,IAAI,GAAGA,IAAI;IACjB;IACA9F,KAAK,CAAC+F,aAAa,GAAG,IAAI;IAC1B/F,KAAK,CAACZ,WAAW,GAAGA,WAAW;IAE/BY,KAAK,CAAC6D,SAAS,GAAG9D,eAAe,CAAC8D,SAAS;IAC3C7D,KAAK,CAACwB,KAAK,GAAGzB,eAAe,CAACyB,KAAK;IACnCxB,KAAK,CAACyB,MAAM,GAAG1B,eAAe,CAAC0B,MAAM;IACrCzB,KAAK,CAACqD,SAAS,GAAGtD,eAAe,CAACsD,SAAS;IAC3CrD,KAAK,CAAC4D,WAAW,GAAG7D,eAAe,CAAC6D,WAAW;IAC/C5D,KAAK,CAAC+D,QAAQ,GAAGhE,eAAe,CAACgE,QAAQ;IACzC/D,KAAK,CAACkE,kBAAkB,GAAGnE,eAAe,CAACmE,kBAAkB;IAC7DlE,KAAK,CAAC0D,KAAK,GAAG3D,eAAe,CAAC2D,KAAK;IACnC1D,KAAK,CAAC2D,KAAK,GAAG5D,eAAe,CAAC4D,KAAK;IACnC3D,KAAK,CAACiE,KAAK,GAAGlE,eAAe,CAACkE,KAAK;IACnC,IAAI,CAACM,iBAAiB,CAACvE,KAAK,EAAED,eAAe,CAAC;IAE9C,MAAM;MAAE4B,CAAC;MAAEC;IAAC,CAAE,GAAG,IAAI,CAACoE,aAAa,CAACjG,eAAe,CAAC;IACpDC,KAAK,CAACiG,QAAQ,CAACtE,CAAC,GAAGA,CAAC;IACpB3B,KAAK,CAACiG,QAAQ,CAACrE,CAAC,GAAGA,CAAC;IACpB,MAAM,CAACsE,OAAO,EAAEC,OAAO,CAAC,GAAG,IAAI,CAAC7G,OAAO,CAACD,MAAM,CAAC+G,mBAAmB,CAAC,CAACzE,CAAC,EAAEC,CAAC,CAAC,CAAC;IAC1E5B,KAAK,CAACX,MAAM,CAACsC,CAAC,GAAGuE,OAAO;IACxBlG,KAAK,CAACX,MAAM,CAACuC,CAAC,GAAGuE,OAAO;IACxBnG,KAAK,CAACqG,MAAM,CAACC,QAAQ,CAACtG,KAAK,CAACX,MAAM,CAAC;IACnCW,KAAK,CAACuG,MAAM,CAACD,QAAQ,CAACtG,KAAK,CAACX,MAAM,CAAC;IAEnCW,KAAK,CAACwE,SAAS,GAAGpF,WAAW,CAACoF,SAAS;IACvC,IAAIxE,KAAK,CAACuD,IAAI,KAAK,cAAc,EAAE;MACjCvD,KAAK,CAACuD,IAAI,GAAG,YAAY;IAC3B;IACA,OAAOvD,KAAK;EACd;EAEQgG,aAAaA,CAAC5G,WAAsC;IAC1D,IAAIuC,CAAS;IACb,IAAIC,CAAS;IACb,MAAM;MAAE4E,OAAO;MAAEC,OAAO;MAAEvB,OAAO;MAAEC;IAAO,CAAE,GAAG/F,WAAW;IAC1D,IAAI,CAACd,KAAK,CAACkI,OAAO,CAAC,IAAI,CAAClI,KAAK,CAACmI,OAAO,CAAC,EAAE;MACtC9E,CAAC,GAAG6E,OAAO;MACX5E,CAAC,GAAG6E,OAAO;IACb,CAAC,MAAM;MACL,MAAMC,KAAK,GAAG,IAAI,CAACxG,YAAY,CAACyG,eAAe,CAAC;QAAEhF,CAAC,EAAEuD,OAAO;QAAEtD,CAAC,EAAEuD;MAAO,CAAE,CAAC;MAC3ExD,CAAC,GAAG+E,KAAK,CAAC/E,CAAC;MACXC,CAAC,GAAG8E,KAAK,CAAC9E,CAAC;IACb;IACA,OAAO;MAAED,CAAC;MAAEC;IAAC,CAAE;EACjB;EAEUgF,OAAOA,CAAA;IACf,KAAK,CAACA,OAAO,EAAE;IACf;IACA,MAAM;MAAE7E;IAAO,CAAE,GAAG,IAAI,CAACjB,UAAU;IACnC,IAAI,CAACH,aAAa,EAAE,CAAC3B,KAAK,CAAC+C,OAAO,GAAG,GAAGA,OAAO,EAAE;EACnD;;AA1OO7D,IAAA,CAAAe,iBAAiB,GAA4B;EAClD4H,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EACfC,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE,KAAK;EACZC,aAAa,EAAE;CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}