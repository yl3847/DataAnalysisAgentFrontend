{"ast":null,"code":"// There is a certain error in the calculation of text bounds.\nconst EPSILON = 1e-2;\nexport function parseAABB(min2) {\n  const {\n    min,\n    max\n  } = min2;\n  return [[min[0], min[1]], [max[0], max[1]]];\n}\n/**\n * Whether the `point` in `bounds`.\n * @param point\n * @param bounds\n * @param threshold\n */\nexport function isInBounds(point, bounds, threshold = EPSILON) {\n  const [x, y] = point;\n  const [min, max] = bounds;\n  return x >= min[0] - threshold && x <= max[0] + threshold && y >= min[1] - threshold && y <= max[1] + threshold;\n}\n/**\n * Whether `b1` is overflow from `b2`.\n * @param b1\n * @param b2\n * @param threshold The threshold to determine whether the bounds is overflowed, default is 0.\n */\nexport function isOverflow(b1, b2, threshold = EPSILON) {\n  const [min, max] = b1;\n  return !(isInBounds(min, b2, threshold) && isInBounds(max, b2, threshold));\n}\n/**\n * Whether `b1` is overlap with `b2`.\n * @param b1\n * @param b2\n * @returns\n */\nexport function isOverlap(b1, b2) {\n  const [min1, max1] = b1;\n  const [min2, max2] = b2;\n  return min1[0] < max2[0] && max1[0] > min2[0] && min1[1] < max2[1] && max1[1] > min2[1];\n}","map":{"version":3,"names":["EPSILON","parseAABB","min2","min","max","isInBounds","point","bounds","threshold","x","y","isOverflow","b1","b2","isOverlap","min1","max1","max2"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/utils/bounds.ts"],"sourcesContent":["import { AABB } from '@antv/g';\nimport { Vector2 } from './vector';\n\ntype Min = Vector2;\ntype Max = Vector2;\nexport type Bounds = [Min, Max];\n\n// There is a certain error in the calculation of text bounds.\nconst EPSILON = 1e-2;\n\nexport function parseAABB(min2: AABB): Bounds {\n  const { min, max } = min2;\n  return [\n    [min[0], min[1]],\n    [max[0], max[1]],\n  ];\n}\n\n/**\n * Whether the `point` in `bounds`.\n * @param point\n * @param bounds\n * @param threshold\n */\nexport function isInBounds(\n  point: Vector2,\n  bounds: Bounds,\n  threshold = EPSILON,\n): boolean {\n  const [x, y] = point;\n  const [min, max] = bounds;\n  return (\n    x >= min[0] - threshold &&\n    x <= max[0] + threshold &&\n    y >= min[1] - threshold &&\n    y <= max[1] + threshold\n  );\n}\n\n/**\n * Whether `b1` is overflow from `b2`.\n * @param b1\n * @param b2\n * @param threshold The threshold to determine whether the bounds is overflowed, default is 0.\n */\nexport function isOverflow(\n  b1: Bounds,\n  b2: Bounds,\n  threshold = EPSILON,\n): boolean {\n  const [min, max] = b1;\n  return !(isInBounds(min, b2, threshold) && isInBounds(max, b2, threshold));\n}\n\n/**\n * Whether `b1` is overlap with `b2`.\n * @param b1\n * @param b2\n * @returns\n */\nexport function isOverlap(b1: Bounds, b2: Bounds): boolean {\n  const [min1, max1] = b1;\n  const [min2, max2] = b2;\n  return (\n    min1[0] < max2[0] &&\n    max1[0] > min2[0] &&\n    min1[1] < max2[1] &&\n    max1[1] > min2[1]\n  );\n}\n"],"mappings":"AAOA;AACA,MAAMA,OAAO,GAAG,IAAI;AAEpB,OAAM,SAAUC,SAASA,CAACC,IAAU;EAClC,MAAM;IAAEC,GAAG;IAAEC;EAAG,CAAE,GAAGF,IAAI;EACzB,OAAO,CACL,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,EAChB,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,CACjB;AACH;AAEA;;;;;;AAMA,OAAM,SAAUC,UAAUA,CACxBC,KAAc,EACdC,MAAc,EACdC,SAAS,GAAGR,OAAO;EAEnB,MAAM,CAACS,CAAC,EAAEC,CAAC,CAAC,GAAGJ,KAAK;EACpB,MAAM,CAACH,GAAG,EAAEC,GAAG,CAAC,GAAGG,MAAM;EACzB,OACEE,CAAC,IAAIN,GAAG,CAAC,CAAC,CAAC,GAAGK,SAAS,IACvBC,CAAC,IAAIL,GAAG,CAAC,CAAC,CAAC,GAAGI,SAAS,IACvBE,CAAC,IAAIP,GAAG,CAAC,CAAC,CAAC,GAAGK,SAAS,IACvBE,CAAC,IAAIN,GAAG,CAAC,CAAC,CAAC,GAAGI,SAAS;AAE3B;AAEA;;;;;;AAMA,OAAM,SAAUG,UAAUA,CACxBC,EAAU,EACVC,EAAU,EACVL,SAAS,GAAGR,OAAO;EAEnB,MAAM,CAACG,GAAG,EAAEC,GAAG,CAAC,GAAGQ,EAAE;EACrB,OAAO,EAAEP,UAAU,CAACF,GAAG,EAAEU,EAAE,EAAEL,SAAS,CAAC,IAAIH,UAAU,CAACD,GAAG,EAAES,EAAE,EAAEL,SAAS,CAAC,CAAC;AAC5E;AAEA;;;;;;AAMA,OAAM,SAAUM,SAASA,CAACF,EAAU,EAAEC,EAAU;EAC9C,MAAM,CAACE,IAAI,EAAEC,IAAI,CAAC,GAAGJ,EAAE;EACvB,MAAM,CAACV,IAAI,EAAEe,IAAI,CAAC,GAAGJ,EAAE;EACvB,OACEE,IAAI,CAAC,CAAC,CAAC,GAAGE,IAAI,CAAC,CAAC,CAAC,IACjBD,IAAI,CAAC,CAAC,CAAC,GAAGd,IAAI,CAAC,CAAC,CAAC,IACjBa,IAAI,CAAC,CAAC,CAAC,GAAGE,IAAI,CAAC,CAAC,CAAC,IACjBD,IAAI,CAAC,CAAC,CAAC,GAAGd,IAAI,CAAC,CAAC,CAAC;AAErB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}