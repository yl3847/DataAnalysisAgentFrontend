{"ast":null,"code":"import { addDummyNode } from './util';\nexport const addBorderSegments = g => {\n  const dfs = v => {\n    const children = g.getChildren(v);\n    const node = g.getNode(v);\n    if (children === null || children === void 0 ? void 0 : children.length) {\n      children.forEach(child => dfs(child.id));\n    }\n    if (node.data.hasOwnProperty('minRank')) {\n      node.data.borderLeft = [];\n      node.data.borderRight = [];\n      for (let rank = node.data.minRank, maxRank = node.data.maxRank + 1; rank < maxRank; rank += 1) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  };\n  g.getRoots().forEach(child => dfs(child.id));\n};\nconst addBorderNode = (g, prop, prefix, sg, sgNode, rank) => {\n  const label = {\n    rank,\n    borderType: prop,\n    width: 0,\n    height: 0\n  };\n  // @ts-ignore\n  const prev = sgNode.data[prop][rank - 1];\n  const curr = addDummyNode(g, 'border', label, prefix);\n  // @ts-ignore\n  sgNode.data[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.addEdge({\n      id: `e${Math.random()}`,\n      source: prev,\n      target: curr,\n      data: {\n        weight: 1\n      }\n    });\n  }\n};","map":{"version":3,"names":["addDummyNode","addBorderSegments","g","dfs","v","children","getChildren","node","getNode","length","forEach","child","id","data","hasOwnProperty","borderLeft","borderRight","rank","minRank","maxRank","addBorderNode","getRoots","prop","prefix","sg","sgNode","label","borderType","width","height","prev","curr","setParent","addEdge","Math","random","source","target","weight"],"sources":["../../src/antv-dagre/add-border-segments.ts"],"sourcesContent":[null],"mappings":"AAEA,SAASA,YAAY,QAAQ,QAAQ;AAErC,OAAO,MAAMC,iBAAiB,GAAIC,CAAQ,IAAI;EAC5C,MAAMC,GAAG,GAAIC,CAAK,IAAI;IACpB,MAAMC,QAAQ,GAAGH,CAAC,CAACI,WAAW,CAACF,CAAC,CAAC;IACjC,MAAMG,IAAI,GAAGL,CAAC,CAACM,OAAO,CAACJ,CAAC,CAAE;IAC1B,IAAIC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,MAAM,EAAE;MACpBJ,QAAQ,CAACK,OAAO,CAAEC,KAAK,IAAKR,GAAG,CAACQ,KAAK,CAACC,EAAE,CAAC,CAAC;;IAG5C,IAAIL,IAAI,CAACM,IAAI,CAACC,cAAc,CAAC,SAAS,CAAC,EAAE;MACvCP,IAAI,CAACM,IAAI,CAACE,UAAU,GAAG,EAAE;MACzBR,IAAI,CAACM,IAAI,CAACG,WAAW,GAAG,EAAE;MAC1B,KACE,IAAIC,IAAI,GAAGV,IAAI,CAACM,IAAI,CAACK,OAAQ,EAAEC,OAAO,GAAGZ,IAAI,CAACM,IAAI,CAACM,OAAQ,GAAG,CAAC,EAC/DF,IAAI,GAAGE,OAAO,EACdF,IAAI,IAAI,CAAC,EACT;QACAG,aAAa,CAAClB,CAAC,EAAE,YAAY,EAAE,KAAK,EAAEE,CAAC,EAAEG,IAAI,EAAEU,IAAI,CAAC;QACpDG,aAAa,CAAClB,CAAC,EAAE,aAAa,EAAE,KAAK,EAAEE,CAAC,EAAEG,IAAI,EAAEU,IAAI,CAAC;;;EAG3D,CAAC;EAEDf,CAAC,CAACmB,QAAQ,EAAE,CAACX,OAAO,CAAEC,KAAK,IAAKR,GAAG,CAACQ,KAAK,CAACC,EAAE,CAAC,CAAC;AAChD,CAAC;AAED,MAAMQ,aAAa,GAAGA,CACpBlB,CAAQ,EACRoB,IAAY,EACZC,MAAc,EACdC,EAAM,EACNC,MAAsB,EACtBR,IAAY,KACV;EACF,MAAMS,KAAK,GAAa;IAAET,IAAI;IAAEU,UAAU,EAAEL,IAAI;IAAEM,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAC,CAAE;EACvE;EACA,MAAMC,IAAI,GAAGL,MAAM,CAACZ,IAAI,CAACS,IAAI,CAAC,CAACL,IAAI,GAAG,CAAC,CAAC;EACxC,MAAMc,IAAI,GAAG/B,YAAY,CAACE,CAAC,EAAE,QAAQ,EAAEwB,KAAK,EAAEH,MAAM,CAAC;EACrD;EACAE,MAAM,CAACZ,IAAI,CAACS,IAAI,CAAC,CAACL,IAAI,CAAC,GAAGc,IAAI;EAC9B7B,CAAC,CAAC8B,SAAS,CAACD,IAAI,EAAEP,EAAE,CAAC;EACrB,IAAIM,IAAI,EAAE;IACR5B,CAAC,CAAC+B,OAAO,CAAC;MACRrB,EAAE,EAAE,IAAIsB,IAAI,CAACC,MAAM,EAAE,EAAE;MACvBC,MAAM,EAAEN,IAAI;MACZO,MAAM,EAAEN,IAAI;MACZlB,IAAI,EAAE;QAAEyB,MAAM,EAAE;MAAC;KAClB,CAAC;;AAEN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}