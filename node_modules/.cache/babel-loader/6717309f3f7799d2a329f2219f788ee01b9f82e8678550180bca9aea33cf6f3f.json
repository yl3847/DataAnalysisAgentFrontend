{"ast":null,"code":"import { convertAngles } from '../utils/angle';\nexport const getPolarOptions = (options = {}) => {\n  const defaultOptions = {\n    startAngle: -Math.PI / 2,\n    endAngle: Math.PI * 3 / 2,\n    innerRadius: 0,\n    outerRadius: 1\n  };\n  const polarOption = Object.assign(Object.assign({}, defaultOptions), options);\n  return Object.assign(Object.assign({}, polarOption), convertAngles(polarOption.startAngle, polarOption.endAngle));\n};\n/**\n * Polar transformation for circular charts using center of canvas as origin.\n * @todo Adjust size of canvas by startAngle and endAngle to make chart as big as possible.\n */\nexport const Polar = options => {\n  const {\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius\n  } = getPolarOptions(options);\n  return [['translate', 0, 0.5], ['reflect.y'], ['translate', 0, -0.5], ['polar', startAngle, endAngle, innerRadius, outerRadius]];\n};\nPolar.props = {};","map":{"version":3,"names":["convertAngles","getPolarOptions","options","defaultOptions","startAngle","Math","PI","endAngle","innerRadius","outerRadius","polarOption","Object","assign","Polar","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/coordinate/polar.ts"],"sourcesContent":["import { convertAngles } from '../utils/angle';\nimport { CoordinateComponent as CC } from '../runtime';\nimport { PolarCoordinate } from '../spec';\n\nexport type PolarOptions = Omit<PolarCoordinate, 'type'>;\n\nexport const getPolarOptions = (options: PolarOptions = {}) => {\n  const defaultOptions = {\n    startAngle: -Math.PI / 2,\n    endAngle: (Math.PI * 3) / 2,\n    innerRadius: 0,\n    outerRadius: 1,\n  };\n  const polarOption = { ...defaultOptions, ...options };\n  return {\n    ...polarOption,\n    ...convertAngles(polarOption.startAngle, polarOption.endAngle),\n  };\n};\n/**\n * Polar transformation for circular charts using center of canvas as origin.\n * @todo Adjust size of canvas by startAngle and endAngle to make chart as big as possible.\n */\nexport const Polar: CC<PolarOptions> = (options) => {\n  const { startAngle, endAngle, innerRadius, outerRadius } =\n    getPolarOptions(options);\n  return [\n    ['translate', 0, 0.5],\n    ['reflect.y'],\n    ['translate', 0, -0.5],\n    ['polar', startAngle, endAngle, innerRadius, outerRadius],\n  ];\n};\n\nPolar.props = {};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,gBAAgB;AAM9C,OAAO,MAAMC,eAAe,GAAGA,CAACC,OAAA,GAAwB,EAAE,KAAI;EAC5D,MAAMC,cAAc,GAAG;IACrBC,UAAU,EAAE,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC;IACxBC,QAAQ,EAAGF,IAAI,CAACC,EAAE,GAAG,CAAC,GAAI,CAAC;IAC3BE,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE;GACd;EACD,MAAMC,WAAW,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQT,cAAc,GAAKD,OAAO,CAAE;EACrD,OAAAS,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,WAAW,GACXV,aAAa,CAACU,WAAW,CAACN,UAAU,EAAEM,WAAW,CAACH,QAAQ,CAAC;AAElE,CAAC;AACD;;;;AAIA,OAAO,MAAMM,KAAK,GAAsBX,OAAO,IAAI;EACjD,MAAM;IAAEE,UAAU;IAAEG,QAAQ;IAAEC,WAAW;IAAEC;EAAW,CAAE,GACtDR,eAAe,CAACC,OAAO,CAAC;EAC1B,OAAO,CACL,CAAC,WAAW,EAAE,CAAC,EAAE,GAAG,CAAC,EACrB,CAAC,WAAW,CAAC,EACb,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EACtB,CAAC,OAAO,EAAEE,UAAU,EAAEG,QAAQ,EAAEC,WAAW,EAAEC,WAAW,CAAC,CAC1D;AACH,CAAC;AAEDI,KAAK,CAACC,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}