{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Graph as GGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { cloneFormatData, formatNodeSizeToNumber } from '../util';\nimport { handleSingleNodeGraph } from '../util/common';\nimport Body from './body';\nimport Quad from './quad';\nimport QuadTree from './quad-tree';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  center: [0, 0],\n  width: 300,\n  height: 300,\n  kr: 5,\n  kg: 1,\n  mode: 'normal',\n  preventOverlap: false,\n  dissuadeHubs: false,\n  maxIteration: 0,\n  ks: 0.1,\n  ksmax: 10,\n  tao: 0.1\n};\n/**\n * <zh/> Atlas2 力导向布局\n *\n * <en/> Force Atlas 2 layout\n */\nexport class ForceAtlas2Layout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'forceAtlas2';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericForceAtlas2Layout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericForceAtlas2Layout(true, graph, options);\n    });\n  }\n  genericForceAtlas2Layout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const edges = graph.getAllEdges();\n      const nodes = graph.getAllNodes();\n      const mergedOptions = this.formatOptions(options, nodes.length);\n      const {\n        width,\n        height,\n        prune,\n        maxIteration,\n        nodeSize,\n        center\n      } = mergedOptions;\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n        return handleSingleNodeGraph(graph, assign, center);\n      }\n      const calcNodes = nodes.map(node => cloneFormatData(node, [width, height]));\n      const calcEdges = edges.filter(edge => {\n        const {\n          source,\n          target\n        } = edge;\n        return source !== target;\n      });\n      const calcGraph = new GGraph({\n        nodes: calcNodes,\n        edges: calcEdges\n      });\n      const sizes = this.getSizes(calcGraph, nodeSize);\n      this.run(calcGraph, graph, maxIteration, sizes, assign, mergedOptions);\n      // if prune, place the leaves around their parents, and then re-layout for several iterations.\n      if (prune) {\n        for (let j = 0; j < calcEdges.length; j += 1) {\n          const {\n            source,\n            target\n          } = calcEdges[j];\n          const sourceDegree = calcGraph.getDegree(source);\n          const targetDegree = calcGraph.getDegree(source);\n          if (sourceDegree <= 1) {\n            const targetNode = calcGraph.getNode(target);\n            calcGraph.mergeNodeData(source, {\n              x: targetNode.data.x,\n              y: targetNode.data.y\n            });\n          } else if (targetDegree <= 1) {\n            const sourceNode = calcGraph.getNode(source);\n            calcGraph.mergeNodeData(target, {\n              x: sourceNode.data.x,\n              y: sourceNode.data.y\n            });\n          }\n        }\n        const postOptions = Object.assign(Object.assign({}, mergedOptions), {\n          prune: false,\n          barnesHut: false\n        });\n        this.run(calcGraph, graph, 100, sizes, assign, postOptions);\n      }\n      return {\n        nodes: calcNodes,\n        edges\n      };\n    });\n  }\n  /**\n   * Init the node positions if there is no initial positions.\n   * And pre-calculate the size (max of width and height) for each node.\n   * @param calcGraph graph for calculation\n   * @param nodeSize node size config from layout options\n   * @returns {SizeMap} node'id mapped to max of its width and height\n   */\n  getSizes(calcGraph, nodeSize) {\n    const nodes = calcGraph.getAllNodes();\n    const sizes = {};\n    for (let i = 0; i < nodes.length; i += 1) {\n      const node = nodes[i];\n      sizes[node.id] = formatNodeSizeToNumber(nodeSize, undefined)(node);\n    }\n    return sizes;\n  }\n  /**\n   * Format the options.\n   * @param options input options\n   * @param nodeNum number of nodes\n   * @returns formatted options\n   */\n  formatOptions(options = {}, nodeNum) {\n    const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n    const {\n      center,\n      width,\n      height,\n      barnesHut,\n      prune,\n      maxIteration,\n      kr,\n      kg\n    } = mergedOptions;\n    mergedOptions.width = !width && typeof window !== 'undefined' ? window.innerWidth : width;\n    mergedOptions.height = !height && typeof window !== 'undefined' ? window.innerHeight : height;\n    mergedOptions.center = !center ? [mergedOptions.width / 2, mergedOptions.height / 2] : center;\n    if (barnesHut === undefined && nodeNum > 250) {\n      mergedOptions.barnesHut = true;\n    }\n    if (prune === undefined && nodeNum > 100) mergedOptions.prune = true;\n    if (maxIteration === 0 && !prune) {\n      mergedOptions.maxIteration = 250;\n      if (nodeNum <= 200 && nodeNum > 100) mergedOptions.maxIteration = 1000;else if (nodeNum > 200) mergedOptions.maxIteration = 1200;\n    } else if (maxIteration === 0 && prune) {\n      mergedOptions.maxIteration = 100;\n      if (nodeNum <= 200 && nodeNum > 100) mergedOptions.maxIteration = 500;else if (nodeNum > 200) mergedOptions.maxIteration = 950;\n    }\n    if (!kr) {\n      mergedOptions.kr = 50;\n      if (nodeNum > 100 && nodeNum <= 500) mergedOptions.kr = 20;else if (nodeNum > 500) mergedOptions.kr = 1;\n    }\n    if (!kg) {\n      mergedOptions.kg = 20;\n      if (nodeNum > 100 && nodeNum <= 500) mergedOptions.kg = 10;else if (nodeNum > 500) mergedOptions.kg = 1;\n    }\n    return mergedOptions;\n  }\n  /**\n   * Loops for fa2.\n   * @param calcGraph graph for calculation\n   * @param graph original graph\n   * @param iteration iteration number\n   * @param sizes nodes' size\n   * @param options formatted layout options\n   * @returns\n   */\n  run(calcGraph, graph, iteration, sizes, assign, options) {\n    const {\n      kr,\n      barnesHut,\n      onTick\n    } = options;\n    const calcNodes = calcGraph.getAllNodes();\n    let sg = 0;\n    let iter = iteration;\n    const forces = {};\n    const preForces = {};\n    const bodies = {};\n    for (let i = 0; i < calcNodes.length; i += 1) {\n      const {\n        data,\n        id\n      } = calcNodes[i];\n      forces[id] = [0, 0];\n      if (barnesHut) {\n        const params = {\n          id: i,\n          rx: data.x,\n          ry: data.y,\n          mass: 1,\n          g: kr,\n          degree: calcGraph.getDegree(id)\n        };\n        bodies[id] = new Body(params);\n      }\n    }\n    while (iter > 0) {\n      sg = this.oneStep(calcGraph, {\n        iter,\n        preventOverlapIters: 50,\n        krPrime: 100,\n        sg,\n        forces,\n        preForces,\n        bodies,\n        sizes\n      }, options);\n      iter--;\n      onTick === null || onTick === void 0 ? void 0 : onTick({\n        nodes: calcNodes,\n        edges: graph.getAllEdges()\n      });\n      // if (assign) {\n      //   calcNodes.forEach(({ id, data }) => graph.mergeNodeData(id, {\n      //     x: data.x,\n      //     y: data.y\n      //   }))\n      // }\n    }\n    return calcGraph;\n  }\n  /**\n   * One step for a loop.\n   * @param graph graph for calculation\n   * @param params parameters for a loop\n   * @param options formatted layout's input options\n   * @returns\n   */\n  oneStep(graph, params, options) {\n    const {\n      iter,\n      preventOverlapIters,\n      krPrime,\n      sg,\n      preForces,\n      bodies,\n      sizes\n    } = params;\n    let {\n      forces\n    } = params;\n    const {\n      preventOverlap,\n      barnesHut\n    } = options;\n    const nodes = graph.getAllNodes();\n    for (let i = 0; i < nodes.length; i += 1) {\n      const {\n        id\n      } = nodes[i];\n      preForces[id] = [...forces[id]];\n      forces[id] = [0, 0];\n    }\n    // attractive forces, existing on every actual edge\n    forces = this.getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options);\n    // repulsive forces and Gravity, existing on every node pair\n    // if preventOverlap, using the no-optimized method in the last preventOverlapIters instead.\n    if (barnesHut && (preventOverlap && iter > preventOverlapIters || !preventOverlap)) {\n      forces = this.getOptRepGraForces(graph, forces, bodies, options);\n    } else {\n      forces = this.getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options);\n    }\n    // update the positions\n    return this.updatePos(graph, forces, preForces, sg, options);\n  }\n  /**\n   * Calculate the attract forces for nodes.\n   * @param graph graph for calculation\n   * @param iter current iteration index\n   * @param preventOverlapIters the iteration number for preventing overlappings\n   * @param sizes nodes' sizes\n   * @param forces forces for nodes, which will be modified\n   * @param options formatted layout's input options\n   * @returns\n   */\n  getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options) {\n    const {\n      preventOverlap,\n      dissuadeHubs,\n      mode,\n      prune\n    } = options;\n    const edges = graph.getAllEdges();\n    for (let i = 0; i < edges.length; i += 1) {\n      const {\n        source,\n        target\n      } = edges[i];\n      const sourceNode = graph.getNode(source);\n      const targetNode = graph.getNode(target);\n      const sourceDegree = graph.getDegree(source);\n      const targetDegree = graph.getDegree(target);\n      if (prune && (sourceDegree <= 1 || targetDegree <= 1)) continue;\n      const dir = [targetNode.data.x - sourceNode.data.x, targetNode.data.y - sourceNode.data.y];\n      let eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      if (preventOverlap && iter < preventOverlapIters) {\n        eucliDis = eucliDis - sizes[source] - sizes[target];\n      }\n      let fa1 = eucliDis;\n      let fa2 = fa1;\n      if (mode === 'linlog') {\n        fa1 = Math.log(1 + eucliDis);\n        fa2 = fa1;\n      }\n      if (dissuadeHubs) {\n        fa1 = eucliDis / sourceDegree;\n        fa2 = eucliDis / targetDegree;\n      }\n      if (preventOverlap && iter < preventOverlapIters && eucliDis <= 0) {\n        fa1 = 0;\n        fa2 = 0;\n      } else if (preventOverlap && iter < preventOverlapIters && eucliDis > 0) {\n        fa1 = eucliDis;\n        fa2 = eucliDis;\n      }\n      forces[source][0] += fa1 * dir[0];\n      forces[target][0] -= fa2 * dir[0];\n      forces[source][1] += fa1 * dir[1];\n      forces[target][1] -= fa2 * dir[1];\n    }\n    return forces;\n  }\n  /**\n   * Calculate the repulsive forces for nodes under barnesHut mode.\n   * @param graph graph for calculatiion\n   * @param forces forces for nodes, which will be modified\n   * @param bodies force body map\n   * @param options formatted layout's input options\n   * @returns\n   */\n  getOptRepGraForces(graph, forces, bodies, options) {\n    const {\n      kg,\n      center,\n      prune\n    } = options;\n    const nodes = graph.getAllNodes();\n    const nodeNum = nodes.length;\n    let minx = 9e10;\n    let maxx = -9e10;\n    let miny = 9e10;\n    let maxy = -9e10;\n    for (let i = 0; i < nodeNum; i += 1) {\n      const {\n        id,\n        data\n      } = nodes[i];\n      if (prune && graph.getDegree(id) <= 1) continue;\n      bodies[id].setPos(data.x, data.y);\n      if (data.x >= maxx) maxx = data.x;\n      if (data.x <= minx) minx = data.x;\n      if (data.y >= maxy) maxy = data.y;\n      if (data.y <= miny) miny = data.y;\n    }\n    const width = Math.max(maxx - minx, maxy - miny);\n    const quadParams = {\n      xmid: (maxx + minx) / 2,\n      ymid: (maxy + miny) / 2,\n      length: width,\n      massCenter: center,\n      mass: nodeNum\n    };\n    const quad = new Quad(quadParams);\n    const quadTree = new QuadTree(quad);\n    // build the tree, insert the nodes(quads) into the tree\n    for (let i = 0; i < nodeNum; i += 1) {\n      const {\n        id\n      } = nodes[i];\n      if (prune && graph.getDegree(id) <= 1) continue;\n      if (bodies[id].in(quad)) quadTree.insert(bodies[id]);\n    }\n    // update the repulsive forces and the gravity.\n    for (let i = 0; i < nodeNum; i += 1) {\n      const {\n        id,\n        data\n      } = nodes[i];\n      const degree = graph.getDegree(id);\n      if (prune && degree <= 1) continue;\n      bodies[id].resetForce();\n      quadTree.updateForce(bodies[id]);\n      forces[id][0] -= bodies[id].fx;\n      forces[id][1] -= bodies[id].fy;\n      // gravity\n      const dir = [data.x - center[0], data.y - center[1]];\n      let eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      const fg = kg * (degree + 1); // tslint:disable-line\n      forces[id][0] -= fg * dir[0];\n      forces[id][1] -= fg * dir[1];\n    }\n    return forces;\n  }\n  /**\n   * Calculate the repulsive forces for nodes.\n   * @param graph graph for calculatiion\n   * @param iter current iteration index\n   * @param preventOverlapIters the iteration number for preventing overlappings\n   * @param forces forces for nodes, which will be modified\n   * @param krPrime larger the krPrime, larger the repulsive force\n   * @param sizes nodes' sizes\n   * @param options formatted layout's input options\n   * @returns\n   */\n  getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options) {\n    const {\n      preventOverlap,\n      kr,\n      kg,\n      center,\n      prune\n    } = options;\n    const nodes = graph.getAllNodes();\n    const nodeNum = nodes.length;\n    for (let i = 0; i < nodeNum; i += 1) {\n      const nodei = nodes[i];\n      const degreei = graph.getDegree(nodei.id);\n      for (let j = i + 1; j < nodeNum; j += 1) {\n        const nodej = nodes[j];\n        const degreej = graph.getDegree(nodej.id);\n        if (prune && (degreei <= 1 || degreej <= 1)) continue;\n        const dir = [nodej.data.x - nodei.data.x, nodej.data.y - nodei.data.y];\n        let eucliDis = Math.hypot(dir[0], dir[1]);\n        eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n        dir[0] = dir[0] / eucliDis;\n        dir[1] = dir[1] / eucliDis;\n        if (preventOverlap && iter < preventOverlapIters) {\n          eucliDis = eucliDis - sizes[nodei.id] - sizes[nodej.id];\n        }\n        let fr = kr * (degreei + 1) * (degreej + 1) / eucliDis;\n        if (preventOverlap && iter < preventOverlapIters && eucliDis < 0) {\n          fr = krPrime * (degreei + 1) * (degreej + 1);\n        } else if (preventOverlap && iter < preventOverlapIters && eucliDis === 0) {\n          fr = 0;\n        } else if (preventOverlap && iter < preventOverlapIters && eucliDis > 0) {\n          fr = kr * (degreei + 1) * (degreej + 1) / eucliDis;\n        }\n        forces[nodei.id][0] -= fr * dir[0];\n        forces[nodej.id][0] += fr * dir[0];\n        forces[nodei.id][1] -= fr * dir[1];\n        forces[nodej.id][1] += fr * dir[1];\n      }\n      // gravity\n      const dir = [nodei.data.x - center[0], nodei.data.y - center[1]];\n      const eucliDis = Math.hypot(dir[0], dir[1]);\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      const fg = kg * (degreei + 1); // tslint:disable-line\n      forces[nodei.id][0] -= fg * dir[0];\n      forces[nodei.id][1] -= fg * dir[1];\n    }\n    return forces;\n  }\n  /**\n   * Update node positions.\n   * @param graph graph for calculatiion\n   * @param forces forces for nodes, which will be modified\n   * @param preForces previous forces for nodes, which will be modified\n   * @param sg constant for move distance of one step\n   * @param options formatted layout's input options\n   * @returns\n   */\n  updatePos(graph, forces, preForces, sg, options) {\n    const {\n      ks,\n      tao,\n      prune,\n      ksmax\n    } = options;\n    const nodes = graph.getAllNodes();\n    const nodeNum = nodes.length;\n    const swgns = [];\n    const trans = [];\n    // swg(G) and tra(G)\n    let swgG = 0;\n    let traG = 0;\n    let usingSg = sg;\n    for (let i = 0; i < nodeNum; i += 1) {\n      const {\n        id\n      } = nodes[i];\n      const degree = graph.getDegree(id);\n      if (prune && degree <= 1) continue;\n      const minus = [forces[id][0] - preForces[id][0], forces[id][1] - preForces[id][1]];\n      const minusNorm = Math.hypot(minus[0], minus[1]);\n      const add = [forces[id][0] + preForces[id][0], forces[id][1] + preForces[id][1]];\n      const addNorm = Math.hypot(add[0], add[1]);\n      swgns[i] = minusNorm;\n      trans[i] = addNorm / 2;\n      swgG += (degree + 1) * swgns[i];\n      traG += (degree + 1) * trans[i];\n    }\n    const preSG = usingSg;\n    usingSg = tao * traG / swgG;\n    if (preSG !== 0) {\n      usingSg = usingSg > 1.5 * preSG ? 1.5 * preSG : usingSg;\n    }\n    // update the node positions\n    for (let i = 0; i < nodeNum; i += 1) {\n      const {\n        id,\n        data\n      } = nodes[i];\n      const degree = graph.getDegree(id);\n      if (prune && degree <= 1) continue;\n      if (isNumber(data.fx) && isNumber(data.fy)) continue;\n      let sn = ks * usingSg / (1 + usingSg * Math.sqrt(swgns[i]));\n      let absForce = Math.hypot(forces[id][0], forces[id][1]);\n      absForce = absForce < 0.0001 ? 0.0001 : absForce;\n      const max = ksmax / absForce;\n      sn = sn > max ? max : sn;\n      const dnx = sn * forces[id][0];\n      const dny = sn * forces[id][1];\n      graph.mergeNodeData(id, {\n        x: data.x + dnx,\n        y: data.y + dny\n      });\n    }\n    return usingSg;\n  }\n}","map":{"version":3,"names":["Graph","GGraph","isNumber","cloneFormatData","formatNodeSizeToNumber","handleSingleNodeGraph","Body","Quad","QuadTree","DEFAULTS_LAYOUT_OPTIONS","center","width","height","kr","kg","mode","preventOverlap","dissuadeHubs","maxIteration","ks","ksmax","tao","ForceAtlas2Layout","constructor","options","id","Object","assign","execute","graph","genericForceAtlas2Layout","edges","getAllEdges","nodes","getAllNodes","mergedOptions","formatOptions","length","prune","nodeSize","calcNodes","map","node","calcEdges","filter","edge","source","target","calcGraph","sizes","getSizes","run","j","sourceDegree","getDegree","targetDegree","targetNode","getNode","mergeNodeData","x","data","y","sourceNode","postOptions","barnesHut","i","undefined","nodeNum","window","innerWidth","innerHeight","iteration","onTick","sg","iter","forces","preForces","bodies","params","rx","ry","mass","g","degree","oneStep","preventOverlapIters","krPrime","getAttrForces","getOptRepGraForces","getRepGraForces","updatePos","dir","eucliDis","Math","hypot","fa1","fa2","log","minx","maxx","miny","maxy","setPos","max","quadParams","xmid","ymid","massCenter","quad","quadTree","in","insert","resetForce","updateForce","fx","fy","fg","nodei","degreei","nodej","degreej","fr","swgns","trans","swgG","traG","usingSg","minus","minusNorm","add","addNorm","preSG","sn","sqrt","absForce","dnx","dny"],"sources":["../../src/force-atlas2/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}