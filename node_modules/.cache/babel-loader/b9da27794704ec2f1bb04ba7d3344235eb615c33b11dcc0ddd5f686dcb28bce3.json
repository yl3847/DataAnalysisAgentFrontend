{"ast":null,"code":"import { PathShape, PathHollow } from '../shape';\nimport { baseGeometryChannels, basePostInference, basePreInference } from './utils';\nconst shape = {\n  path: PathShape,\n  hollow: PathHollow\n};\n/**\n * Draw a path.\n */\nexport const Path = options => {\n  return (index, scale, value, coordinate) => {\n    // The points is meaning less for path mark,\n    // because the position of path shapes specified\n    // by the d option. So set [0, 0] for render pipeline.\n    return [index, index.map(() => [[0, 0]])];\n  };\n};\nPath.props = {\n  defaultShape: 'path',\n  defaultLabelShape: 'label',\n  shape,\n  composite: false,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'd',\n    scale: 'identity'\n  }],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference()]\n};","map":{"version":3,"names":["PathShape","PathHollow","baseGeometryChannels","basePostInference","basePreInference","shape","path","hollow","Path","options","index","scale","value","coordinate","map","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","preInference","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/path.ts"],"sourcesContent":["import { MarkComponent as MC } from '../runtime';\nimport { PathMark } from '../spec';\nimport { PathShape, PathHollow } from '../shape';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n} from './utils';\n\nconst shape = {\n  path: PathShape,\n  hollow: PathHollow,\n};\n\nexport type PathOptions = Omit<PathMark, 'type'>;\n\n/**\n * Draw a path.\n */\nexport const Path: MC<PathOptions> = (options) => {\n  return (index, scale, value, coordinate) => {\n    // The points is meaning less for path mark,\n    // because the position of path shapes specified\n    // by the d option. So set [0, 0] for render pipeline.\n    return [index, index.map(() => [[0, 0]])];\n  };\n};\n\nPath.props = {\n  defaultShape: 'path',\n  defaultLabelShape: 'label',\n  shape,\n  composite: false,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'd', scale: 'identity' },\n  ],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference()],\n};\n"],"mappings":"AAEA,SAASA,SAAS,EAAEC,UAAU,QAAQ,UAAU;AAChD,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,QACX,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEN,SAAS;EACfO,MAAM,EAAEN;CACT;AAID;;;AAGA,OAAO,MAAMO,IAAI,GAAqBC,OAAO,IAAI;EAC/C,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC;IACA;IACA;IACA,OAAO,CAACH,KAAK,EAAEA,KAAK,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;AACH,CAAC;AAEDN,IAAI,CAACO,KAAK,GAAG;EACXC,YAAY,EAAE,MAAM;EACpBC,iBAAiB,EAAE,OAAO;EAC1BZ,KAAK;EACLa,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,CACR,GAAGjB,oBAAoB,CAAC;IAAEkB,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACjB,KAAK;EAAC,CAAE,CAAC,EACvD;IAAEkB,IAAI,EAAE,GAAG;IAAEZ,KAAK,EAAE;EAAU,CAAE,CACjC;EACDa,YAAY,EAAE,CAAC,GAAGpB,gBAAgB,EAAE,CAAC;EACrCqB,aAAa,EAAE,CAAC,GAAGtB,iBAAiB,EAAE;CACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}