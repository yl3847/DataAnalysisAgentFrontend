{"ast":null,"code":"import { CustomElement } from '@antv/g';\nimport { isEmpty, isFunction, upperFirst } from '@antv/util';\nimport { ExtensionCategory } from '../../constants';\nimport { createAnimationsProxy, preprocessKeyframes } from '../../utils/animation';\nimport { setAttributes, updateStyle } from '../../utils/element';\nimport { subObject } from '../../utils/prefix';\nimport { format } from '../../utils/print';\nimport { getSubShapeStyle } from '../../utils/style';\nimport { replaceTranslateInTransform } from '../../utils/transform';\nimport { setVisibility } from '../../utils/visibility';\nimport { getExtension } from './../../registry/get';\n/**\n * <zh/> 图形基类\n *\n * <en/> Base class for shapes\n */\nexport class BaseShape extends CustomElement {\n  constructor(options) {\n    applyTransform(options.style);\n    super(options);\n    /**\n     * <zh/> 图形实例映射表\n     *\n     * <en/> shape instance map\n     * @internal\n     */\n    this.shapeMap = {};\n    /**\n     * <zh/> 动画实例映射表\n     *\n     * <en/> animation instance map\n     * @internal\n     */\n    this.animateMap = {};\n    this.render(this.attributes, this);\n    this.setVisibility();\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 解析后的属性\n   *\n   * <en/> parsed attributes\n   * @returns <zh/> 解析后的属性 | <en/> parsed attributes\n   * @internal\n   */\n  get parsedAttributes() {\n    return this.attributes;\n  }\n  /**\n   * <zh/> 创建、更新或删除图形\n   *\n   * <en/> create, update or remove shape\n   * @param className - <zh/> 图形名称 | <en/> shape name\n   * @param Ctor - <zh/> 图形类型 | <en/> shape type\n   * @param style - <zh/> 图形样式。若要删除图形，传入 false | <en/> shape style. Pass false to remove the shape\n   * @param container - <zh/> 容器 | <en/> container\n   * @param hooks - <zh/> 钩子函数 | <en/> hooks\n   * @returns <zh/> 图形实例 | <en/> shape instance\n   */\n  upsert(className, Ctor, style, container, hooks) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const target = this.shapeMap[className];\n    // remove\n    // 如果 style 为 false，则删除图形 / remove shape if style is false\n    if (style === false) {\n      if (target) {\n        (_a = hooks === null || hooks === void 0 ? void 0 : hooks.beforeDestroy) === null || _a === void 0 ? void 0 : _a.call(hooks, target);\n        container.removeChild(target);\n        delete this.shapeMap[className];\n        (_b = hooks === null || hooks === void 0 ? void 0 : hooks.afterDestroy) === null || _b === void 0 ? void 0 : _b.call(hooks, target);\n      }\n      return;\n    }\n    const _Ctor = typeof Ctor === 'string' ? getExtension(ExtensionCategory.SHAPE, Ctor) : Ctor;\n    if (!_Ctor) {\n      throw new Error(format(`Shape ${Ctor} not found`));\n    }\n    // create\n    if (!target || target.destroyed || !(target instanceof _Ctor)) {\n      if (target) {\n        (_c = hooks === null || hooks === void 0 ? void 0 : hooks.beforeDestroy) === null || _c === void 0 ? void 0 : _c.call(hooks, target);\n        target === null || target === void 0 ? void 0 : target.destroy();\n        (_d = hooks === null || hooks === void 0 ? void 0 : hooks.afterDestroy) === null || _d === void 0 ? void 0 : _d.call(hooks, target);\n      }\n      (_e = hooks === null || hooks === void 0 ? void 0 : hooks.beforeCreate) === null || _e === void 0 ? void 0 : _e.call(hooks);\n      const instance = new _Ctor({\n        className,\n        style\n      });\n      container.appendChild(instance);\n      this.shapeMap[className] = instance;\n      (_f = hooks === null || hooks === void 0 ? void 0 : hooks.afterCreate) === null || _f === void 0 ? void 0 : _f.call(hooks, instance);\n      return instance;\n    }\n    // update\n    (_g = hooks === null || hooks === void 0 ? void 0 : hooks.beforeUpdate) === null || _g === void 0 ? void 0 : _g.call(hooks, target);\n    updateStyle(target, style);\n    (_h = hooks === null || hooks === void 0 ? void 0 : hooks.afterUpdate) === null || _h === void 0 ? void 0 : _h.call(hooks, target);\n    return target;\n  }\n  update(attr = {}) {\n    const attributes = Object.assign({}, this.attributes, attr);\n    applyTransform(attributes);\n    setAttributes(this, attributes);\n    this.render(attributes, this);\n    this.setVisibility();\n  }\n  bindEvents() {}\n  /**\n   * <zh/> 从给定的属性对象中提取图形样式属性。删除特定的属性，如位置、变换和类名\n   *\n   * <en/> Extracts the shape styles from a given attribute object.\n   * Removes specific styles like position, transformation, and class name.\n   * @param style - <zh/> 属性对象 | <en/> attribute object\n   * @returns <zh/> 仅包含样式属性的对象 | <en/> An object containing only the style properties.\n   */\n  getGraphicStyle(style) {\n    return getSubShapeStyle(style);\n  }\n  /**\n   * Get the prefix pairs for composite shapes used to handle animation\n   * @returns tuples array where each tuple contains a key corresponding to a method `get${key}Style` and its shape prefix\n   * @internal\n   */\n  get compositeShapes() {\n    return [['badges', 'badge-'], ['ports', 'port-']];\n  }\n  animate(keyframes, options) {\n    if (keyframes.length === 0) return null;\n    const animationMap = [];\n    // 如果 keyframes 中存在 x/y/z ，替换为 transform\n    // if x/y/z exists in keyframes, replace them with transform\n    if (keyframes[0].x !== undefined || keyframes[0].y !== undefined || keyframes[0].z !== undefined) {\n      const {\n        x: _x = 0,\n        y: _y = 0,\n        z: _z = 0\n      } = this.attributes;\n      keyframes.forEach(keyframe => {\n        const {\n          x = _x,\n          y = _y,\n          z = _z\n        } = keyframe;\n        Object.assign(keyframe, {\n          transform: z ? [['translate3d', x, y, z]] : [['translate', x, y]]\n        });\n      });\n    }\n    const result = super.animate(keyframes, options);\n    if (result) {\n      releaseAnimation(this, result);\n      animationMap.push(result);\n    }\n    if (Array.isArray(keyframes) && keyframes.length > 0) {\n      // 如果 keyframes 中仅存在 skippedAttrs 中的属性，则仅更新父元素属性（跳过子图形）\n      // if only skippedAttrs exist in keyframes, only update parent element attributes (skip child shapes)\n      const skippedAttrs = ['transform', 'transformOrigin', 'x', 'y', 'z', 'zIndex'];\n      if (Object.keys(keyframes[0]).some(attr => !skippedAttrs.includes(attr))) {\n        Object.entries(this.shapeMap).forEach(([key, shape]) => {\n          // 如果存在方法名为 `get${key}Style` 的方法，则使用该方法获取样式，并自动为该图形实例创建动画\n          // if there is a method named `get${key}Style`, use this method to get style and automatically create animation for the shape instance\n          const methodName = `get${upperFirst(key)}Style`;\n          const method = this[methodName];\n          if (isFunction(method)) {\n            const subKeyframes = keyframes.map(style => method.call(this, Object.assign(Object.assign({}, this.attributes), style)));\n            const result = shape.animate(preprocessKeyframes(subKeyframes), options);\n            if (result) {\n              releaseAnimation(shape, result);\n              animationMap.push(result);\n            }\n          }\n        });\n        const handleCompositeShapeAnimation = (shapeSet, name) => {\n          if (!isEmpty(shapeSet)) {\n            const methodName = `get${upperFirst(name)}Style`;\n            const method = this[methodName];\n            if (isFunction(method)) {\n              const itemsKeyframes = keyframes.map(style => method.call(this, Object.assign(Object.assign({}, this.attributes), style)));\n              Object.entries(itemsKeyframes[0]).map(([key]) => {\n                const subKeyframes = itemsKeyframes.map(styles => styles[key]);\n                const shape = shapeSet[key];\n                if (shape) {\n                  const result = shape.animate(preprocessKeyframes(subKeyframes), options);\n                  if (result) {\n                    releaseAnimation(shape, result);\n                    animationMap.push(result);\n                  }\n                }\n              });\n            }\n          }\n        };\n        this.compositeShapes.forEach(([key, prefix]) => {\n          const shapeSet = subObject(this.shapeMap, prefix);\n          handleCompositeShapeAnimation(shapeSet, key);\n        });\n      }\n    }\n    return createAnimationsProxy(animationMap);\n  }\n  getShape(name) {\n    return this.shapeMap[name];\n  }\n  setVisibility() {\n    const {\n      visibility\n    } = this.attributes;\n    setVisibility(this, visibility);\n  }\n  destroy() {\n    this.shapeMap = {};\n    this.animateMap = {};\n    super.destroy();\n  }\n}\n/**\n * <zh/> 释放动画\n *\n * <en/> Release animation\n * @param target - <zh/> 目标对象 | <en/> target object\n * @param animation - <zh/> 动画实例 | <en/> animation instance\n * @description see: https://github.com/antvis/G/issues/1731\n */\nfunction releaseAnimation(target, animation) {\n  animation === null || animation === void 0 ? void 0 : animation.finished.then(() => {\n    // @ts-expect-error private property\n    const index = target.activeAnimations.findIndex(_ => _ === animation);\n    // @ts-expect-error private property\n    if (index > -1) target.activeAnimations.splice(index, 1);\n  });\n}\n/**\n * <zh/> 应用 transform\n *\n * <en/> Apply transform\n * @param style - <zh/> 样式 | <en/> style\n * @returns <zh/> 样式 | <en/> style\n */\nfunction applyTransform(style) {\n  if (!style) return {};\n  if ('x' in style || 'y' in style || 'z' in style) {\n    const {\n      x = 0,\n      y = 0,\n      z,\n      transform\n    } = style;\n    const newTransform = replaceTranslateInTransform(x, y, z, transform);\n    if (newTransform) style.transform = newTransform;\n  }\n  return style;\n}","map":{"version":3,"names":["CustomElement","isEmpty","isFunction","upperFirst","ExtensionCategory","createAnimationsProxy","preprocessKeyframes","setAttributes","updateStyle","subObject","format","getSubShapeStyle","replaceTranslateInTransform","setVisibility","getExtension","BaseShape","constructor","options","applyTransform","style","shapeMap","animateMap","render","attributes","bindEvents","parsedAttributes","upsert","className","Ctor","container","hooks","target","_a","beforeDestroy","call","removeChild","_b","afterDestroy","_Ctor","SHAPE","Error","destroyed","_c","destroy","_d","_e","beforeCreate","instance","appendChild","_f","afterCreate","_g","beforeUpdate","_h","afterUpdate","update","attr","Object","assign","getGraphicStyle","compositeShapes","animate","keyframes","length","animationMap","x","undefined","y","z","_x","_y","_z","forEach","keyframe","transform","result","releaseAnimation","push","Array","isArray","skippedAttrs","keys","some","includes","entries","key","shape","methodName","method","subKeyframes","map","handleCompositeShapeAnimation","shapeSet","name","itemsKeyframes","styles","prefix","getShape","visibility","animation","finished","then","index","activeAnimations","findIndex","_","splice","newTransform"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/shapes/base-shape.ts"],"sourcesContent":["import type { BaseStyleProps, DisplayObject, DisplayObjectConfig, Group, IAnimation } from '@antv/g';\nimport { CustomElement } from '@antv/g';\nimport { isEmpty, isFunction, upperFirst } from '@antv/util';\nimport { ExtensionCategory } from '../../constants';\nimport type { Keyframe } from '../../types';\nimport { createAnimationsProxy, preprocessKeyframes } from '../../utils/animation';\nimport { setAttributes, updateStyle } from '../../utils/element';\nimport { subObject } from '../../utils/prefix';\nimport { format } from '../../utils/print';\nimport { getSubShapeStyle } from '../../utils/style';\nimport { replaceTranslateInTransform } from '../../utils/transform';\nimport { setVisibility } from '../../utils/visibility';\nimport { getExtension } from './../../registry/get';\n\nexport interface BaseShapeStyleProps extends BaseStyleProps {}\n\n/**\n * <zh/> 图形基类\n *\n * <en/> Base class for shapes\n */\nexport abstract class BaseShape<StyleProps extends BaseShapeStyleProps> extends CustomElement<StyleProps> {\n  constructor(options: DisplayObjectConfig<StyleProps>) {\n    applyTransform(options.style);\n    super(options);\n    this.render(this.attributes as Required<StyleProps>, this);\n    this.setVisibility();\n    this.bindEvents();\n  }\n\n  /**\n   * <zh/> 解析后的属性\n   *\n   * <en/> parsed attributes\n   * @returns <zh/> 解析后的属性 | <en/> parsed attributes\n   * @internal\n   */\n  protected get parsedAttributes() {\n    return this.attributes as Required<StyleProps>;\n  }\n\n  /**\n   * <zh/> 图形实例映射表\n   *\n   * <en/> shape instance map\n   * @internal\n   */\n  protected shapeMap: Record<string, DisplayObject> = {};\n\n  /**\n   * <zh/> 动画实例映射表\n   *\n   * <en/> animation instance map\n   * @internal\n   */\n  protected animateMap: Record<string, IAnimation> = {};\n\n  /**\n   * <zh/> 创建、更新或删除图形\n   *\n   * <en/> create, update or remove shape\n   * @param className - <zh/> 图形名称 | <en/> shape name\n   * @param Ctor - <zh/> 图形类型 | <en/> shape type\n   * @param style - <zh/> 图形样式。若要删除图形，传入 false | <en/> shape style. Pass false to remove the shape\n   * @param container - <zh/> 容器 | <en/> container\n   * @param hooks - <zh/> 钩子函数 | <en/> hooks\n   * @returns <zh/> 图形实例 | <en/> shape instance\n   */\n  protected upsert<T extends DisplayObject>(\n    className: string,\n    Ctor: string | { new (...args: any[]): T },\n    style: T['attributes'] | false,\n    container: DisplayObject,\n    hooks?: UpsertHooks,\n  ): T | undefined {\n    const target = this.shapeMap[className] as T | undefined;\n    // remove\n    // 如果 style 为 false，则删除图形 / remove shape if style is false\n    if (style === false) {\n      if (target) {\n        hooks?.beforeDestroy?.(target);\n        container.removeChild(target);\n        delete this.shapeMap[className];\n        hooks?.afterDestroy?.(target);\n      }\n      return;\n    }\n\n    const _Ctor = typeof Ctor === 'string' ? getExtension(ExtensionCategory.SHAPE, Ctor) : Ctor;\n\n    if (!_Ctor) {\n      throw new Error(format(`Shape ${Ctor} not found`));\n    }\n\n    // create\n    if (!target || target.destroyed || !(target instanceof _Ctor)) {\n      if (target) {\n        hooks?.beforeDestroy?.(target);\n        target?.destroy();\n        hooks?.afterDestroy?.(target);\n      }\n\n      hooks?.beforeCreate?.();\n      const instance = new _Ctor({ className, style });\n      container.appendChild(instance);\n      this.shapeMap[className] = instance;\n      hooks?.afterCreate?.(instance);\n      return instance as T;\n    }\n\n    // update\n    hooks?.beforeUpdate?.(target);\n    updateStyle(target, style);\n    hooks?.afterUpdate?.(target);\n\n    return target;\n  }\n\n  public update(attr: Partial<StyleProps> = {}): void {\n    const attributes = Object.assign({}, this.attributes, attr) as Required<StyleProps>;\n    applyTransform(attributes);\n    setAttributes(this, attributes);\n    this.render(attributes, this);\n    this.setVisibility();\n  }\n\n  /**\n   * <zh/> 在初始化时会被自动调用\n   *\n   * <en/> will be called automatically when initializing\n   * @param attributes\n   * @param container\n   */\n  public abstract render(attributes: Required<StyleProps>, container: Group): void;\n\n  public bindEvents() {}\n\n  /**\n   * <zh/> 从给定的属性对象中提取图形样式属性。删除特定的属性，如位置、变换和类名\n   *\n   * <en/> Extracts the shape styles from a given attribute object.\n   * Removes specific styles like position, transformation, and class name.\n   * @param style - <zh/> 属性对象 | <en/> attribute object\n   * @returns <zh/> 仅包含样式属性的对象 | <en/> An object containing only the style properties.\n   */\n  public getGraphicStyle<T extends Record<string, any>>(\n    style: T,\n  ): Omit<T, 'x' | 'y' | 'z' | 'transform' | 'transformOrigin' | 'className' | 'class' | 'zIndex' | 'visibility'> {\n    return getSubShapeStyle(style);\n  }\n\n  /**\n   * Get the prefix pairs for composite shapes used to handle animation\n   * @returns tuples array where each tuple contains a key corresponding to a method `get${key}Style` and its shape prefix\n   * @internal\n   */\n  protected get compositeShapes(): [string, string][] {\n    return [\n      ['badges', 'badge-'],\n      ['ports', 'port-'],\n    ];\n  }\n\n  public animate(keyframes: Keyframe[], options?: number | KeyframeAnimationOptions): IAnimation | null {\n    if (keyframes.length === 0) return null;\n    const animationMap: IAnimation[] = [];\n\n    // 如果 keyframes 中存在 x/y/z ，替换为 transform\n    // if x/y/z exists in keyframes, replace them with transform\n    if (keyframes[0].x !== undefined || keyframes[0].y !== undefined || keyframes[0].z !== undefined) {\n      const { x: _x = 0, y: _y = 0, z: _z = 0 } = this.attributes as Record<string, any>;\n      keyframes.forEach((keyframe) => {\n        const { x = _x, y = _y, z = _z } = keyframe;\n        Object.assign(keyframe, { transform: z ? [['translate3d', x, y, z]] : [['translate', x, y]] });\n      });\n    }\n\n    const result = super.animate(keyframes, options);\n    if (result) {\n      releaseAnimation(this, result);\n      animationMap.push(result);\n    }\n\n    if (Array.isArray(keyframes) && keyframes.length > 0) {\n      // 如果 keyframes 中仅存在 skippedAttrs 中的属性，则仅更新父元素属性（跳过子图形）\n      // if only skippedAttrs exist in keyframes, only update parent element attributes (skip child shapes)\n      const skippedAttrs = ['transform', 'transformOrigin', 'x', 'y', 'z', 'zIndex'];\n      if (Object.keys(keyframes[0]).some((attr) => !skippedAttrs.includes(attr))) {\n        Object.entries(this.shapeMap).forEach(([key, shape]) => {\n          // 如果存在方法名为 `get${key}Style` 的方法，则使用该方法获取样式，并自动为该图形实例创建动画\n          // if there is a method named `get${key}Style`, use this method to get style and automatically create animation for the shape instance\n          const methodName = `get${upperFirst(key)}Style` as keyof this;\n          const method = this[methodName];\n\n          if (isFunction(method)) {\n            const subKeyframes: Keyframe[] = keyframes.map((style) =>\n              method.call(this, { ...this.attributes, ...style }),\n            );\n            const result = shape.animate(preprocessKeyframes(subKeyframes), options);\n            if (result) {\n              releaseAnimation(shape, result);\n              animationMap.push(result);\n            }\n          }\n        });\n\n        const handleCompositeShapeAnimation = (shapeSet: Record<string, DisplayObject>, name: string) => {\n          if (!isEmpty(shapeSet)) {\n            const methodName = `get${upperFirst(name)}Style` as keyof this;\n            const method = this[methodName];\n            if (isFunction(method)) {\n              const itemsKeyframes = keyframes.map((style) => method.call(this, { ...this.attributes, ...style }));\n              Object.entries(itemsKeyframes[0]).map(([key]) => {\n                const subKeyframes = itemsKeyframes.map((styles) => styles[key]);\n                const shape = shapeSet[key];\n                if (shape) {\n                  const result = shape.animate(preprocessKeyframes(subKeyframes), options);\n                  if (result) {\n                    releaseAnimation(shape, result);\n                    animationMap.push(result);\n                  }\n                }\n              });\n            }\n          }\n        };\n\n        this.compositeShapes.forEach(([key, prefix]) => {\n          const shapeSet = subObject(this.shapeMap, prefix);\n          handleCompositeShapeAnimation(shapeSet, key);\n        });\n      }\n    }\n\n    return createAnimationsProxy(animationMap);\n  }\n\n  public getShape<T extends DisplayObject>(name: string): T {\n    return this.shapeMap[name] as T;\n  }\n\n  private setVisibility() {\n    const { visibility } = this.attributes;\n    setVisibility(this, visibility);\n  }\n\n  public destroy(): void {\n    this.shapeMap = {};\n    this.animateMap = {};\n    super.destroy();\n  }\n}\n\n/**\n * <zh/> 释放动画\n *\n * <en/> Release animation\n * @param target - <zh/> 目标对象 | <en/> target object\n * @param animation - <zh/> 动画实例 | <en/> animation instance\n * @description see: https://github.com/antvis/G/issues/1731\n */\nfunction releaseAnimation(target: DisplayObject, animation: IAnimation) {\n  animation?.finished.then(() => {\n    // @ts-expect-error private property\n    const index = target.activeAnimations.findIndex((_) => _ === animation);\n    // @ts-expect-error private property\n    if (index > -1) target.activeAnimations.splice(index, 1);\n  });\n}\n\n/**\n * <zh/> 图形 upsert 方法生命周期钩子\n *\n * <en/> Shape upsert method lifecycle hooks\n */\nexport interface UpsertHooks {\n  /**\n   * <zh/> 图形创建前\n   *\n   * <en/> Before creating the shape\n   */\n  beforeCreate?: () => void;\n  /**\n   * <zh/> 图形创建后\n   *\n   * <en/> After creating the shape\n   * @param instance - <zh/> 图形实例 | <en/> shape instance\n   */\n  afterCreate?: (instance: DisplayObject) => void;\n  /**\n   * <zh/> 图形更新前\n   *\n   * <en/> Before updating the shape\n   * @param instance - <zh/> 图形实例 | <en/> shape instance\n   */\n  beforeUpdate?: (instance: DisplayObject) => void;\n  /**\n   * <zh/> 图形更新后\n   *\n   * <en/> After updating the shape\n   * @param instance - <zh/> 图形实例 | <en/> shape instance\n   */\n  afterUpdate?: (instance: DisplayObject) => void;\n  /**\n   * <zh/> 图形销毁前\n   *\n   * <en/> Before destroying the shape\n   * @param instance - <zh/> 图形实例 | <en/> shape instance\n   */\n  beforeDestroy?: (instance: DisplayObject) => void;\n  /**\n   * <zh/> 图形销毁后\n   *\n   * <en/> After destroying the shape\n   * @param instance - <zh/> 图形实例 | <en/> shape instance\n   */\n  afterDestroy?: (instance: DisplayObject) => void;\n}\n\n/**\n * <zh/> 应用 transform\n *\n * <en/> Apply transform\n * @param style - <zh/> 样式 | <en/> style\n * @returns <zh/> 样式 | <en/> style\n */\nfunction applyTransform(style?: BaseShapeStyleProps) {\n  if (!style) return {};\n  if ('x' in style || 'y' in style || 'z' in style) {\n    const { x = 0, y = 0, z, transform } = style as any;\n    const newTransform = replaceTranslateInTransform(x, y, z, transform);\n    if (newTransform) style.transform = newTransform;\n  }\n  return style;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}