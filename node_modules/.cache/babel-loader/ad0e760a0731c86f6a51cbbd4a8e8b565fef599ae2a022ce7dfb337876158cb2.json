{"ast":null,"code":"import flru from 'flru';\nconst cache = flru(3);\n/**\n * A decorator to return new function with LRU cache.\n */\nexport function lru(fn, keyFn = (...args) => `${args[0]}`, maxSize = 16) {\n  const cache = flru(maxSize);\n  return (...args) => {\n    const key = keyFn(...args);\n    let v = cache.get(key);\n    if (cache.has(key)) return cache.get(key);\n    v = fn(...args);\n    cache.set(key, v);\n    return v;\n  };\n}","map":{"version":3,"names":["flru","cache","lru","fn","keyFn","args","maxSize","key","v","get","has","set"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/utils/lru.ts"],"sourcesContent":["import flru from 'flru';\n\nconst cache = flru(3);\n/**\n * A decorator to return new function with LRU cache.\n */\nexport function lru<T = any, V = any>(\n  fn: (...args: T[]) => V,\n  keyFn: (...args: T[]) => string = (...args) => `${args[0]}`,\n  maxSize = 16,\n) {\n  const cache = flru(maxSize);\n\n  return (...args) => {\n    const key = keyFn(...args);\n    let v = cache.get(key);\n\n    if (cache.has(key)) return cache.get(key);\n\n    v = fn(...args);\n    cache.set(key, v);\n\n    return v;\n  };\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;AACrB;;;AAGA,OAAM,SAAUE,GAAGA,CACjBC,EAAuB,EACvBC,KAAA,GAAkCA,CAAC,GAAGC,IAAI,KAAK,GAAGA,IAAI,CAAC,CAAC,CAAC,EAAE,EAC3DC,OAAO,GAAG,EAAE;EAEZ,MAAML,KAAK,GAAGD,IAAI,CAACM,OAAO,CAAC;EAE3B,OAAO,CAAC,GAAGD,IAAI,KAAI;IACjB,MAAME,GAAG,GAAGH,KAAK,CAAC,GAAGC,IAAI,CAAC;IAC1B,IAAIG,CAAC,GAAGP,KAAK,CAACQ,GAAG,CAACF,GAAG,CAAC;IAEtB,IAAIN,KAAK,CAACS,GAAG,CAACH,GAAG,CAAC,EAAE,OAAON,KAAK,CAACQ,GAAG,CAACF,GAAG,CAAC;IAEzCC,CAAC,GAAGL,EAAE,CAAC,GAAGE,IAAI,CAAC;IACfJ,KAAK,CAACU,GAAG,CAACJ,GAAG,EAAEC,CAAC,CAAC;IAEjB,OAAOA,CAAC;EACV,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}