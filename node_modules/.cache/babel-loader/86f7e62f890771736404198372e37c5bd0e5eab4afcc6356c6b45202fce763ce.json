{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Node } from './node';\nimport { defineProps } from './define';\nimport { markProps } from './props';\nlet MarkNode = class MarkNode extends Node {\n  changeData(data) {\n    const chart = this.getRoot();\n    if (!chart) return;\n    this.attr('data', data);\n    return chart === null || chart === void 0 ? void 0 : chart.render();\n  }\n  /**\n   * Get mark from chart views.\n   */\n  getMark() {\n    var _a;\n    const chartView = (_a = this.getRoot()) === null || _a === void 0 ? void 0 : _a.getView();\n    if (!chartView) return undefined;\n    const {\n      markState\n    } = chartView;\n    const markKey = Array.from(markState.keys()).find(item => item.key === this.attr('key'));\n    return markState.get(markKey);\n  }\n  /**\n   * Get all scales instance.\n   */\n  getScale() {\n    var _a;\n    const chartView = (_a = this.getRoot()) === null || _a === void 0 ? void 0 : _a.getView();\n    if (!chartView) return undefined;\n    return chartView === null || chartView === void 0 ? void 0 : chartView.scale;\n  }\n  /**\n   * Get the scale instance by channel.\n   */\n  getScaleByChannel(channel) {\n    var _a, _b;\n    const chartView = (_a = this.getRoot()) === null || _a === void 0 ? void 0 : _a.getView();\n    if (!chartView) return undefined;\n    return (_b = chartView === null || chartView === void 0 ? void 0 : chartView.scale) === null || _b === void 0 ? void 0 : _b[channel];\n  }\n  /**\n   * Get canvas group.\n   */\n  getGroup() {\n    const key = this.attr('key');\n    if (!key) return undefined;\n    const chart = this.getRoot();\n    const chartGroup = chart.getContext().canvas.getRoot();\n    return chartGroup.getElementById(key);\n  }\n};\nMarkNode = __decorate([defineProps(markProps)], MarkNode);\nexport { MarkNode };","map":{"version":3,"names":["Node","defineProps","markProps","MarkNode","changeData","data","chart","getRoot","attr","render","getMark","chartView","_a","getView","undefined","markState","markKey","Array","from","keys","find","item","key","get","getScale","scale","getScaleByChannel","channel","_b","getGroup","chartGroup","getContext","canvas","getElementById","__decorate"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/api/mark.ts"],"sourcesContent":["import { DisplayObject } from '@antv/g';\nimport { G2MarkState, Scale } from '../runtime';\nimport { Mark as Spec } from '../spec';\nimport { Node } from './node';\nimport { defineProps } from './define';\nimport { markProps } from './props';\nimport { PropsOf } from './types';\n\nexport interface MarkNode extends PropsOf<typeof markProps, Spec, MarkNode> {}\n\n@defineProps(markProps)\nexport class MarkNode extends Node<Spec & { [key: string]: any }> {\n  changeData(data: any) {\n    const chart = this.getRoot();\n    if (!chart) return;\n    this.attr('data', data);\n    return chart?.render();\n  }\n\n  /**\n   * Get mark from chart views.\n   */\n  getMark(): G2MarkState {\n    const chartView = this.getRoot()?.getView();\n    if (!chartView) return undefined;\n    const { markState } = chartView;\n    const markKey = Array.from(markState.keys()).find(\n      (item) => item.key === this.attr('key'),\n    );\n    return markState.get(markKey);\n  }\n\n  /**\n   * Get all scales instance.\n   */\n  getScale(): Record<string, Scale> {\n    const chartView = this.getRoot()?.getView();\n    if (!chartView) return undefined;\n    return chartView?.scale;\n  }\n\n  /**\n   * Get the scale instance by channel.\n   */\n  getScaleByChannel(channel: string): Scale {\n    const chartView = this.getRoot()?.getView();\n    if (!chartView) return undefined;\n    return chartView?.scale?.[channel];\n  }\n\n  /**\n   * Get canvas group.\n   */\n  getGroup(): DisplayObject {\n    const key = this.attr('key');\n    if (!key) return undefined;\n    const chart = this.getRoot();\n    const chartGroup = chart.getContext().canvas.getRoot();\n    return chartGroup.getElementById(key);\n  }\n}\n"],"mappings":";;;;;;;AAGA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,WAAW,QAAQ,UAAU;AACtC,SAASC,SAAS,QAAQ,SAAS;AAM5B,IAAMC,QAAQ,GAAd,MAAMA,QAAS,SAAQH,IAAmC;EAC/DI,UAAUA,CAACC,IAAS;IAClB,MAAMC,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE;IAC5B,IAAI,CAACD,KAAK,EAAE;IACZ,IAAI,CAACE,IAAI,CAAC,MAAM,EAAEH,IAAI,CAAC;IACvB,OAAOC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG,MAAM,EAAE;EACxB;EAEA;;;EAGAC,OAAOA,CAAA;;IACL,MAAMC,SAAS,GAAG,CAAAC,EAAA,OAAI,CAACL,OAAO,EAAE,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,OAAO,EAAE;IAC3C,IAAI,CAACF,SAAS,EAAE,OAAOG,SAAS;IAChC,MAAM;MAAEC;IAAS,CAAE,GAAGJ,SAAS;IAC/B,MAAMK,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACH,SAAS,CAACI,IAAI,EAAE,CAAC,CAACC,IAAI,CAC9CC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAK,IAAI,CAACd,IAAI,CAAC,KAAK,CAAC,CACxC;IACD,OAAOO,SAAS,CAACQ,GAAG,CAACP,OAAO,CAAC;EAC/B;EAEA;;;EAGAQ,QAAQA,CAAA;;IACN,MAAMb,SAAS,GAAG,CAAAC,EAAA,OAAI,CAACL,OAAO,EAAE,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,OAAO,EAAE;IAC3C,IAAI,CAACF,SAAS,EAAE,OAAOG,SAAS;IAChC,OAAOH,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEc,KAAK;EACzB;EAEA;;;EAGAC,iBAAiBA,CAACC,OAAe;;IAC/B,MAAMhB,SAAS,GAAG,CAAAC,EAAA,OAAI,CAACL,OAAO,EAAE,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,OAAO,EAAE;IAC3C,IAAI,CAACF,SAAS,EAAE,OAAOG,SAAS;IAChC,OAAO,CAAAc,EAAA,GAAAjB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEc,KAAK,cAAAG,EAAA,uBAAAA,EAAA,CAAGD,OAAO,CAAC;EACpC;EAEA;;;EAGAE,QAAQA,CAAA;IACN,MAAMP,GAAG,GAAG,IAAI,CAACd,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,CAACc,GAAG,EAAE,OAAOR,SAAS;IAC1B,MAAMR,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE;IAC5B,MAAMuB,UAAU,GAAGxB,KAAK,CAACyB,UAAU,EAAE,CAACC,MAAM,CAACzB,OAAO,EAAE;IACtD,OAAOuB,UAAU,CAACG,cAAc,CAACX,GAAG,CAAC;EACvC;CACD;AAjDYnB,QAAQ,GAAA+B,UAAA,EADpBjC,WAAW,CAACC,SAAS,CAAC,C,EACVC,QAAQ,CAiDpB;SAjDYA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}