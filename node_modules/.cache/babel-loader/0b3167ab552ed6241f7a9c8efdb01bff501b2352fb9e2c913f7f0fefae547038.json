{"ast":null,"code":"import { GraphEvent } from '../constants';\nimport { BasePlugin } from './base-plugin';\n/**\n * <zh/> 配置相机参数\n *\n * <en/> Configure camera parameters\n */\nexport class CameraSetting extends BasePlugin {\n  constructor(context, options) {\n    super(context, options);\n    this.setOptions = options => {\n      const caller = {\n        cameraType: 'setType',\n        near: 'setNear',\n        far: 'setFar',\n        fov: 'setFov',\n        aspect: 'setAspect',\n        // 确保 projectionMode 在 near/far/fov/aspect 之后设置\n        // Ensure that projectionMode is set after near/far/fov/aspect\n        projectionMode: 'setProjectionMode',\n        distance: 'setDistance',\n        minDistance: 'setMinDistance',\n        maxDistance: 'setMaxDistance',\n        roll: 'setRoll',\n        elevation: 'setElevation',\n        azimuth: 'setAzimuth'\n      };\n      const valueMapper = (key, value) => {\n        switch (key) {\n          case 'projectionMode':\n            return value === 'perspective' ? 1 : 0;\n          case 'cameraType':\n            return {\n              orbiting: 0,\n              exploring: 1,\n              tracking: 2\n            }[value];\n          case 'aspect':\n            if (typeof value === 'number') return value;\n            return this.getCanvasAspect();\n          default:\n            return value;\n        }\n      };\n      Object.entries(caller).forEach(([key, method]) => {\n        const value = options[key];\n        if (value !== undefined) {\n          const actualValue = valueMapper(key, value);\n          // @ts-expect-error incorrect ts type check\n          this.context.canvas.getCamera()[method](actualValue);\n        }\n      });\n    };\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 更新相机参数\n   *\n   * <en/> Update camera parameters\n   * @param options - <zh/> 相机配置项 | <en/> Camera configuration options\n   * @internal\n   */\n  update(options) {\n    this.setOptions(options);\n    super.update(options);\n  }\n  bindEvents() {\n    this.context.graph.once(GraphEvent.BEFORE_DRAW, () => this.setOptions(this.options));\n  }\n  getCanvasAspect() {\n    const [width, height] = this.context.viewport.getCanvasSize();\n    return width / height;\n  }\n}","map":{"version":3,"names":["GraphEvent","BasePlugin","CameraSetting","constructor","context","options","setOptions","caller","cameraType","near","far","fov","aspect","projectionMode","distance","minDistance","maxDistance","roll","elevation","azimuth","valueMapper","key","value","orbiting","exploring","tracking","getCanvasAspect","Object","entries","forEach","method","undefined","actualValue","canvas","getCamera","bindEvents","update","graph","once","BEFORE_DRAW","width","height","viewport","getCanvasSize"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/camera-setting.ts"],"sourcesContent":["import { GraphEvent } from '../constants';\nimport type { RuntimeContext } from '../runtime/types';\nimport type { BasePluginOptions } from './base-plugin';\nimport { BasePlugin } from './base-plugin';\n\nexport interface CameraSettingOptions extends BasePluginOptions {\n  /**\n   * <zh/> 投影模式，透视投影仅在 3D 场景下有效\n   * - `'perspective'` : 透视投影\n   * - `'orthographic'` : 正交投影\n   *\n   * <en/> Projection mode, perspective projection is only valid in 3D scenes\n   * - `'perspective'` : perspective projection\n   * - `'orthographic'` : Orthogonal projection\n   */\n  projectionMode?: 'perspective' | 'orthographic';\n  /**\n   * <zh/> 相机类型\n   * - `'orbiting'`: 固定视点，改变相机位置\n   * - `'exploring'`: 类似 orbiting，但允许相机在北极和南极之间旋转\n   * - `'tracking'`: 固定相机位置，改变视点\n   *\n   * <en/> Camera type\n   * - `'orbiting'`: Fixed viewpoint, change camera position\n   * - `'exploring'`: Similar to orbiting, but allows the camera to rotate between the North Pole and the South Pole\n   * - `'tracking'`: Fixed camera position, change viewpoint\n   */\n  cameraType?: 'orbiting' | 'exploring' | 'tracking';\n  /**\n   * <zh/> 近平面位置\n   *\n   * <en/> The position of the near plane\n   */\n  near?: number;\n  /**\n   * <zh/> 远平面位置\n   *\n   * <en/> The position of the far plane\n   */\n  far?: number;\n  /**\n   * <zh/> 相机视角，仅在透视相机下有效\n   *\n   * <en/> Camera field of view, only valid in perspective camera\n   */\n  fov?: number;\n  /**\n   * <zh/> 相机视口宽高比，仅在透视相机下有效\n   * - number : 具体的宽高比\n   * - `'auto'` : 自动设置为画布的宽高比\n   *\n   * <en/> Camera viewport aspect ratio, only valid in perspective camera.\n   * - number : Specific aspect ratio\n   * - `'auto'` : Automatically set to the aspect ratio of the canvas\n   */\n  aspect?: number | 'auto';\n  /**\n   * <zh/> 相机距离目标的距离\n   *\n   * <en/> The distance from the camera to the target\n   * @defaultValue 500\n   */\n  distance?: number;\n  /**\n   * <zh/> 最小视距\n   *\n   * <en/> Minimum distance\n   */\n  minDistance?: number;\n  /**\n   * <zh/> 最大视距\n   *\n   * <en/> Maximum distance\n   */\n  maxDistance?: number;\n  /**\n   * <zh/> 滚转角\n   *\n   * <en/> Roll\n   */\n  roll?: number;\n  /**\n   * <zh/> 仰角\n   *\n   * <en/> Elevation\n   */\n  elevation?: number;\n  /**\n   * <zh/> 方位角\n   *\n   * <en/> Azimuth\n   */\n  azimuth?: number;\n}\n\n/**\n * <zh/> 配置相机参数\n *\n * <en/> Configure camera parameters\n */\nexport class CameraSetting extends BasePlugin<CameraSettingOptions> {\n  constructor(context: RuntimeContext, options: CameraSettingOptions) {\n    super(context, options);\n    this.bindEvents();\n  }\n  /**\n   * <zh/> 更新相机参数\n   *\n   * <en/> Update camera parameters\n   * @param options - <zh/> 相机配置项 | <en/> Camera configuration options\n   * @internal\n   */\n  public update(options: Partial<CameraSettingOptions>): void {\n    this.setOptions(options);\n    super.update(options);\n  }\n\n  private bindEvents() {\n    this.context.graph.once(GraphEvent.BEFORE_DRAW, () => this.setOptions(this.options));\n  }\n\n  private setOptions = (options: Partial<CameraSettingOptions>) => {\n    const caller = {\n      cameraType: 'setType',\n      near: 'setNear',\n      far: 'setFar',\n      fov: 'setFov',\n      aspect: 'setAspect',\n      // 确保 projectionMode 在 near/far/fov/aspect 之后设置\n      // Ensure that projectionMode is set after near/far/fov/aspect\n      projectionMode: 'setProjectionMode',\n      distance: 'setDistance',\n      minDistance: 'setMinDistance',\n      maxDistance: 'setMaxDistance',\n      roll: 'setRoll',\n      elevation: 'setElevation',\n      azimuth: 'setAzimuth',\n    } as const;\n\n    const valueMapper = (key: string, value: string) => {\n      switch (key) {\n        case 'projectionMode':\n          return value === 'perspective' ? 1 : 0;\n        case 'cameraType':\n          return { orbiting: 0, exploring: 1, tracking: 2 }[value]!;\n        case 'aspect':\n          if (typeof value === 'number') return value;\n          return this.getCanvasAspect();\n        default:\n          return value;\n      }\n    };\n\n    Object.entries(caller).forEach(([key, method]) => {\n      const value = options[key];\n      if (value !== undefined) {\n        const actualValue = valueMapper(key, value);\n        // @ts-expect-error incorrect ts type check\n        this.context.canvas.getCamera()[method](actualValue);\n      }\n    });\n  };\n\n  private getCanvasAspect() {\n    const [width, height] = this.context.viewport!.getCanvasSize();\n    return width / height;\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AAGzC,SAASC,UAAU,QAAQ,eAAe;AA4F1C;;;;;AAKA,OAAM,MAAOC,aAAc,SAAQD,UAAgC;EACjEE,YAAYC,OAAuB,EAAEC,OAA6B;IAChE,KAAK,CAACD,OAAO,EAAEC,OAAO,CAAC;IAmBjB,KAAAC,UAAU,GAAID,OAAsC,IAAI;MAC9D,MAAME,MAAM,GAAG;QACbC,UAAU,EAAE,SAAS;QACrBC,IAAI,EAAE,SAAS;QACfC,GAAG,EAAE,QAAQ;QACbC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,WAAW;QACnB;QACA;QACAC,cAAc,EAAE,mBAAmB;QACnCC,QAAQ,EAAE,aAAa;QACvBC,WAAW,EAAE,gBAAgB;QAC7BC,WAAW,EAAE,gBAAgB;QAC7BC,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,cAAc;QACzBC,OAAO,EAAE;OACD;MAEV,MAAMC,WAAW,GAAGA,CAACC,GAAW,EAAEC,KAAa,KAAI;QACjD,QAAQD,GAAG;UACT,KAAK,gBAAgB;YACnB,OAAOC,KAAK,KAAK,aAAa,GAAG,CAAC,GAAG,CAAC;UACxC,KAAK,YAAY;YACf,OAAO;cAAEC,QAAQ,EAAE,CAAC;cAAEC,SAAS,EAAE,CAAC;cAAEC,QAAQ,EAAE;YAAC,CAAE,CAACH,KAAK,CAAE;UAC3D,KAAK,QAAQ;YACX,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK;YAC3C,OAAO,IAAI,CAACI,eAAe,EAAE;UAC/B;YACE,OAAOJ,KAAK;QAChB;MACF,CAAC;MAEDK,MAAM,CAACC,OAAO,CAACrB,MAAM,CAAC,CAACsB,OAAO,CAAC,CAAC,CAACR,GAAG,EAAES,MAAM,CAAC,KAAI;QAC/C,MAAMR,KAAK,GAAGjB,OAAO,CAACgB,GAAG,CAAC;QAC1B,IAAIC,KAAK,KAAKS,SAAS,EAAE;UACvB,MAAMC,WAAW,GAAGZ,WAAW,CAACC,GAAG,EAAEC,KAAK,CAAC;UAC3C;UACA,IAAI,CAAClB,OAAO,CAAC6B,MAAM,CAACC,SAAS,EAAE,CAACJ,MAAM,CAAC,CAACE,WAAW,CAAC;QACtD;MACF,CAAC,CAAC;IACJ,CAAC;IA1DC,IAAI,CAACG,UAAU,EAAE;EACnB;EACA;;;;;;;EAOOC,MAAMA,CAAC/B,OAAsC;IAClD,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC;IACxB,KAAK,CAAC+B,MAAM,CAAC/B,OAAO,CAAC;EACvB;EAEQ8B,UAAUA,CAAA;IAChB,IAAI,CAAC/B,OAAO,CAACiC,KAAK,CAACC,IAAI,CAACtC,UAAU,CAACuC,WAAW,EAAE,MAAM,IAAI,CAACjC,UAAU,CAAC,IAAI,CAACD,OAAO,CAAC,CAAC;EACtF;EA4CQqB,eAAeA,CAAA;IACrB,MAAM,CAACc,KAAK,EAAEC,MAAM,CAAC,GAAG,IAAI,CAACrC,OAAO,CAACsC,QAAS,CAACC,aAAa,EAAE;IAC9D,OAAOH,KAAK,GAAGC,MAAM;EACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}