{"ast":null,"code":"import { show } from '../utils/style';\nconst adjustPosition = (target, edge) => {\n  const [[minEdgeX, minEdgeY], [maxEdgeX, maxEdgeY]] = edge;\n  const [[minX, minY], [maxX, maxY]] = target;\n  let changeX = 0,\n    changeY = 0;\n  // x-axis\n  if (minX < minEdgeX) {\n    changeX = minEdgeX - minX;\n  } else if (maxX > maxEdgeX) {\n    changeX = maxEdgeX - maxX;\n  }\n  // y-axis\n  if (minY < minEdgeY) {\n    changeY = minEdgeY - minY;\n  } else if (maxY > maxEdgeY) {\n    changeY = maxEdgeY - maxY;\n  }\n  return [changeX, changeY];\n};\n/**\n * adjust the label when exceed the specific area\n */\nexport const ExceedAdjust = (options = {}) => {\n  return (labels, {\n    canvas,\n    layout\n  }) => {\n    const {\n      bounds = 'view',\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n    // Calculate boundary area based on bounds option\n    const getBoundaryArea = () => {\n      if (bounds === 'main') {\n        // Main area: exclude margins and paddings from view area\n        const {\n          x = 0,\n          y = 0,\n          width = 0,\n          height = 0,\n          marginLeft = 0,\n          marginRight = 0,\n          marginTop = 0,\n          marginBottom = 0,\n          paddingLeft = 0,\n          paddingRight = 0,\n          paddingTop = 0,\n          paddingBottom = 0\n        } = layout;\n        return [[x + marginLeft + paddingLeft + offsetX, y + marginTop + paddingTop + offsetY], [x + width - marginRight - paddingRight - offsetX, y + height - marginBottom - paddingBottom - offsetY]];\n      } else {\n        // View area (default): entire layout area\n        const {\n          x = 0,\n          y = 0,\n          width = 0,\n          height = 0\n        } = layout;\n        return [[x + offsetX, y + offsetY], [x + width - offsetX, y + height - offsetY]];\n      }\n    };\n    const boundaryArea = getBoundaryArea();\n    labels.forEach(l => {\n      show(l);\n      const {\n        max,\n        min\n      } = l.getRenderBounds();\n      const [xMax, yMax] = max,\n        [xMin, yMin] = min;\n      const changeValue = adjustPosition([[xMin, yMin], [xMax, yMax]],\n      // Use the calculated boundary area based on bounds configuration\n      boundaryArea);\n      // For label with connectorPoints\n      if (l.style.connector && l.style.connectorPoints) {\n        l.style.connectorPoints[0][0] -= changeValue[0];\n        l.style.connectorPoints[0][1] -= changeValue[1];\n      }\n      l.style.x += changeValue[0];\n      l.style.y += changeValue[1];\n    });\n    return labels;\n  };\n};","map":{"version":3,"names":["show","adjustPosition","target","edge","minEdgeX","minEdgeY","maxEdgeX","maxEdgeY","minX","minY","maxX","maxY","changeX","changeY","ExceedAdjust","options","labels","canvas","layout","bounds","offsetX","offsetY","getBoundaryArea","x","y","width","height","marginLeft","marginRight","marginTop","marginBottom","paddingLeft","paddingRight","paddingTop","paddingBottom","boundaryArea","forEach","l","max","min","getRenderBounds","xMax","yMax","xMin","yMin","changeValue","style","connector","connectorPoints"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/label-transform/exceedAdjust.ts"],"sourcesContent":["import { DisplayObject } from '@antv/g';\nimport { LabelTransformComponent as LLC } from '../runtime';\nimport { ExceedAdjustLabel } from '../spec';\nimport { Bounds } from '../utils/bounds';\nimport { show } from '../utils/style';\n\nconst adjustPosition = (target: Bounds, edge: Bounds) => {\n  const [[minEdgeX, minEdgeY], [maxEdgeX, maxEdgeY]] = edge;\n  const [[minX, minY], [maxX, maxY]] = target;\n\n  let changeX = 0,\n    changeY = 0;\n\n  // x-axis\n  if (minX < minEdgeX) {\n    changeX = minEdgeX - minX;\n  } else if (maxX > maxEdgeX) {\n    changeX = maxEdgeX - maxX;\n  }\n\n  // y-axis\n  if (minY < minEdgeY) {\n    changeY = minEdgeY - minY;\n  } else if (maxY > maxEdgeY) {\n    changeY = maxEdgeY - maxY;\n  }\n\n  return [changeX, changeY];\n};\n\nexport type ExceedAdjustOptions = Omit<ExceedAdjustLabel, 'type'> & {\n  /** X-axis offset default is 0 */\n  offsetX?: number;\n  /** Y-axis offset default is 0 */\n  offsetY?: number;\n};\n\n/**\n * adjust the label when exceed the specific area\n */\nexport const ExceedAdjust: LLC<ExceedAdjustOptions> = (options = {}) => {\n  return (labels: DisplayObject[], { canvas, layout }) => {\n    const { bounds = 'view', offsetX = 0, offsetY = 0 } = options;\n\n    // Calculate boundary area based on bounds option\n    const getBoundaryArea = () => {\n      if (bounds === 'main') {\n        // Main area: exclude margins and paddings from view area\n        const {\n          x = 0,\n          y = 0,\n          width = 0,\n          height = 0,\n          marginLeft = 0,\n          marginRight = 0,\n          marginTop = 0,\n          marginBottom = 0,\n          paddingLeft = 0,\n          paddingRight = 0,\n          paddingTop = 0,\n          paddingBottom = 0,\n        } = layout;\n\n        return [\n          [\n            x + marginLeft + paddingLeft + offsetX,\n            y + marginTop + paddingTop + offsetY,\n          ],\n          [\n            x + width - marginRight - paddingRight - offsetX,\n            y + height - marginBottom - paddingBottom - offsetY,\n          ],\n        ] as Bounds;\n      } else {\n        // View area (default): entire layout area\n        const { x = 0, y = 0, width = 0, height = 0 } = layout;\n        return [\n          [x + offsetX, y + offsetY],\n          [x + width - offsetX, y + height - offsetY],\n        ] as Bounds;\n      }\n    };\n\n    const boundaryArea = getBoundaryArea();\n\n    labels.forEach((l) => {\n      show(l);\n      const { max, min } = l.getRenderBounds();\n      const [xMax, yMax] = max,\n        [xMin, yMin] = min;\n      const changeValue = adjustPosition(\n        [\n          [xMin, yMin],\n          [xMax, yMax],\n        ],\n        // Use the calculated boundary area based on bounds configuration\n        boundaryArea,\n      );\n      // For label with connectorPoints\n      if (l.style.connector && l.style.connectorPoints) {\n        l.style.connectorPoints[0][0] -= changeValue[0];\n        l.style.connectorPoints[0][1] -= changeValue[1];\n      }\n      l.style.x += changeValue[0];\n      l.style.y += changeValue[1];\n    });\n\n    return labels;\n  };\n};\n"],"mappings":"AAIA,SAASA,IAAI,QAAQ,gBAAgB;AAErC,MAAMC,cAAc,GAAGA,CAACC,MAAc,EAAEC,IAAY,KAAI;EACtD,MAAM,CAAC,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CAAC,GAAGJ,IAAI;EACzD,MAAM,CAAC,CAACK,IAAI,EAAEC,IAAI,CAAC,EAAE,CAACC,IAAI,EAAEC,IAAI,CAAC,CAAC,GAAGT,MAAM;EAE3C,IAAIU,OAAO,GAAG,CAAC;IACbC,OAAO,GAAG,CAAC;EAEb;EACA,IAAIL,IAAI,GAAGJ,QAAQ,EAAE;IACnBQ,OAAO,GAAGR,QAAQ,GAAGI,IAAI;GAC1B,MAAM,IAAIE,IAAI,GAAGJ,QAAQ,EAAE;IAC1BM,OAAO,GAAGN,QAAQ,GAAGI,IAAI;;EAG3B;EACA,IAAID,IAAI,GAAGJ,QAAQ,EAAE;IACnBQ,OAAO,GAAGR,QAAQ,GAAGI,IAAI;GAC1B,MAAM,IAAIE,IAAI,GAAGJ,QAAQ,EAAE;IAC1BM,OAAO,GAAGN,QAAQ,GAAGI,IAAI;;EAG3B,OAAO,CAACC,OAAO,EAAEC,OAAO,CAAC;AAC3B,CAAC;AASD;;;AAGA,OAAO,MAAMC,YAAY,GAA6BA,CAACC,OAAO,GAAG,EAAE,KAAI;EACrE,OAAO,CAACC,MAAuB,EAAE;IAAEC,MAAM;IAAEC;EAAM,CAAE,KAAI;IACrD,MAAM;MAAEC,MAAM,GAAG,MAAM;MAAEC,OAAO,GAAG,CAAC;MAAEC,OAAO,GAAG;IAAC,CAAE,GAAGN,OAAO;IAE7D;IACA,MAAMO,eAAe,GAAGA,CAAA,KAAK;MAC3B,IAAIH,MAAM,KAAK,MAAM,EAAE;QACrB;QACA,MAAM;UACJI,CAAC,GAAG,CAAC;UACLC,CAAC,GAAG,CAAC;UACLC,KAAK,GAAG,CAAC;UACTC,MAAM,GAAG,CAAC;UACVC,UAAU,GAAG,CAAC;UACdC,WAAW,GAAG,CAAC;UACfC,SAAS,GAAG,CAAC;UACbC,YAAY,GAAG,CAAC;UAChBC,WAAW,GAAG,CAAC;UACfC,YAAY,GAAG,CAAC;UAChBC,UAAU,GAAG,CAAC;UACdC,aAAa,GAAG;QAAC,CAClB,GAAGhB,MAAM;QAEV,OAAO,CACL,CACEK,CAAC,GAAGI,UAAU,GAAGI,WAAW,GAAGX,OAAO,EACtCI,CAAC,GAAGK,SAAS,GAAGI,UAAU,GAAGZ,OAAO,CACrC,EACD,CACEE,CAAC,GAAGE,KAAK,GAAGG,WAAW,GAAGI,YAAY,GAAGZ,OAAO,EAChDI,CAAC,GAAGE,MAAM,GAAGI,YAAY,GAAGI,aAAa,GAAGb,OAAO,CACpD,CACQ;OACZ,MAAM;QACL;QACA,MAAM;UAAEE,CAAC,GAAG,CAAC;UAAEC,CAAC,GAAG,CAAC;UAAEC,KAAK,GAAG,CAAC;UAAEC,MAAM,GAAG;QAAC,CAAE,GAAGR,MAAM;QACtD,OAAO,CACL,CAACK,CAAC,GAAGH,OAAO,EAAEI,CAAC,GAAGH,OAAO,CAAC,EAC1B,CAACE,CAAC,GAAGE,KAAK,GAAGL,OAAO,EAAEI,CAAC,GAAGE,MAAM,GAAGL,OAAO,CAAC,CAClC;;IAEf,CAAC;IAED,MAAMc,YAAY,GAAGb,eAAe,EAAE;IAEtCN,MAAM,CAACoB,OAAO,CAAEC,CAAC,IAAI;MACnBrC,IAAI,CAACqC,CAAC,CAAC;MACP,MAAM;QAAEC,GAAG;QAAEC;MAAG,CAAE,GAAGF,CAAC,CAACG,eAAe,EAAE;MACxC,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAGJ,GAAG;QACtB,CAACK,IAAI,EAAEC,IAAI,CAAC,GAAGL,GAAG;MACpB,MAAMM,WAAW,GAAG5C,cAAc,CAChC,CACE,CAAC0C,IAAI,EAAEC,IAAI,CAAC,EACZ,CAACH,IAAI,EAAEC,IAAI,CAAC,CACb;MACD;MACAP,YAAY,CACb;MACD;MACA,IAAIE,CAAC,CAACS,KAAK,CAACC,SAAS,IAAIV,CAAC,CAACS,KAAK,CAACE,eAAe,EAAE;QAChDX,CAAC,CAACS,KAAK,CAACE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIH,WAAW,CAAC,CAAC,CAAC;QAC/CR,CAAC,CAACS,KAAK,CAACE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIH,WAAW,CAAC,CAAC,CAAC;;MAEjDR,CAAC,CAACS,KAAK,CAACvB,CAAC,IAAIsB,WAAW,CAAC,CAAC,CAAC;MAC3BR,CAAC,CAACS,KAAK,CAACtB,CAAC,IAAIqB,WAAW,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO7B,MAAM;EACf,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}