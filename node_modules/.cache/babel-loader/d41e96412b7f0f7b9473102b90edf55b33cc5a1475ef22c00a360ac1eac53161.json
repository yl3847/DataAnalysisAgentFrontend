{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/runtime/types/mark.ts"],"sourcesContent":["import { Coordinate, Vector2 } from '@antv/coord';\nimport { Primitive } from '@antv/vendor/d3-array';\nimport { Channel } from './common';\nimport { Scale } from './component';\nimport { TransformSpec } from './transform';\n\n// @todo Remove any.\nexport type MarkOptions = Record<string, any>;\n\nexport type CompositeMarkOptions = Record<string, any>;\n\nexport type MarkComponent<O extends MarkOptions = MarkOptions> = {\n  (options?: O): Mark;\n  props?: MarkProps;\n};\n\nexport type CompositeMarkComponent<\n  O extends CompositeMarkOptions = CompositeMarkOptions,\n> = {\n  (options?: O, context?: any): CompositeMark;\n  props?: MarkProps;\n};\n\nexport type MarkProps = {\n  defaultShape?: string;\n  defaultLabelShape?: string;\n  channels?: Channel[];\n  preInference?: TransformSpec[];\n  postInference?: TransformSpec[];\n  shape?: Record<\n    string,\n    { (...args: any[]): any; props?: Record<string, any> }\n  >;\n  composite?: boolean;\n  interaction?: {\n    shareTooltip?: boolean;\n    seriesTooltip?: boolean;\n    crosshairs?: boolean;\n  };\n};\n\nexport type Mark = CompositeMark | SingleMark;\n\nexport type CompositeMark =\n  | Promise<MarkOptions[] | MarkOptions>\n  | MarkOptions[]\n  | MarkOptions;\n\nexport type SingleMark = (\n  I: number[],\n  scale: Record<string, Scale>,\n  channel: MarkChannel,\n  coordinate: Coordinate,\n) => [I: number[], point2d: Vector2[][], series?: number[][]];\n\nexport type MarkChannel = Record<string, Primitive[]>;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}