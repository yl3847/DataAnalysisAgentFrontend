{"ast":null,"code":"/**\n * Normalizes a single segment of a `PathArray` object.\n * eg. H/V -> L, T -> Q\n */\nexport function normalizeSegment(segment, params) {\n  var pathCommand = segment[0];\n  var px1 = params.x1,\n    py1 = params.y1,\n    px2 = params.x2,\n    py2 = params.y2;\n  var values = segment.slice(1).map(Number);\n  var result = segment;\n  if (!'TQ'.includes(pathCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n  if (pathCommand === 'H') {\n    result = ['L', segment[1], py1];\n  } else if (pathCommand === 'V') {\n    result = ['L', px1, segment[1]];\n  } else if (pathCommand === 'S') {\n    var x1 = px1 * 2 - px2;\n    var y1 = py1 * 2 - py2;\n    params.x1 = x1;\n    params.y1 = y1;\n    result = ['C', x1, y1].concat(values);\n  } else if (pathCommand === 'T') {\n    var qx = px1 * 2 - params.qx;\n    var qy = py1 * 2 - params.qy;\n    params.qx = qx;\n    params.qy = qy;\n    result = ['Q', qx, qy].concat(values);\n  } else if (pathCommand === 'Q') {\n    var nqx = values[0],\n      nqy = values[1];\n    params.qx = nqx;\n    params.qy = nqy;\n  }\n  return result;\n}","map":{"version":3,"names":["normalizeSegment","segment","params","pathCommand","px1","x1","py1","y1","px2","x2","py2","y2","values","slice","map","Number","result","includes","qx","qy","concat","nqx","nqy"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/process/normalize-segment.ts"],"sourcesContent":["import type { PathSegment, NormalSegment, CSegment, QSegment } from '../types';\n\n/**\n * Normalizes a single segment of a `PathArray` object.\n * eg. H/V -> L, T -> Q\n */\nexport function normalizeSegment(segment: PathSegment, params: any): NormalSegment {\n  const [pathCommand] = segment;\n  const { x1: px1, y1: py1, x2: px2, y2: py2 } = params;\n  const values = segment.slice(1).map(Number);\n  let result = segment;\n\n  if (!'TQ'.includes(pathCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (pathCommand === 'H') {\n    result = ['L', segment[1], py1];\n  } else if (pathCommand === 'V') {\n    result = ['L', px1, segment[1]];\n  } else if (pathCommand === 'S') {\n    const x1 = px1 * 2 - px2;\n    const y1 = py1 * 2 - py2;\n    params.x1 = x1;\n    params.y1 = y1;\n    result = ['C', x1, y1].concat(values) as CSegment;\n  } else if (pathCommand === 'T') {\n    const qx = px1 * 2 - params.qx;\n    const qy = py1 * 2 - params.qy;\n    params.qx = qx;\n    params.qy = qy;\n    result = ['Q', qx, qy].concat(values) as QSegment;\n  } else if (pathCommand === 'Q') {\n    const [nqx, nqy] = values;\n    params.qx = nqx;\n    params.qy = nqy;\n  }\n\n  return result as NormalSegment;\n}\n"],"mappings":"AAEA;;;;AAIA,OAAM,SAAUA,gBAAgBA,CAACC,OAAoB,EAAEC,MAAW;EACzD,IAAAC,WAAW,GAAIF,OAAO,GAAX;EACV,IAAIG,GAAG,GAAgCF,MAAM,CAAAG,EAAtC;IAAMC,GAAG,GAAuBJ,MAAM,CAAAK,EAA7B;IAAMC,GAAG,GAAcN,MAAM,CAAAO,EAApB;IAAMC,GAAG,GAAKR,MAAM,CAAAS,EAAX;EAC1C,IAAMC,MAAM,GAAGX,OAAO,CAACY,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAC3C,IAAIC,MAAM,GAAGf,OAAO;EAEpB,IAAI,CAAC,IAAI,CAACgB,QAAQ,CAACd,WAAW,CAAC,EAAE;IAC/B;IACAD,MAAM,CAACgB,EAAE,GAAG,IAAI;IAChBhB,MAAM,CAACiB,EAAE,GAAG,IAAI;EAClB;EAEA,IAAIhB,WAAW,KAAK,GAAG,EAAE;IACvBa,MAAM,GAAG,CAAC,GAAG,EAAEf,OAAO,CAAC,CAAC,CAAC,EAAEK,GAAG,CAAC;EACjC,CAAC,MAAM,IAAIH,WAAW,KAAK,GAAG,EAAE;IAC9Ba,MAAM,GAAG,CAAC,GAAG,EAAEZ,GAAG,EAAEH,OAAO,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC,MAAM,IAAIE,WAAW,KAAK,GAAG,EAAE;IAC9B,IAAME,EAAE,GAAGD,GAAG,GAAG,CAAC,GAAGI,GAAG;IACxB,IAAMD,EAAE,GAAGD,GAAG,GAAG,CAAC,GAAGI,GAAG;IACxBR,MAAM,CAACG,EAAE,GAAGA,EAAE;IACdH,MAAM,CAACK,EAAE,GAAGA,EAAE;IACdS,MAAM,GAAG,CAAC,GAAG,EAAEX,EAAE,EAAEE,EAAE,CAAC,CAACa,MAAM,CAACR,MAAM,CAAa;EACnD,CAAC,MAAM,IAAIT,WAAW,KAAK,GAAG,EAAE;IAC9B,IAAMe,EAAE,GAAGd,GAAG,GAAG,CAAC,GAAGF,MAAM,CAACgB,EAAE;IAC9B,IAAMC,EAAE,GAAGb,GAAG,GAAG,CAAC,GAAGJ,MAAM,CAACiB,EAAE;IAC9BjB,MAAM,CAACgB,EAAE,GAAGA,EAAE;IACdhB,MAAM,CAACiB,EAAE,GAAGA,EAAE;IACdH,MAAM,GAAG,CAAC,GAAG,EAAEE,EAAE,EAAEC,EAAE,CAAC,CAACC,MAAM,CAACR,MAAM,CAAa;EACnD,CAAC,MAAM,IAAIT,WAAW,KAAK,GAAG,EAAE;IACvB,IAAAkB,GAAG,GAAST,MAAM,GAAf;MAAEU,GAAG,GAAIV,MAAM,GAAV;IACfV,MAAM,CAACgB,EAAE,GAAGG,GAAG;IACfnB,MAAM,CAACiB,EAAE,GAAGG,GAAG;EACjB;EAEA,OAAON,MAAuB;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}