{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n  serialize({\n    value\n  }) {\n    let serialized;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n    throw serialized.value;\n  }\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case \"GET\" /* MessageType.GET */:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case \"SET\" /* MessageType.SET */:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case \"APPLY\" /* MessageType.APPLY */:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case \"RELEASE\" /* MessageType.RELEASE */:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n      if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n        if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n          obj[finalizer]();\n        }\n      }\n    }).catch(error => {\n      // Send Serialization Error To Caller\n      const [wireValue, transferables] = toWireValue({\n        value: new TypeError(\"Unserializable return value\"),\n        [throwMarker]: 0\n      });\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n    });\n  });\n  if (ep.start) {\n    ep.start();\n  }\n}\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\nfunction wrap(ep, target) {\n  const pendingListeners = new Map();\n  ep.addEventListener(\"message\", function handleMessage(ev) {\n    const {\n      data\n    } = ev;\n    if (!data || !data.id) {\n      return;\n    }\n    const resolver = pendingListeners.get(data.id);\n    if (!resolver) {\n      return;\n    }\n    try {\n      resolver(data);\n    } finally {\n      pendingListeners.delete(data.id);\n    }\n  });\n  return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\nfunction releaseEndpoint(ep) {\n  return requestResponseMessage(ep, new Map(), {\n    type: \"RELEASE\" /* MessageType.RELEASE */\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis && new FinalizationRegistry(ep => {\n  const newCount = (proxyCounter.get(ep) || 0) - 1;\n  proxyCounter.set(ep, newCount);\n  if (newCount === 0) {\n    releaseEndpoint(ep);\n  }\n});\nfunction registerProxy(proxy, ep) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\nfunction unregisterProxy(proxy) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () {}) {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          pendingListeners.clear();\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n        const r = requestResponseMessage(ep, pendingListeners, {\n          type: \"GET\" /* MessageType.GET */,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, pendingListeners, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"SET\" /* MessageType.SET */,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, pendingListeners, {\n          type: \"ENDPOINT\" /* MessageType.ENDPOINT */\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, pendingListeners, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"APPLY\" /* MessageType.APPLY */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n  });\n  registerProxy(proxy, ep);\n  return proxy;\n}\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\" /* WireValueType.HANDLER */,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n  return [{\n    type: \"RAW\" /* WireValueType.RAW */,\n    value\n  }, transferCache.get(value) || []];\n}\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\" /* WireValueType.HANDLER */:\n      return transferHandlers.get(value.name).deserialize(value.value);\n    case \"RAW\" /* WireValueType.RAW */:\n      return value.value;\n  }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    pendingListeners.set(id, resolve);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };","map":{"version":3,"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","throwTransferHandler","value","serialized","Error","isError","message","name","stack","Object","assign","transferHandlers","Map","isAllowedOrigin","allowedOrigins","origin","allowedOrigin","RegExp","test","ep","globalThis","addEventListener","callback","ev","data","console","warn","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","isMessagePort","endpoint","constructor","close","target","pendingListeners","handleMessage","resolver","get","delete","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","set","registerProxy","register","unregisterProxy","unregister","isProxyReleased","Proxy","_target","clear","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","myFlat","arr","Array","prototype","concat","processed","v","transferCache","transfers","windowEndpoint","w","context","targetOrigin","msg","handler","serializedValue","generateUUID","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/comlink/src/comlink.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\ntype PendingListenersMap = Map<\n  string,\n  (value: WireValue | PromiseLike<WireValue>) => void\n>;\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  const pendingListeners : PendingListenersMap = new Map();\n\n  ep.addEventListener(\"message\", function handleMessage(ev: Event) {\n    const { data } = ev as MessageEvent;\n    if (!data || !data.id) {\n      return;\n    }\n    const resolver = pendingListeners.get(data.id);\n    if (!resolver) {\n      return;\n    }\n\n    try {\n      resolver(data);\n    } finally {\n      pendingListeners.delete(data.id);\n    }\n  });\n\n  return createProxy<T>(ep, pendingListeners, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, new Map(), {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  pendingListeners: PendingListenersMap,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          pendingListeners.clear();\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, pendingListeners, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, pendingListeners, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, pendingListeners, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, pendingListeners, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  pendingListeners: PendingListenersMap,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    pendingListeners.set(id, resolve);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n});\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}