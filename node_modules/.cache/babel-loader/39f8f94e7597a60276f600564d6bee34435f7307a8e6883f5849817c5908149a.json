{"ast":null,"code":"import { __extends, __read, __spreadArray } from \"tslib\";\nimport { parseAnimationOption } from '../../animation';\nimport { Component } from '../../core';\nimport { ifShow, sampling, select } from '../../util';\nimport { AXIS_BASE_DEFAULT_ATTR, CLASS_NAMES } from './constant';\nimport { renderGrid } from './guides/grid';\nimport { renderLabels } from './guides/labels';\nimport { renderAxisLine } from './guides/line';\nimport { renderTicks } from './guides/ticks';\nimport { renderTitle } from './guides/title';\nfunction renderAxisMain(attributes, container, data, animation) {\n  var showLine = attributes.showLine,\n    showTick = attributes.showTick,\n    showLabel = attributes.showLabel;\n  /** line */\n  var lineGroup = container.maybeAppendByClassName(CLASS_NAMES.lineGroup, 'g');\n  var lineTransitions = ifShow(showLine, lineGroup, function (group) {\n    return renderAxisLine(group, attributes, animation);\n  }) || [];\n  /** tick */\n  var tickGroup = container.maybeAppendByClassName(CLASS_NAMES.tickGroup, 'g');\n  var tickTransitions = ifShow(showTick, tickGroup, function (group) {\n    return renderTicks(group, data, attributes, animation);\n  }) || [];\n  /** label */\n  var labelGroup = container.maybeAppendByClassName(CLASS_NAMES.labelGroup, 'g');\n  var labelTransitions = ifShow(showLabel, labelGroup, function (group) {\n    return renderLabels(group, data, attributes, animation, container.node());\n  }) || [];\n  return __spreadArray(__spreadArray(__spreadArray([], __read(lineTransitions), false), __read(tickTransitions), false), __read(labelTransitions), false).filter(function (t) {\n    return !!t;\n  });\n}\nvar Axis = /** @class */function (_super) {\n  __extends(Axis, _super);\n  function Axis(options) {\n    return _super.call(this, options, AXIS_BASE_DEFAULT_ATTR) || this;\n  }\n  Axis.prototype.render = function (attributes, container, specificAnimation) {\n    var _this = this;\n    var titleText = attributes.titleText,\n      data = attributes.data,\n      animate = attributes.animate,\n      showTitle = attributes.showTitle,\n      showGrid = attributes.showGrid,\n      dataThreshold = attributes.dataThreshold,\n      truncRange = attributes.truncRange;\n    var sampledData = sampling(data, dataThreshold).filter(function (_a) {\n      var value = _a.value;\n      if (truncRange && value > truncRange[0] && value < truncRange[1]) return false;\n      return true;\n    });\n    var finalAnimation = parseAnimationOption(specificAnimation === undefined ? animate : specificAnimation);\n    /** grid */\n    var gridGroup = select(container).maybeAppendByClassName(CLASS_NAMES.gridGroup, 'g');\n    var gridTransitions = ifShow(showGrid, gridGroup, function (group) {\n      return renderGrid(group, sampledData, attributes, finalAnimation);\n    }) || [];\n    /** main group */\n    var mainGroup = select(container).maybeAppendByClassName(CLASS_NAMES.mainGroup, 'g');\n    if (titleText && (!this.initialized && finalAnimation.enter || this.initialized && finalAnimation.update)) {\n      renderAxisMain(attributes, select(this.offscreenGroup), sampledData, parseAnimationOption(false));\n    }\n    // render\n    var mainTransitions = renderAxisMain(attributes, select(mainGroup.node()), sampledData, finalAnimation);\n    /** title */\n    var titleGroup = select(container).maybeAppendByClassName(CLASS_NAMES.titleGroup, 'g');\n    var titleTransitions = ifShow(showTitle, titleGroup, function (group) {\n      return renderTitle(group, _this, attributes, finalAnimation);\n    }) || [];\n    return __spreadArray(__spreadArray(__spreadArray([], __read(gridTransitions), false), __read(mainTransitions), false), __read(titleTransitions), false).flat().filter(function (t) {\n      return !!t;\n    });\n  };\n  return Axis;\n}(Component);\nexport { Axis };","map":{"version":3,"names":["parseAnimationOption","Component","ifShow","sampling","select","AXIS_BASE_DEFAULT_ATTR","CLASS_NAMES","renderGrid","renderLabels","renderAxisLine","renderTicks","renderTitle","renderAxisMain","attributes","container","data","animation","showLine","showTick","showLabel","lineGroup","maybeAppendByClassName","lineTransitions","group","tickGroup","tickTransitions","labelGroup","labelTransitions","node","__spreadArray","__read","filter","t","Axis","_super","__extends","options","call","prototype","render","specificAnimation","_this","titleText","animate","showTitle","showGrid","dataThreshold","truncRange","sampledData","_a","value","finalAnimation","undefined","gridGroup","gridTransitions","mainGroup","initialized","enter","update","offscreenGroup","mainTransitions","titleGroup","titleTransitions","flat"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/ui/axis/axis.ts"],"sourcesContent":["import type { GenericAnimation, StandardAnimationOption } from '../../animation';\nimport { parseAnimationOption } from '../../animation';\nimport { Component } from '../../core';\nimport { Group } from '../../shapes';\nimport type { Selection } from '../../util';\nimport { ifShow, sampling, select } from '../../util';\nimport { AXIS_BASE_DEFAULT_ATTR, CLASS_NAMES } from './constant';\nimport { renderGrid } from './guides/grid';\nimport { renderLabels } from './guides/labels';\nimport { renderAxisLine } from './guides/line';\nimport { renderTicks } from './guides/ticks';\nimport { renderTitle } from './guides/title';\nimport type { AxisDatum, AxisOptions, AxisStyleProps, RequiredAxisStyleProps } from './types';\n\nexport type {\n  ArcAxisOptions,\n  ArcAxisStyleProps,\n  AxisOptions,\n  AxisStyleProps,\n  LinearAxisOptions,\n  LinearAxisStyleProps,\n} from './types';\n\nfunction renderAxisMain(\n  attributes: RequiredAxisStyleProps,\n  container: Selection,\n  data: AxisDatum[],\n  animation: StandardAnimationOption\n) {\n  const { showLine, showTick, showLabel } = attributes;\n  /** line */\n  const lineGroup = container.maybeAppendByClassName(CLASS_NAMES.lineGroup, 'g');\n  const lineTransitions =\n    ifShow(showLine!, lineGroup, (group) => {\n      return renderAxisLine(group, attributes, animation);\n    }) || [];\n\n  /** tick */\n  const tickGroup = container.maybeAppendByClassName(CLASS_NAMES.tickGroup, 'g');\n  const tickTransitions =\n    ifShow(showTick!, tickGroup, (group) => {\n      return renderTicks(group, data, attributes, animation);\n    }) || [];\n\n  /** label */\n  const labelGroup = container.maybeAppendByClassName(CLASS_NAMES.labelGroup, 'g');\n  const labelTransitions =\n    ifShow(showLabel!, labelGroup, (group) => {\n      return renderLabels(group, data, attributes, animation, container.node());\n    }) || [];\n\n  return [...lineTransitions, ...tickTransitions, ...labelTransitions].filter((t) => !!t);\n}\n\nexport class Axis extends Component<AxisStyleProps> {\n  constructor(options: AxisOptions) {\n    super(options, AXIS_BASE_DEFAULT_ATTR);\n  }\n\n  render(attributes: RequiredAxisStyleProps, container: Group, specificAnimation?: GenericAnimation) {\n    const { titleText, data, animate, showTitle, showGrid, dataThreshold, truncRange } = attributes;\n    const sampledData = sampling(data, dataThreshold).filter(({ value }) => {\n      if (truncRange && value > truncRange[0] && value < truncRange[1]) return false;\n      return true;\n    });\n\n    const finalAnimation = parseAnimationOption(specificAnimation === undefined ? animate : specificAnimation);\n\n    /** grid */\n    const gridGroup = select(container).maybeAppendByClassName(CLASS_NAMES.gridGroup, 'g');\n    const gridTransitions =\n      ifShow(showGrid!, gridGroup, (group) => renderGrid(group, sampledData, attributes, finalAnimation)) || [];\n\n    /** main group */\n    const mainGroup = select(container).maybeAppendByClassName(CLASS_NAMES.mainGroup, 'g');\n\n    if (titleText && ((!this.initialized && finalAnimation.enter) || (this.initialized && finalAnimation.update))) {\n      renderAxisMain(attributes, select(this.offscreenGroup), sampledData, parseAnimationOption(false));\n    }\n    // render\n    const mainTransitions = renderAxisMain(attributes, select(mainGroup.node()), sampledData, finalAnimation);\n    /** title */\n    const titleGroup = select(container).maybeAppendByClassName(CLASS_NAMES.titleGroup, 'g');\n    const titleTransitions =\n      ifShow(showTitle, titleGroup, (group) => {\n        return renderTitle(group, this, attributes, finalAnimation);\n      }) || [];\n    return [...gridTransitions, ...mainTransitions, ...titleTransitions].flat().filter((t) => !!t);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}