{"ast":null,"code":"import { isNormalizedArray } from './is-normalized-array';\n/**\n * Iterates an array to check if it's a `PathArray`\n * with all C (cubic bezier) segments.\n *\n * @param {string | PathArray} path the `Array` to be checked\n * @returns {boolean} iteration result\n */\nexport function isCurveArray(path) {\n  return isNormalizedArray(path) && path.every(function (_a) {\n    var pc = _a[0];\n    return 'MC'.includes(pc);\n  });\n}","map":{"version":3,"names":["isNormalizedArray","isCurveArray","path","every","_a","pc","includes"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/util/is-curve-array.ts"],"sourcesContent":["import type { PathArray } from '../types';\nimport { isNormalizedArray } from './is-normalized-array';\n\n/**\n * Iterates an array to check if it's a `PathArray`\n * with all C (cubic bezier) segments.\n *\n * @param {string | PathArray} path the `Array` to be checked\n * @returns {boolean} iteration result\n */\nexport function isCurveArray(path: string | PathArray): path is PathArray {\n  return isNormalizedArray(path) && (path as PathArray).every(([pc]) => 'MC'.includes(pc));\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,uBAAuB;AAEzD;;;;;;;AAOA,OAAM,SAAUC,YAAYA,CAACC,IAAwB;EACnD,OAAOF,iBAAiB,CAACE,IAAI,CAAC,IAAKA,IAAkB,CAACC,KAAK,CAAC,UAACC,EAAI;QAAHC,EAAE,GAAAD,EAAA;IAAM,WAAI,CAACE,QAAQ,CAACD,EAAE,CAAC;EAAjB,CAAiB,CAAC;AAC1F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}