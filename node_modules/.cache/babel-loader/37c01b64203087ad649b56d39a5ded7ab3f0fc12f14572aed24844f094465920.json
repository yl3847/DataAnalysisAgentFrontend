{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { TREE_KEY } from '../constants';\nimport { idOf } from './id';\nimport { isEdgeData } from './is';\n/**\n * <zh/> 将 NodeData、EdgeData、ComboData 转换为 graphlib 的数据结构\n *\n * <en/> Transform NodeData, EdgeData, ComboData to graphlib data structure\n * @param data - <zh/> 节点、边、combo 数据 | <en/> node, combo data\n * @returns <zh/> graphlib 数据 | <en/> graphlib data\n */\nexport function toGraphlibData(data) {\n  const {\n      id = idOf(data),\n      style,\n      data: customData\n    } = data,\n    rest = __rest(data, [\"id\", \"style\", \"data\"]);\n  const _data = Object.assign(Object.assign({}, data), {\n    style: Object.assign({}, style),\n    data: Object.assign({}, customData)\n  });\n  if (isEdgeData(data)) return Object.assign({\n    id,\n    data: _data\n  }, rest);\n  return {\n    id,\n    data: _data\n  };\n}\n/**\n * <zh/> 将 Node、Edge、Combo 转换为 G6 的数据结构\n *\n * <en/> Transform Node, Edge, Combo to G6 data structure\n * @param data - <zh/> graphlib 节点、边、Combo 数据 | <en/> graphlib node, edge, combo data\n * @returns <zh/> G6 数据 | <en/> G6 data\n */\nexport function toG6Data(data) {\n  return data.data;\n}\n/**\n * <zh/> 创建树形结构\n *\n * <en/> Create tree structure\n * @param model - <zh/> 数据模型 | <en/> data model\n */\nexport function createTreeStructure(model) {\n  if (model.hasTreeStructure(TREE_KEY)) return;\n  model.attachTreeStructure(TREE_KEY);\n  const edges = model.getAllEdges();\n  for (const edge of edges) {\n    const {\n      source,\n      target\n    } = edge;\n    model.setParent(target, source, TREE_KEY);\n  }\n}","map":{"version":3,"names":["TREE_KEY","idOf","isEdgeData","toGraphlibData","data","id","style","customData","rest","__rest","_data","Object","assign","toG6Data","createTreeStructure","model","hasTreeStructure","attachTreeStructure","edges","getAllEdges","edge","source","target","setParent"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/graphlib.ts"],"sourcesContent":["import type { Edge, Graph as Graphlib, Node } from '@antv/graphlib';\nimport { TREE_KEY } from '../constants';\nimport type { ComboData, EdgeData, NodeData } from '../spec';\nimport { NodeLikeData } from '../types/data';\nimport { idOf } from './id';\nimport { isEdgeData } from './is';\n\nexport function toGraphlibData(datums: EdgeData): Edge<EdgeData>;\nexport function toGraphlibData(datums: NodeLikeData): Node<NodeLikeData>;\n/**\n * <zh/> 将 NodeData、EdgeData、ComboData 转换为 graphlib 的数据结构\n *\n * <en/> Transform NodeData, EdgeData, ComboData to graphlib data structure\n * @param data - <zh/> 节点、边、combo 数据 | <en/> node, combo data\n * @returns <zh/> graphlib 数据 | <en/> graphlib data\n */\nexport function toGraphlibData(data: NodeData | EdgeData | ComboData): Node<NodeLikeData> | Edge<EdgeData> {\n  const { id = idOf(data), style, data: customData, ...rest } = data;\n  const _data = { ...data, style: { ...style }, data: { ...customData } };\n\n  if (isEdgeData(data)) return { id, data: _data, ...rest } as Edge<EdgeData>;\n  return { id, data: _data } as Node<NodeLikeData>;\n}\n\nexport function toG6Data<T extends EdgeData>(data: Edge<T>): T;\nexport function toG6Data<T extends NodeLikeData>(data: Node<T>): T;\n/**\n * <zh/> 将 Node、Edge、Combo 转换为 G6 的数据结构\n *\n * <en/> Transform Node, Edge, Combo to G6 data structure\n * @param data - <zh/> graphlib 节点、边、Combo 数据 | <en/> graphlib node, edge, combo data\n * @returns <zh/> G6 数据 | <en/> G6 data\n */\nexport function toG6Data<T extends NodeData | EdgeData | ComboData>(data: Node<T> | Edge<T>): T {\n  return data.data;\n}\n\n/**\n * <zh/> 创建树形结构\n *\n * <en/> Create tree structure\n * @param model - <zh/> 数据模型 | <en/> data model\n */\nexport function createTreeStructure(model: Graphlib<any, any>) {\n  if (model.hasTreeStructure(TREE_KEY)) return;\n\n  model.attachTreeStructure(TREE_KEY);\n  const edges = model.getAllEdges();\n\n  for (const edge of edges) {\n    const { source, target } = edge;\n    model.setParent(target, source, TREE_KEY);\n  }\n}\n"],"mappings":";;;;;;;;AACA,SAASA,QAAQ,QAAQ,cAAc;AAGvC,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,UAAU,QAAQ,MAAM;AAIjC;;;;;;;AAOA,OAAM,SAAUC,cAAcA,CAACC,IAAqC;EAClE,MAAM;MAAEC,EAAE,GAAGJ,IAAI,CAACG,IAAI,CAAC;MAAEE,KAAK;MAAEF,IAAI,EAAEG;IAAU,IAAcH,IAAI;IAAbI,IAAI,GAAAC,MAAA,CAAKL,IAAI,EAA5D,uBAAqD,CAAO;EAClE,MAAMM,KAAK,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQR,IAAI;IAAEE,KAAK,EAAAK,MAAA,CAAAC,MAAA,KAAON,KAAK;IAAIF,IAAI,EAAAO,MAAA,CAAAC,MAAA,KAAOL,UAAU;EAAA,EAAI;EAEvE,IAAIL,UAAU,CAACE,IAAI,CAAC,EAAE,OAAOO,MAAA,CAAAC,MAAA;IAAEP,EAAE;IAAED,IAAI,EAAEM;EAAK,GAAKF,IAAI,CAAoB;EAC3E,OAAO;IAAEH,EAAE;IAAED,IAAI,EAAEM;EAAK,CAAwB;AAClD;AAIA;;;;;;;AAOA,OAAM,SAAUG,QAAQA,CAA4CT,IAAuB;EACzF,OAAOA,IAAI,CAACA,IAAI;AAClB;AAEA;;;;;;AAMA,OAAM,SAAUU,mBAAmBA,CAACC,KAAyB;EAC3D,IAAIA,KAAK,CAACC,gBAAgB,CAAChB,QAAQ,CAAC,EAAE;EAEtCe,KAAK,CAACE,mBAAmB,CAACjB,QAAQ,CAAC;EACnC,MAAMkB,KAAK,GAAGH,KAAK,CAACI,WAAW,EAAE;EAEjC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,MAAM;MAAEG,MAAM;MAAEC;IAAM,CAAE,GAAGF,IAAI;IAC/BL,KAAK,CAACQ,SAAS,CAACD,MAAM,EAAED,MAAM,EAAErB,QAAQ,CAAC;EAC3C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}