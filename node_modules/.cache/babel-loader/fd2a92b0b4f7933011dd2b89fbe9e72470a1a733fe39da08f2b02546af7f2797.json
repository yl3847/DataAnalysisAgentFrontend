{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { deepMix, pick } from '@antv/util';\nimport { forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY } from 'd3-force';\nexport class D3ForceLayout {\n  constructor(options) {\n    this.id = 'd3-force';\n    this.config = {\n      inputNodeAttrs: ['x', 'y', 'vx', 'vy', 'fx', 'fy'],\n      outputNodeAttrs: ['x', 'y', 'vx', 'vy'],\n      simulationAttrs: ['alpha', 'alphaMin', 'alphaDecay', 'alphaTarget', 'velocityDecay', 'randomSource']\n    };\n    this.forceMap = {\n      link: forceLink,\n      manyBody: forceManyBody,\n      center: forceCenter,\n      collide: forceCollide,\n      radial: forceRadial,\n      x: forceX,\n      y: forceY\n    };\n    // @ts-ignore\n    this.options = {\n      link: {\n        id: edge => edge.id\n      },\n      manyBody: {},\n      center: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.context = {\n      options: {},\n      assign: false,\n      nodes: [],\n      edges: []\n    };\n    deepMix(this.options, options);\n    if (this.options.forceSimulation) {\n      this.simulation = this.options.forceSimulation;\n    }\n  }\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericLayout(false, graph, options);\n    });\n  }\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericLayout(true, graph, options);\n    });\n  }\n  stop() {\n    this.simulation.stop();\n  }\n  tick(iterations) {\n    this.simulation.tick(iterations);\n    return this.getResult();\n  }\n  restart() {\n    this.simulation.restart();\n  }\n  setFixedPosition(id, position) {\n    const node = this.context.nodes.find(n => n.id === id);\n    if (!node) return;\n    position.forEach((value, index) => {\n      if (typeof value === 'number' || value === null) {\n        const key = ['fx', 'fy', 'fz'][index];\n        node[key] = value;\n      }\n    });\n  }\n  getOptions(options) {\n    var _a, _b;\n    const _ = deepMix({}, this.options, options);\n    // process nodeSize\n    if (_.collide && ((_a = _.collide) === null || _a === void 0 ? void 0 : _a.radius) === undefined) {\n      _.collide = _.collide || {};\n      // @ts-ignore\n      _.collide.radius = (_b = _.nodeSize) !== null && _b !== void 0 ? _b : 10;\n    }\n    // process iterations\n    if (_.iterations === undefined) {\n      if (_.link && _.link.iterations === undefined) {\n        _.iterations = _.link.iterations;\n      }\n      if (_.collide && _.collide.iterations === undefined) {\n        _.iterations = _.collide.iterations;\n      }\n    }\n    // assign to context\n    this.context.options = _;\n    return _;\n  }\n  genericLayout(assign, graph, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const _options = this.getOptions(options);\n      const nodes = graph.getAllNodes().map(({\n        id,\n        data\n      }) => Object.assign(Object.assign({\n        id\n      }, data), pick(data.data, this.config.inputNodeAttrs)));\n      const edges = graph.getAllEdges().map(edge => Object.assign({}, edge));\n      Object.assign(this.context, {\n        assign,\n        nodes,\n        edges,\n        graph\n      });\n      const promise = new Promise(resolver => {\n        this.resolver = resolver;\n      });\n      const simulation = this.setSimulation(_options);\n      simulation.nodes(nodes);\n      (_a = simulation.force('link')) === null || _a === void 0 ? void 0 : _a.links(edges);\n      return promise;\n    });\n  }\n  getResult() {\n    const {\n      assign,\n      nodes,\n      edges,\n      graph\n    } = this.context;\n    const nodesResult = nodes.map(node => ({\n      id: node.id,\n      data: Object.assign(Object.assign({}, node.data), pick(node, this.config.outputNodeAttrs))\n    }));\n    const edgeResult = edges.map(({\n      id,\n      source,\n      target,\n      data\n    }) => ({\n      id,\n      source: typeof source === 'object' ? source.id : source,\n      target: typeof target === 'object' ? target.id : target,\n      data\n    }));\n    if (assign) {\n      nodesResult.forEach(node => graph.mergeNodeData(node.id, node.data));\n    }\n    return {\n      nodes: nodesResult,\n      edges: edgeResult\n    };\n  }\n  initSimulation() {\n    return forceSimulation();\n  }\n  setSimulation(options) {\n    const simulation = this.simulation || this.options.forceSimulation || this.initSimulation();\n    if (!this.simulation) {\n      this.simulation = simulation.on('tick', () => {\n        var _a;\n        return (_a = options.onTick) === null || _a === void 0 ? void 0 : _a.call(options, this.getResult());\n      }).on('end', () => {\n        var _a;\n        return (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.call(this, this.getResult());\n      });\n    }\n    apply(simulation, this.config.simulationAttrs.map(name => [name, options[name]]));\n    Object.entries(this.forceMap).forEach(([name, Ctor]) => {\n      const forceName = name;\n      if (options[name]) {\n        let force = simulation.force(forceName);\n        if (!force) {\n          force = Ctor();\n          simulation.force(forceName, force);\n        }\n        apply(force, Object.entries(options[forceName]));\n      } else simulation.force(forceName, null);\n    });\n    return simulation;\n  }\n}\nconst apply = (target, params) => {\n  return params.reduce((acc, [method, param]) => {\n    if (!acc[method] || param === undefined) return acc;\n    return acc[method].call(target, param);\n  }, target);\n};","map":{"version":3,"names":["deepMix","pick","forceCenter","forceCollide","forceLink","forceManyBody","forceRadial","forceSimulation","forceX","forceY","D3ForceLayout","constructor","options","id","config","inputNodeAttrs","outputNodeAttrs","simulationAttrs","forceMap","link","manyBody","center","collide","radial","x","y","edge","context","assign","nodes","edges","simulation","execute","graph","genericLayout","stop","tick","iterations","getResult","restart","setFixedPosition","position","node","find","n","forEach","value","index","key","getOptions","_","_a","radius","undefined","_b","nodeSize","_options","getAllNodes","map","data","Object","getAllEdges","promise","Promise","resolver","setSimulation","force","links","nodesResult","edgeResult","source","target","mergeNodeData","initSimulation","on","onTick","call","apply","name","entries","Ctor","forceName","params","reduce","acc","method","param"],"sources":["../../src/d3-force/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}