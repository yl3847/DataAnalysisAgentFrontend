{"ast":null,"code":"import each from './each';\nimport isArray from './is-array';\nimport isPlainObject from './is-plain-object';\nvar reduce = function (arr, fn, init) {\n  if (!isArray(arr) && !isPlainObject(arr)) {\n    return arr;\n  }\n  var result = init;\n  each(arr, function (data, i) {\n    result = fn(result, data, i);\n  });\n  return result;\n};\nexport default reduce;","map":{"version":3,"names":["each","isArray","isPlainObject","reduce","arr","fn","init","result","data","i"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/node_modules/@antv/util/src/reduce.ts"],"sourcesContent":["import each from './each';\nimport isArray from './is-array';\nimport isPlainObject from './is-plain-object';\nimport { ObjectType } from './types';\n\nconst reduce = function<T, G>(arr: G[]|ObjectType<T>, fn: (result: T, data: G, idx: string | number) => T, init: T) {\n  if (!isArray(arr) && !isPlainObject(arr)) {\n    return arr;\n  }\n  let result = init;\n  each(arr, (data, i) => {\n    result = fn(result, data, i);\n  });\n  return result;\n};\n\nexport default reduce;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,aAAa,MAAM,mBAAmB;AAG7C,IAAMC,MAAM,GAAG,SAAAA,CAAeC,GAAsB,EAAEC,EAAmD,EAAEC,IAAO;EAChH,IAAI,CAACL,OAAO,CAACG,GAAG,CAAC,IAAI,CAACF,aAAa,CAACE,GAAG,CAAC,EAAE;IACxC,OAAOA,GAAG;;EAEZ,IAAIG,MAAM,GAAGD,IAAI;EACjBN,IAAI,CAACI,GAAG,EAAE,UAACI,IAAI,EAAEC,CAAC;IAChBF,MAAM,GAAGF,EAAE,CAACE,MAAM,EAAEC,IAAI,EAAEC,CAAC,CAAC;EAC9B,CAAC,CAAC;EACF,OAAOF,MAAM;AACf,CAAC;AAED,eAAeJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}