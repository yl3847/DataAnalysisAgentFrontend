{"ast":null,"code":"import { deepMix } from '@antv/util';\nimport { inferredColumn, constant } from './utils/helper';\n/**\n * Add zero constant encode for y1 channel.\n */\nexport const MaybeZeroY1 = () => {\n  return (I, mark) => {\n    const {\n      encode\n    } = mark;\n    const {\n      y1\n    } = encode;\n    if (y1 !== undefined) return [I, mark];\n    return [I, deepMix({}, mark, {\n      encode: {\n        y1: inferredColumn(constant(I, 0))\n      }\n    })];\n  };\n};\nMaybeZeroY1.props = {};","map":{"version":3,"names":["deepMix","inferredColumn","constant","MaybeZeroY1","I","mark","encode","y1","undefined","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/transform/maybeZeroY1.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { TransformComponent as TC } from '../runtime';\nimport { inferredColumn, constant } from './utils/helper';\n\nexport type MaybeZeroY1Options = Record<string, never>;\n\n/**\n * Add zero constant encode for y1 channel.\n */\nexport const MaybeZeroY1: TC<MaybeZeroY1Options> = () => {\n  return (I, mark) => {\n    const { encode } = mark;\n    const { y1 } = encode;\n    if (y1 !== undefined) return [I, mark];\n    return [\n      I,\n      deepMix({}, mark, {\n        encode: { y1: inferredColumn(constant(I, 0)) },\n      }),\n    ];\n  };\n};\n\nMaybeZeroY1.props = {};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AAEpC,SAASC,cAAc,EAAEC,QAAQ,QAAQ,gBAAgB;AAIzD;;;AAGA,OAAO,MAAMC,WAAW,GAA2BA,CAAA,KAAK;EACtD,OAAO,CAACC,CAAC,EAAEC,IAAI,KAAI;IACjB,MAAM;MAAEC;IAAM,CAAE,GAAGD,IAAI;IACvB,MAAM;MAAEE;IAAE,CAAE,GAAGD,MAAM;IACrB,IAAIC,EAAE,KAAKC,SAAS,EAAE,OAAO,CAACJ,CAAC,EAAEC,IAAI,CAAC;IACtC,OAAO,CACLD,CAAC,EACDJ,OAAO,CAAC,EAAE,EAAEK,IAAI,EAAE;MAChBC,MAAM,EAAE;QAAEC,EAAE,EAAEN,cAAc,CAACC,QAAQ,CAACE,CAAC,EAAE,CAAC,CAAC;MAAC;KAC7C,CAAC,CACH;EACH,CAAC;AACH,CAAC;AAEDD,WAAW,CAACM,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}