{"ast":null,"code":"import { flow, transformOptions, assign, isNumber, divide, ceil, get } from '../../utils';\nimport { mark } from '../../adaptor';\n/**\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  var transformHistogramConfig = function (params) {\n    var options = params.options;\n    var data = options.data,\n      binNumber = options.binNumber,\n      binWidth = options.binWidth,\n      children = options.children,\n      _a = options.channel,\n      channel = _a === void 0 ? 'count' : _a;\n    var targetTransform = get(children, '[0].transform[0]', {});\n    if (isNumber(binWidth)) {\n      assign(targetTransform, {\n        thresholds: ceil(divide(data.length, binWidth)),\n        y: channel\n      });\n      return params;\n    }\n    if (isNumber(binNumber)) {\n      assign(targetTransform, {\n        thresholds: binNumber,\n        y: channel\n      });\n      return params;\n    }\n    return params;\n  };\n  return flow(transformHistogramConfig, mark, transformOptions)(params);\n}","map":{"version":3,"names":["flow","transformOptions","assign","isNumber","divide","ceil","get","mark","adaptor","params","transformHistogramConfig","options","data","binNumber","binWidth","children","_a","channel","targetTransform","thresholds","length","y"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/plots/es/core/plots/histogram/adaptor.js"],"sourcesContent":["import { flow, transformOptions, assign, isNumber, divide, ceil, get } from '../../utils';\nimport { mark } from '../../adaptor';\n/**\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n    var transformHistogramConfig = function (params) {\n        var options = params.options;\n        var data = options.data, binNumber = options.binNumber, binWidth = options.binWidth, children = options.children, _a = options.channel, channel = _a === void 0 ? 'count' : _a;\n        var targetTransform = get(children, '[0].transform[0]', {});\n        if (isNumber(binWidth)) {\n            assign(targetTransform, { thresholds: ceil(divide(data.length, binWidth)), y: channel });\n            return params;\n        }\n        if (isNumber(binNumber)) {\n            assign(targetTransform, { thresholds: binNumber, y: channel });\n            return params;\n        }\n        return params;\n    };\n    return flow(transformHistogramConfig, mark, transformOptions)(params);\n}\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,GAAG,QAAQ,aAAa;AACzF,SAASC,IAAI,QAAQ,eAAe;AACpC;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,MAAM,EAAE;EAC5B,IAAIC,wBAAwB,GAAG,SAAAA,CAAUD,MAAM,EAAE;IAC7C,IAAIE,OAAO,GAAGF,MAAM,CAACE,OAAO;IAC5B,IAAIC,IAAI,GAAGD,OAAO,CAACC,IAAI;MAAEC,SAAS,GAAGF,OAAO,CAACE,SAAS;MAAEC,QAAQ,GAAGH,OAAO,CAACG,QAAQ;MAAEC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;MAAEC,EAAE,GAAGL,OAAO,CAACM,OAAO;MAAEA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,EAAE;IAC9K,IAAIE,eAAe,GAAGZ,GAAG,CAACS,QAAQ,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC3D,IAAIZ,QAAQ,CAACW,QAAQ,CAAC,EAAE;MACpBZ,MAAM,CAACgB,eAAe,EAAE;QAAEC,UAAU,EAAEd,IAAI,CAACD,MAAM,CAACQ,IAAI,CAACQ,MAAM,EAAEN,QAAQ,CAAC,CAAC;QAAEO,CAAC,EAAEJ;MAAQ,CAAC,CAAC;MACxF,OAAOR,MAAM;IACjB;IACA,IAAIN,QAAQ,CAACU,SAAS,CAAC,EAAE;MACrBX,MAAM,CAACgB,eAAe,EAAE;QAAEC,UAAU,EAAEN,SAAS;QAAEQ,CAAC,EAAEJ;MAAQ,CAAC,CAAC;MAC9D,OAAOR,MAAM;IACjB;IACA,OAAOA,MAAM;EACjB,CAAC;EACD,OAAOT,IAAI,CAACU,wBAAwB,EAAEH,IAAI,EAAEN,gBAAgB,CAAC,CAACQ,MAAM,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}