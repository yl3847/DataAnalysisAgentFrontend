{"ast":null,"code":"import { getBBoxHeight, getBBoxWidth, getNodeBBox } from '../../utils/bbox';\nimport { getPolylineLoopPath, getPolylinePath } from '../../utils/edge';\nimport { subStyleProps } from '../../utils/prefix';\nimport { orth } from '../../utils/router/orth';\nimport { aStarSearch } from '../../utils/router/shortest-path';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseEdge } from './base-edge';\n/**\n * <zh/> 折线\n *\n * <en/> Polyline\n */\nexport class Polyline extends BaseEdge {\n  constructor(options) {\n    super(mergeOptions({\n      style: Polyline.defaultStyleProps\n    }, options));\n  }\n  getControlPoints(attributes) {\n    const {\n      router\n    } = attributes;\n    const {\n      sourceNode,\n      targetNode\n    } = this;\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes, false);\n    let controlPoints = [];\n    if (!router) {\n      controlPoints = attributes.controlPoints;\n    } else {\n      if (router.type === 'shortest-path') {\n        const nodes = this.context.element.getNodes();\n        controlPoints = aStarSearch(sourceNode, targetNode, nodes, router);\n        if (!controlPoints.length) {\n          controlPoints = orth(sourcePoint, targetPoint, sourceNode, targetNode, attributes.controlPoints, {\n            padding: router.offset\n          });\n        }\n      } else if (router.type === 'orth') {\n        controlPoints = orth(sourcePoint, targetPoint, sourceNode, targetNode, attributes.controlPoints, router);\n      }\n    }\n    return controlPoints;\n  }\n  getPoints(attributes) {\n    const controlPoints = this.getControlPoints(attributes);\n    const [newSourcePoint, newTargetPoint] = this.getEndpoints(attributes, true, controlPoints);\n    return [newSourcePoint, ...controlPoints, newTargetPoint];\n  }\n  getKeyPath(attributes) {\n    const points = this.getPoints(attributes);\n    return getPolylinePath(points, attributes.radius);\n  }\n  getLoopPath(attributes) {\n    const {\n      sourcePort: sourcePortKey,\n      targetPort: targetPortKey,\n      radius\n    } = attributes;\n    const node = this.sourceNode;\n    const bbox = getNodeBBox(node);\n    // 默认转折点距离为 bbox 的最大宽高的 1/4\n    // Default distance of the turning point is 1/4 of the maximum width and height of the bbox\n    const defaultDist = Math.max(getBBoxWidth(bbox), getBBoxHeight(bbox)) / 4;\n    const {\n      placement,\n      clockwise,\n      dist = defaultDist\n    } = subStyleProps(this.getGraphicStyle(attributes), 'loop');\n    return getPolylineLoopPath(node, radius, placement, clockwise, dist, sourcePortKey, targetPortKey);\n  }\n}\nPolyline.defaultStyleProps = {\n  radius: 0,\n  controlPoints: [],\n  router: false\n};","map":{"version":3,"names":["getBBoxHeight","getBBoxWidth","getNodeBBox","getPolylineLoopPath","getPolylinePath","subStyleProps","orth","aStarSearch","mergeOptions","BaseEdge","Polyline","constructor","options","style","defaultStyleProps","getControlPoints","attributes","router","sourceNode","targetNode","sourcePoint","targetPoint","getEndpoints","controlPoints","type","nodes","context","element","getNodes","length","padding","offset","getPoints","newSourcePoint","newTargetPoint","getKeyPath","points","radius","getLoopPath","sourcePort","sourcePortKey","targetPort","targetPortKey","node","bbox","defaultDist","Math","max","placement","clockwise","dist","getGraphicStyle"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/edges/polyline.ts"],"sourcesContent":["import type { DisplayObjectConfig } from '@antv/g';\nimport type { PathArray } from '@antv/util';\nimport type { LoopStyleProps, Point, PolylineRouter } from '../../types';\nimport { getBBoxHeight, getBBoxWidth, getNodeBBox } from '../../utils/bbox';\nimport { getPolylineLoopPath, getPolylinePath } from '../../utils/edge';\nimport { subStyleProps } from '../../utils/prefix';\nimport { orth } from '../../utils/router/orth';\nimport { aStarSearch } from '../../utils/router/shortest-path';\nimport { mergeOptions } from '../../utils/style';\nimport type { BaseEdgeStyleProps } from './base-edge';\nimport { BaseEdge } from './base-edge';\n\n/**\n * <zh/> 折线样式配置项\n *\n * <en/> Polyline style properties\n */\nexport interface PolylineStyleProps extends BaseEdgeStyleProps {\n  /**\n   * <zh/> 圆角半径\n   *\n   * <en/> The radius of the rounded corner\n   * @defaultValue 0\n   */\n  radius?: number;\n  /**\n   * <zh/> 控制点数组\n   *\n   * <en/> Control point array\n   */\n  controlPoints?: Point[];\n  /**\n   * <zh/> 是否启用路由，默认开启且 controlPoints 会自动计入\n   *\n   * <en/> Whether to enable routing, it is enabled by default and controlPoints will be automatically included\n   * @defaultValue false\n   */\n  router?: PolylineRouter;\n}\n\ntype ParsedPolylineStyleProps = Required<PolylineStyleProps>;\n\n/**\n * <zh/> 折线\n *\n * <en/> Polyline\n */\nexport class Polyline extends BaseEdge {\n  static defaultStyleProps: Partial<PolylineStyleProps> = {\n    radius: 0,\n    controlPoints: [],\n    router: false,\n  };\n\n  constructor(options: DisplayObjectConfig<PolylineStyleProps>) {\n    super(mergeOptions({ style: Polyline.defaultStyleProps }, options));\n  }\n\n  protected getControlPoints(attributes: ParsedPolylineStyleProps): Point[] {\n    const { router } = attributes;\n    const { sourceNode, targetNode } = this;\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes, false);\n\n    let controlPoints: Point[] = [];\n\n    if (!router) {\n      controlPoints = attributes.controlPoints;\n    } else {\n      if (router.type === 'shortest-path') {\n        const nodes = this.context.element!.getNodes();\n        controlPoints = aStarSearch(sourceNode, targetNode, nodes, router);\n\n        if (!controlPoints.length) {\n          controlPoints = orth(sourcePoint, targetPoint, sourceNode, targetNode, attributes.controlPoints, {\n            padding: router.offset,\n          });\n        }\n      } else if (router.type === 'orth') {\n        controlPoints = orth(sourcePoint, targetPoint, sourceNode, targetNode, attributes.controlPoints, router);\n      }\n    }\n\n    return controlPoints;\n  }\n\n  protected getPoints(attributes: ParsedPolylineStyleProps): Point[] {\n    const controlPoints = this.getControlPoints(attributes);\n\n    const [newSourcePoint, newTargetPoint] = this.getEndpoints(attributes, true, controlPoints);\n    return [newSourcePoint, ...controlPoints, newTargetPoint];\n  }\n\n  protected getKeyPath(attributes: ParsedPolylineStyleProps): PathArray {\n    const points = this.getPoints(attributes);\n\n    return getPolylinePath(points, attributes.radius);\n  }\n\n  protected getLoopPath(attributes: ParsedPolylineStyleProps): PathArray {\n    const { sourcePort: sourcePortKey, targetPort: targetPortKey, radius } = attributes;\n    const node = this.sourceNode;\n\n    const bbox = getNodeBBox(node);\n    // 默认转折点距离为 bbox 的最大宽高的 1/4\n    // Default distance of the turning point is 1/4 of the maximum width and height of the bbox\n    const defaultDist = Math.max(getBBoxWidth(bbox), getBBoxHeight(bbox)) / 4;\n\n    const {\n      placement,\n      clockwise,\n      dist = defaultDist,\n    } = subStyleProps<Required<LoopStyleProps>>(this.getGraphicStyle(attributes), 'loop');\n\n    return getPolylineLoopPath(node, radius, placement, clockwise, dist, sourcePortKey, targetPortKey);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}