{"ast":null,"code":"import { measureTextWidth } from '@ant-design/charts-util';\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { darkenHexColor, hexToRgba } from '../../utils/color';\nconst StyledWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow-wrap: anywhere;\n  line-height: 1.5em;\n  text-align: center;\n  height: inherit;\n  width: inherit;\n  box-sizing: content-box;\n  font-size: 14px;\n\n  ${({\n  $type,\n  $color,\n  $borderWidth\n}) => {\n  switch ($type) {\n    case 'normal':\n      return `\n          color: ${$color};\n        `;\n    case 'filled':\n      return css`\n          color: #fff;\n          background-color: ${$color};\n          border-radius: 8px;\n        `;\n    case 'outlined':\n      return css`\n          height: calc(100% - 2 * ${$borderWidth}px);\n          width: calc(100% - 2 * ${$borderWidth}px);\n          color: ${$color};\n          background-color: #fff;\n          border: ${$borderWidth}px solid ${$color};\n          border-radius: 8px;\n        `;\n    case 'underlined':\n      return css`\n          height: calc(100% - ${$borderWidth}px / 2);\n          width: inherit;\n          border-bottom: ${$borderWidth}px solid ${$color};\n          background-color: #fff;\n          color: ${$color};\n        `;\n  }\n}}\n\n  ${({\n  $isActive,\n  $isSelected,\n  $borderWidth,\n  $color\n}) => ($isActive || $isSelected) && css`\n      height: calc(100% - 2 * ${$borderWidth}px);\n      width: calc(100% - 2 * ${$borderWidth}px);\n      border: ${$borderWidth}px solid ${darkenHexColor($color, 100)};\n      ${$isSelected && `box-shadow: 0 0 0 2px ${hexToRgba($color, 0.1)};`}\n    `}\n`;\nexport const TextNode = props => {\n  const {\n    className,\n    style = {},\n    type = 'normal',\n    text = '',\n    font,\n    color = '#1783ff',\n    borderWidth = 3,\n    maxWidth = Infinity,\n    isActive = false,\n    isSelected = false\n  } = props;\n  const isMultiLine = measureTextWidth(text, font) > maxWidth;\n  return React.createElement(StyledWrapper, {\n    \"$type\": type,\n    \"$color\": color,\n    \"$borderWidth\": borderWidth,\n    \"$isActive\": isActive,\n    \"$isSelected\": isSelected,\n    className: `text-node text-node-${type} ${className || ''}`,\n    style: {\n      ...style,\n      ...font\n    }\n  }, React.createElement(\"div\", {\n    style: isMultiLine ? {\n      width: 'calc(100% - 12px)'\n    } : {}\n  }, text));\n};","map":{"version":3,"names":["measureTextWidth","React","styled","css","darkenHexColor","hexToRgba","StyledWrapper","div","$type","$color","$borderWidth","$isActive","$isSelected","TextNode","props","className","style","type","text","font","color","borderWidth","maxWidth","Infinity","isActive","isSelected","isMultiLine","createElement","width"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/graphs/es/core/base/node/text-node.js"],"sourcesContent":["import { measureTextWidth } from '@ant-design/charts-util';\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { darkenHexColor, hexToRgba } from '../../utils/color';\nconst StyledWrapper = styled.div `\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow-wrap: anywhere;\n  line-height: 1.5em;\n  text-align: center;\n  height: inherit;\n  width: inherit;\n  box-sizing: content-box;\n  font-size: 14px;\n\n  ${({ $type, $color, $borderWidth }) => {\n    switch ($type) {\n        case 'normal':\n            return `\n          color: ${$color};\n        `;\n        case 'filled':\n            return css `\n          color: #fff;\n          background-color: ${$color};\n          border-radius: 8px;\n        `;\n        case 'outlined':\n            return css `\n          height: calc(100% - 2 * ${$borderWidth}px);\n          width: calc(100% - 2 * ${$borderWidth}px);\n          color: ${$color};\n          background-color: #fff;\n          border: ${$borderWidth}px solid ${$color};\n          border-radius: 8px;\n        `;\n        case 'underlined':\n            return css `\n          height: calc(100% - ${$borderWidth}px / 2);\n          width: inherit;\n          border-bottom: ${$borderWidth}px solid ${$color};\n          background-color: #fff;\n          color: ${$color};\n        `;\n    }\n}}\n\n  ${({ $isActive, $isSelected, $borderWidth, $color }) => ($isActive || $isSelected) &&\n    css `\n      height: calc(100% - 2 * ${$borderWidth}px);\n      width: calc(100% - 2 * ${$borderWidth}px);\n      border: ${$borderWidth}px solid ${darkenHexColor($color, 100)};\n      ${$isSelected && `box-shadow: 0 0 0 2px ${hexToRgba($color, 0.1)};`}\n    `}\n`;\nexport const TextNode = (props) => {\n    const { className, style = {}, type = 'normal', text = '', font, color = '#1783ff', borderWidth = 3, maxWidth = Infinity, isActive = false, isSelected = false, } = props;\n    const isMultiLine = measureTextWidth(text, font) > maxWidth;\n    return (React.createElement(StyledWrapper, { \"$type\": type, \"$color\": color, \"$borderWidth\": borderWidth, \"$isActive\": isActive, \"$isSelected\": isSelected, className: `text-node text-node-${type} ${className || ''}`, style: { ...style, ...font } },\n        React.createElement(\"div\", { style: isMultiLine ? { width: 'calc(100% - 12px)' } : {} }, text)));\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,IAAIC,GAAG,QAAQ,mBAAmB;AAC/C,SAASC,cAAc,EAAEC,SAAS,QAAQ,mBAAmB;AAC7D,MAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC;EAAEC,KAAK;EAAEC,MAAM;EAAEC;AAAa,CAAC,KAAK;EACrC,QAAQF,KAAK;IACT,KAAK,QAAQ;MACT,OAAO;AACnB,mBAAmBC,MAAM;AACzB,SAAS;IACD,KAAK,QAAQ;MACT,OAAON,GAAI;AACvB;AACA,8BAA8BM,MAAM;AACpC;AACA,SAAS;IACD,KAAK,UAAU;MACX,OAAON,GAAI;AACvB,oCAAoCO,YAAY;AAChD,mCAAmCA,YAAY;AAC/C,mBAAmBD,MAAM;AACzB;AACA,oBAAoBC,YAAY,YAAYD,MAAM;AAClD;AACA,SAAS;IACD,KAAK,YAAY;MACb,OAAON,GAAI;AACvB,gCAAgCO,YAAY;AAC5C;AACA,2BAA2BA,YAAY,YAAYD,MAAM;AACzD;AACA,mBAAmBA,MAAM;AACzB,SAAS;EACL;AACJ,CAAC;AACD;AACA,IAAI,CAAC;EAAEE,SAAS;EAAEC,WAAW;EAAEF,YAAY;EAAED;AAAO,CAAC,KAAK,CAACE,SAAS,IAAIC,WAAW,KAC/ET,GAAI;AACR,gCAAgCO,YAAY;AAC5C,+BAA+BA,YAAY;AAC3C,gBAAgBA,YAAY,YAAYN,cAAc,CAACK,MAAM,EAAE,GAAG,CAAC;AACnE,QAAQG,WAAW,IAAI,yBAAyBP,SAAS,CAACI,MAAM,EAAE,GAAG,CAAC,GAAG;AACzE,KAAK;AACL,CAAC;AACD,OAAO,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAC/B,MAAM;IAAEC,SAAS;IAAEC,KAAK,GAAG,CAAC,CAAC;IAAEC,IAAI,GAAG,QAAQ;IAAEC,IAAI,GAAG,EAAE;IAAEC,IAAI;IAAEC,KAAK,GAAG,SAAS;IAAEC,WAAW,GAAG,CAAC;IAAEC,QAAQ,GAAGC,QAAQ;IAAEC,QAAQ,GAAG,KAAK;IAAEC,UAAU,GAAG;EAAO,CAAC,GAAGX,KAAK;EACzK,MAAMY,WAAW,GAAG1B,gBAAgB,CAACkB,IAAI,EAAEC,IAAI,CAAC,GAAGG,QAAQ;EAC3D,OAAQrB,KAAK,CAAC0B,aAAa,CAACrB,aAAa,EAAE;IAAE,OAAO,EAAEW,IAAI;IAAE,QAAQ,EAAEG,KAAK;IAAE,cAAc,EAAEC,WAAW;IAAE,WAAW,EAAEG,QAAQ;IAAE,aAAa,EAAEC,UAAU;IAAEV,SAAS,EAAE,uBAAuBE,IAAI,IAAIF,SAAS,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;MAAE,GAAGA,KAAK;MAAE,GAAGG;IAAK;EAAE,CAAC,EACnPlB,KAAK,CAAC0B,aAAa,CAAC,KAAK,EAAE;IAAEX,KAAK,EAAEU,WAAW,GAAG;MAAEE,KAAK,EAAE;IAAoB,CAAC,GAAG,CAAC;EAAE,CAAC,EAAEV,IAAI,CAAC,CAAC;AACvG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}