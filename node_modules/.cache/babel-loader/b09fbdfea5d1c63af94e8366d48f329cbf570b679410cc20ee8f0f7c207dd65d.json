{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Graph as GraphCore } from '@antv/graphlib';\nimport { isFunction, isNumber, isObject } from '@antv/util';\nimport { ConcentricLayout } from './concentric';\nimport { ForceLayout } from './force';\nimport { MDSLayout } from './mds';\nimport { isLayoutWithIterations } from './types';\nimport { getLayoutBBox, graphTreeDfs, isArray } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nconst FORCE_LAYOUT_TYPE_MAP = {\n  gForce: true,\n  force2: true,\n  d3force: true,\n  fruchterman: true,\n  forceAtlas2: true,\n  force: true,\n  'graphin-force': true\n};\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  center: [0, 0],\n  comboPadding: 10,\n  treeKey: 'combo'\n};\n/**\n * <zh/> 组合布局\n *\n * <en/> Combo-Combined layout\n */\nexport class ComboCombinedLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'comboCombined';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericComboCombinedLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericComboCombinedLayout(true, graph, options);\n    });\n  }\n  genericComboCombinedLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = this.initVals(Object.assign(Object.assign({}, this.options), options));\n      const {\n        center,\n        treeKey,\n        outerLayout: propsOuterLayout\n      } = mergedOptions;\n      const nodes = graph.getAllNodes().filter(node => !node.data._isCombo);\n      const combos = graph.getAllNodes().filter(node => node.data._isCombo);\n      const edges = graph.getAllEdges();\n      const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n      if (!n || n === 1) {\n        return handleSingleNodeGraph(graph, assign, center);\n      }\n      // output nodes\n      const layoutNodes = [];\n      const nodeMap = new Map();\n      nodes.forEach(node => {\n        nodeMap.set(node.id, node);\n      });\n      const comboMap = new Map();\n      combos.forEach(combo => {\n        comboMap.set(combo.id, combo);\n      });\n      // each one in comboNodes is a combo contains the size and child nodes\n      // comboNodes includes the node who has no parent combo\n      const comboNodes = new Map();\n      // the inner layouts, the result positions are stored in comboNodes and their child nodes\n      const innerGraphLayoutPromises = this.getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, mergedOptions, comboNodes);\n      yield Promise.all(innerGraphLayoutPromises);\n      const outerNodeIds = new Map();\n      const outerLayoutNodes = [];\n      const nodeAncestorIdMap = new Map();\n      let allHaveNoPosition = true;\n      graph.getRoots(treeKey).forEach(root => {\n        const combo = comboNodes.get(root.id);\n        const cacheCombo = comboMap.get(root.id) || nodeMap.get(root.id);\n        const comboLayoutNode = {\n          id: root.id,\n          data: Object.assign(Object.assign({}, root.data), {\n            x: combo.data.x || cacheCombo.data.x,\n            y: combo.data.y || cacheCombo.data.y,\n            fx: combo.data.fx || cacheCombo.data.fx,\n            fy: combo.data.fy || cacheCombo.data.fy,\n            mass: combo.data.mass || cacheCombo.data.mass,\n            size: combo.data.size\n          })\n        };\n        outerLayoutNodes.push(comboLayoutNode);\n        outerNodeIds.set(root.id, true);\n        if (!isNaN(comboLayoutNode.data.x) && comboLayoutNode.data.x !== 0 && !isNaN(comboLayoutNode.data.y) && comboLayoutNode.data.y !== 0) {\n          allHaveNoPosition = false;\n        } else {\n          comboLayoutNode.data.x = Math.random() * 100;\n          comboLayoutNode.data.y = Math.random() * 100;\n        }\n        graphTreeDfs(graph, [root], child => {\n          if (child.id !== root.id) nodeAncestorIdMap.set(child.id, root.id);\n        }, 'TB', treeKey);\n      });\n      const outerLayoutEdges = [];\n      edges.forEach(edge => {\n        const sourceAncestorId = nodeAncestorIdMap.get(edge.source) || edge.source;\n        const targetAncestorId = nodeAncestorIdMap.get(edge.target) || edge.target;\n        // create an edge for outer layout if both source and target's ancestor combo is in outer layout nodes\n        if (sourceAncestorId !== targetAncestorId && outerNodeIds.has(sourceAncestorId) && outerNodeIds.has(targetAncestorId)) {\n          outerLayoutEdges.push({\n            id: edge.id,\n            source: sourceAncestorId,\n            target: targetAncestorId,\n            data: {}\n          });\n        }\n      });\n      // 若有需要最外层的 combo 或节点，则对最外层执行力导向\n      let outerPositions;\n      if (outerLayoutNodes === null || outerLayoutNodes === void 0 ? void 0 : outerLayoutNodes.length) {\n        if (outerLayoutNodes.length === 1) {\n          outerLayoutNodes[0].data.x = center[0];\n          outerLayoutNodes[0].data.y = center[1];\n        } else {\n          const outerLayoutGraph = new GraphCore({\n            nodes: outerLayoutNodes,\n            edges: outerLayoutEdges\n          });\n          const outerLayout = propsOuterLayout || new ForceLayout();\n          // preset the nodes if the outerLayout is a force family layout\n          if (allHaveNoPosition && FORCE_LAYOUT_TYPE_MAP[outerLayout.id]) {\n            const outerLayoutPreset = outerLayoutNodes.length < 100 ? new MDSLayout() : new ConcentricLayout();\n            yield outerLayoutPreset.assign(outerLayoutGraph);\n          }\n          const options = Object.assign({\n            center,\n            kg: 5,\n            preventOverlap: true,\n            animate: false\n          }, outerLayout.id === 'force' ? {\n            gravity: 1,\n            factor: 4,\n            linkDistance: (edge, source, target) => {\n              const sourceSize = Math.max(...source.data.size) || 32;\n              const targetSize = Math.max(...target.data.size) || 32;\n              return sourceSize / 2 + targetSize / 2 + 200;\n            }\n          } : {});\n          outerPositions = yield executeLayout(outerLayout, outerLayoutGraph, options);\n        }\n        // move the combos and their child nodes\n        comboNodes.forEach(comboNode => {\n          var _a;\n          const outerPosition = outerPositions.nodes.find(pos => pos.id === comboNode.id);\n          if (outerPosition) {\n            // if it is one of the outer layout nodes, update the positions\n            const {\n              x,\n              y\n            } = outerPosition.data;\n            comboNode.data.visited = true;\n            comboNode.data.x = x;\n            comboNode.data.y = y;\n            layoutNodes.push({\n              id: comboNode.id,\n              data: {\n                x,\n                y\n              }\n            });\n          }\n          // move the child nodes\n          const {\n            x,\n            y\n          } = comboNode.data;\n          (_a = comboNode.data.nodes) === null || _a === void 0 ? void 0 : _a.forEach(node => {\n            layoutNodes.push({\n              id: node.id,\n              data: {\n                x: node.data.x + x,\n                y: node.data.y + y\n              }\n            });\n          });\n        });\n        // move the nodes from top to bottom\n        comboNodes.forEach(({\n          data\n        }) => {\n          const {\n            x,\n            y,\n            visited,\n            nodes\n          } = data;\n          nodes === null || nodes === void 0 ? void 0 : nodes.forEach(node => {\n            if (!visited) {\n              const layoutNode = layoutNodes.find(n => n.id === node.id);\n              layoutNode.data.x += x || 0;\n              layoutNode.data.y += y || 0;\n            }\n          });\n        });\n      }\n      if (assign) {\n        layoutNodes.forEach(node => {\n          graph.mergeNodeData(node.id, {\n            x: node.data.x,\n            y: node.data.y\n          });\n        });\n      }\n      const result = {\n        nodes: layoutNodes,\n        edges\n      };\n      return result;\n    });\n  }\n  initVals(options) {\n    const formattedOptions = Object.assign({}, options);\n    const {\n      nodeSize,\n      spacing,\n      comboPadding\n    } = options;\n    let nodeSizeFunc;\n    let spacingFunc;\n    // nodeSpacing to function\n    if (isNumber(spacing)) {\n      spacingFunc = () => spacing;\n    } else if (isFunction(spacing)) {\n      spacingFunc = spacing;\n    } else {\n      spacingFunc = () => 0;\n    }\n    formattedOptions.spacing = spacingFunc;\n    // nodeSize to function\n    if (!nodeSize) {\n      nodeSizeFunc = d => {\n        const spacing = spacingFunc(d);\n        if (d.size) {\n          if (isArray(d.size)) {\n            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return (res + spacing) / 2;\n          }\n          if (isObject(d.size)) {\n            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n            return (res + spacing) / 2;\n          }\n          return (d.size + spacing) / 2;\n        }\n        return 32 + spacing / 2;\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = d => {\n        const size = nodeSize(d);\n        const spacing = spacingFunc(d);\n        if (isArray(d.size)) {\n          const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n          return (res + spacing) / 2;\n        }\n        return ((size || 32) + spacing) / 2;\n      };\n    } else if (isArray(nodeSize)) {\n      const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      const radius = larger / 2;\n      nodeSizeFunc = d => radius + spacingFunc(d) / 2;\n    } else {\n      // number type\n      const radius = nodeSize / 2;\n      nodeSizeFunc = d => radius + spacingFunc(d) / 2;\n    }\n    formattedOptions.nodeSize = nodeSizeFunc;\n    // comboPadding to function\n    let comboPaddingFunc;\n    if (isNumber(comboPadding)) {\n      comboPaddingFunc = () => comboPadding;\n    } else if (isArray(comboPadding)) {\n      comboPaddingFunc = () => Math.max.apply(null, comboPadding);\n    } else if (isFunction(comboPadding)) {\n      comboPaddingFunc = comboPadding;\n    } else {\n      // null type\n      comboPaddingFunc = () => 0;\n    }\n    formattedOptions.comboPadding = comboPaddingFunc;\n    return formattedOptions;\n  }\n  getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, options, comboNodes) {\n    const {\n      nodeSize,\n      comboPadding,\n      spacing,\n      innerLayout\n    } = options;\n    const innerGraphLayout = innerLayout || new ConcentricLayout({});\n    const innerLayoutOptions = {\n      center: [0, 0],\n      preventOverlap: true,\n      nodeSpacing: spacing\n    };\n    const innerLayoutPromises = [];\n    const getSize = node => {\n      // @ts-ignore\n      let padding = (comboPadding === null || comboPadding === void 0 ? void 0 : comboPadding(node)) || 10;\n      if (isArray(padding)) padding = Math.max(...padding);\n      return {\n        size: padding ? [padding * 2, padding * 2] : [30, 30],\n        padding\n      };\n    };\n    graph.getRoots(treeKey).forEach(root => {\n      // @ts-ignore\n      comboNodes.set(root.id, {\n        id: root.id,\n        data: {\n          nodes: [],\n          size: getSize(root).size\n        }\n      });\n      let start = Promise.resolve();\n      // Regard the child nodes in one combo as a graph, and layout them from bottom to top\n      graphTreeDfs(graph, [root], treeNode => {\n        var _a;\n        if (!treeNode.data._isCombo) return;\n        const {\n          size: nsize,\n          padding\n        } = getSize(treeNode);\n        if (!((_a = graph.getChildren(treeNode.id, treeKey)) === null || _a === void 0 ? void 0 : _a.length)) {\n          // empty combo\n          comboNodes.set(treeNode.id, {\n            id: treeNode.id,\n            data: Object.assign(Object.assign({}, treeNode.data), {\n              size: nsize\n            })\n          });\n        } else {\n          // combo not empty\n          const comboNode = comboNodes.get(treeNode.id);\n          comboNodes.set(treeNode.id, {\n            id: treeNode.id,\n            data: Object.assign({\n              nodes: []\n            }, comboNode === null || comboNode === void 0 ? void 0 : comboNode.data)\n          });\n          const innerLayoutNodeIds = new Map();\n          const innerLayoutNodes = graph.getChildren(treeNode.id, treeKey).map(child => {\n            if (child.data._isCombo) {\n              if (!comboNodes.has(child.id)) {\n                comboNodes.set(child.id, {\n                  id: child.id,\n                  data: Object.assign({}, child.data)\n                });\n              }\n              innerLayoutNodeIds.set(child.id, true);\n              return comboNodes.get(child.id);\n            }\n            const oriNode = nodeMap.get(child.id) || comboMap.get(child.id);\n            innerLayoutNodeIds.set(child.id, true);\n            return {\n              id: child.id,\n              data: Object.assign(Object.assign({}, oriNode.data), child.data)\n            };\n          });\n          const innerGraphData = {\n            nodes: innerLayoutNodes,\n            edges: edges.filter(edge => innerLayoutNodeIds.has(edge.source) && innerLayoutNodeIds.has(edge.target))\n          };\n          let minNodeSize = Infinity;\n          innerLayoutNodes.forEach(node => {\n            var _a;\n            let {\n              size\n            } = node.data;\n            if (!size) {\n              size = ((_a = comboNodes.get(node.id)) === null || _a === void 0 ? void 0 : _a.data.size) || (nodeSize === null || nodeSize === void 0 ? void 0 : nodeSize(node)) || [30, 30];\n            }\n            if (isNumber(size)) size = [size, size];\n            const [size0, size1] = size;\n            if (minNodeSize > size0) minNodeSize = size0;\n            if (minNodeSize > size1) minNodeSize = size1;\n            node.data.size = size;\n          });\n          // innerGraphLayout.assign(innerGraphCore, innerLayoutOptions);\n          start = start.then(() => __awaiter(this, void 0, void 0, function* () {\n            const innerGraphCore = new GraphCore(innerGraphData);\n            yield executeLayout(innerGraphLayout, innerGraphCore, innerLayoutOptions, true);\n            const {\n              minX,\n              minY,\n              maxX,\n              maxY\n            } = getLayoutBBox(innerLayoutNodes);\n            // move the innerGraph to [0, 0], for later controlled by parent layout\n            const center = {\n              x: (maxX + minX) / 2,\n              y: (maxY + minY) / 2\n            };\n            innerGraphData.nodes.forEach(node => {\n              node.data.x -= center.x;\n              node.data.y -= center.y;\n            });\n            const size = [Math.max(maxX - minX, minNodeSize) + padding * 2, Math.max(maxY - minY, minNodeSize) + padding * 2];\n            comboNodes.get(treeNode.id).data.size = size;\n            comboNodes.get(treeNode.id).data.nodes = innerLayoutNodes;\n          }));\n        }\n        return true;\n      }, 'BT', treeKey);\n      innerLayoutPromises.push(start);\n    });\n    return innerLayoutPromises;\n  }\n}\nfunction executeLayout(layout, graph, options, assign) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    if (isLayoutWithIterations(layout)) {\n      layout.execute(graph, options);\n      layout.stop();\n      return layout.tick((_a = options.iterations) !== null && _a !== void 0 ? _a : 300);\n    }\n    if (assign) return yield layout.assign(graph, options);\n    return yield layout.execute(graph, options);\n  });\n}","map":{"version":3,"names":["Graph","GraphCore","isFunction","isNumber","isObject","ConcentricLayout","ForceLayout","MDSLayout","isLayoutWithIterations","getLayoutBBox","graphTreeDfs","isArray","handleSingleNodeGraph","FORCE_LAYOUT_TYPE_MAP","gForce","force2","d3force","fruchterman","forceAtlas2","force","DEFAULTS_LAYOUT_OPTIONS","center","comboPadding","treeKey","ComboCombinedLayout","constructor","options","id","Object","assign","execute","graph","genericComboCombinedLayout","mergedOptions","initVals","outerLayout","propsOuterLayout","nodes","getAllNodes","filter","node","data","_isCombo","combos","edges","getAllEdges","n","length","layoutNodes","nodeMap","Map","forEach","set","comboMap","combo","comboNodes","innerGraphLayoutPromises","getInnerGraphs","Promise","all","outerNodeIds","outerLayoutNodes","nodeAncestorIdMap","allHaveNoPosition","getRoots","root","get","cacheCombo","comboLayoutNode","x","y","fx","fy","mass","size","push","isNaN","Math","random","child","outerLayoutEdges","edge","sourceAncestorId","source","targetAncestorId","target","has","outerPositions","outerLayoutGraph","outerLayoutPreset","kg","preventOverlap","animate","gravity","factor","linkDistance","sourceSize","max","targetSize","executeLayout","comboNode","outerPosition","find","pos","visited","_a","layoutNode","mergeNodeData","result","formattedOptions","nodeSize","spacing","nodeSizeFunc","spacingFunc","d","res","width","height","larger","radius","comboPaddingFunc","apply","innerLayout","innerGraphLayout","innerLayoutOptions","nodeSpacing","innerLayoutPromises","getSize","padding","start","resolve","treeNode","nsize","getChildren","innerLayoutNodeIds","innerLayoutNodes","map","oriNode","innerGraphData","minNodeSize","Infinity","size0","size1","then","__awaiter","innerGraphCore","minX","minY","maxX","maxY","layout","stop","tick","iterations"],"sources":["../src/combo-combined.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}