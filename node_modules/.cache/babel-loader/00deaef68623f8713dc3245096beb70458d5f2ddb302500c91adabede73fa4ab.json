{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport values from './values';\nimport memoize from './memoize';\nimport isString from './is-string';\nvar ctx;\n/**\n * 计算文本的宽度\n */\nexport default memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  var fontSize = font.fontSize,\n    fontFamily = font.fontFamily,\n    fontWeight = font.fontWeight,\n    fontStyle = font.fontStyle,\n    fontVariant = font.fontVariant;\n  if (!ctx) {\n    ctx = document.createElement('canvas').getContext('2d');\n  }\n  ctx.font = [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  return __spreadArrays([text], values(font)).join('');\n});","map":{"version":3,"names":["values","memoize","isString","ctx","text","font","fontSize","fontFamily","fontWeight","fontStyle","fontVariant","document","createElement","getContext","join","measureText","width","__spreadArrays"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/node_modules/@antv/util/src/measure-text-width.ts"],"sourcesContent":["import values from './values';\nimport memoize from './memoize';\nimport isString from './is-string';\nimport type { Properties } from 'csstype';\n\nexport type Font = Pick<Properties, 'fontFamily' | 'fontWeight' | 'fontStyle' | 'fontVariant'> & {\n  fontSize?: number;\n};\n\nlet ctx: CanvasRenderingContext2D;\n\n/**\n * 计算文本的宽度\n */\nexport default memoize(\n  (text: any, font: Font = {}): number => {\n    const { fontSize, fontFamily, fontWeight, fontStyle, fontVariant } = font;\n    if (!ctx) {\n      ctx = document.createElement('canvas').getContext('2d') as CanvasRenderingContext2D;\n    }\n    ctx!.font = [fontStyle, fontVariant, fontWeight, `${fontSize}px`, fontFamily].join(' ');\n    return ctx!.measureText(isString(text) ? text : '').width;\n  },\n  (text: any, font: Font = {}) => [text, ...values(font)].join('')\n);\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,aAAa;AAOlC,IAAIC,GAA6B;AAEjC;;;AAGA,eAAeF,OAAO,CACpB,UAACG,IAAS,EAAEC,IAAe;EAAf,IAAAA,IAAA;IAAAA,IAAA,KAAe;EAAA;EACjB,IAAAC,QAAQ,GAAqDD,IAAI,CAAAC,QAAzD;IAAEC,UAAU,GAAyCF,IAAI,CAAAE,UAA7C;IAAEC,UAAU,GAA6BH,IAAI,CAAAG,UAAjC;IAAEC,SAAS,GAAkBJ,IAAI,CAAAI,SAAtB;IAAEC,WAAW,GAAKL,IAAI,CAAAK,WAAT;EAChE,IAAI,CAACP,GAAG,EAAE;IACRA,GAAG,GAAGQ,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAACC,UAAU,CAAC,IAAI,CAA6B;;EAErFV,GAAI,CAACE,IAAI,GAAG,CAACI,SAAS,EAAEC,WAAW,EAAEF,UAAU,EAAKF,QAAQ,OAAI,EAAEC,UAAU,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;EACvF,OAAOX,GAAI,CAACY,WAAW,CAACb,QAAQ,CAACE,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC,CAACY,KAAK;AAC3D,CAAC,EACD,UAACZ,IAAS,EAAEC,IAAe;EAAf,IAAAA,IAAA;IAAAA,IAAA,KAAe;EAAA;EAAK,OAAAY,cAAA,EAACb,IAAI,GAAKJ,MAAM,CAACK,IAAI,CAAC,EAAES,IAAI,CAAC,EAAE,CAAC;AAAhC,CAAgC,CACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}