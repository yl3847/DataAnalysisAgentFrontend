{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/spec/transform.ts"],"sourcesContent":["import { TransformComponent, Primitive } from '../runtime';\nimport { ChannelTypes } from './mark';\n\nexport type Transform =\n  | StackYTransform\n  | DodgeXTransform\n  | NormalizeYTransform\n  | StackEnterTransform\n  | JitterTransform\n  | JitterXTransform\n  | JitterYTransform\n  | SymmetryYTransform\n  | DiffYTransform\n  | SelectTransform\n  | SelectXTransform\n  | SelectYTransform\n  | GroupXTransform\n  | GroupYTransform\n  | GroupColorTransform\n  | SortXTransform\n  | SortYTransform\n  | SortColorTransform\n  | GroupTransform\n  | PackTransform\n  | BinXTransform\n  | BinTransform\n  | SampleTransform\n  | FlexXTransform\n  | FilterTransform;\n\nexport type TransformTypes =\n  | 'dodgeX'\n  | 'stackY'\n  | 'normalizeY'\n  | 'stackEnter'\n  | 'jitter'\n  | 'jitterX'\n  | 'jitterY'\n  | 'symmetryY'\n  | 'diffY'\n  | 'select'\n  | 'selectY'\n  | 'selectX'\n  | 'groupX'\n  | 'groupY'\n  | 'group'\n  | 'groupColor'\n  | 'sortX'\n  | 'sortColor'\n  | 'sortY'\n  | 'flexX'\n  | 'pack'\n  | 'sample'\n  | 'filter'\n  | 'kde'\n  | TransformComponent;\n\nexport type TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n\nexport type DodgeXTransform = {\n  type?: 'dodgeX';\n  groupBy?: string | string[];\n  reverse?: boolean;\n  orderBy?: TransformOrder;\n  padding?: number;\n};\n\nexport type StackYTransform = {\n  type?: 'stackY';\n  groupBy?: string | string[];\n  reverse?: boolean;\n  orderBy?: TransformOrder;\n  y?: 'y' | 'y1';\n  y1?: 'y' | 'y1';\n  series?: boolean;\n};\n\nexport type NormalizeYTransform = {\n  type?: 'normalizeY';\n  series?: boolean;\n  groupBy?: string | string[];\n  basis?:\n    | 'deviation'\n    | 'first'\n    | 'last'\n    | 'max'\n    | 'mean'\n    | 'median'\n    | 'min'\n    | 'sum';\n};\n\nexport type JitterTransform = {\n  type?: 'jitter';\n  padding?: number;\n  paddingX?: number;\n  paddingY?: number;\n  random?: () => number;\n};\n\nexport type JitterXTransform = {\n  type?: 'jitterX';\n  padding?: number;\n  random?: () => number;\n};\n\nexport type JitterYTransform = {\n  type?: 'jitterY';\n  padding?: number;\n  random?: () => number;\n};\n\nexport type StackEnterTransform = {\n  type?: 'stackEnter';\n  groupBy?: string[] | string;\n  orderBy?: string;\n  reverse?: boolean;\n  duration?: number;\n  reducer?: (I: number[], V: any[]) => any;\n};\n\nexport type SymmetryYTransform = {\n  type?: 'symmetryY';\n  groupBy?: string | string[];\n};\n\nexport type DiffYTransform = {\n  type?: 'diffY';\n  groupBy?: string | string[];\n};\n\nexport type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n\nexport type SelectTransform = {\n  type?: 'select';\n  groupBy?: string | string[];\n  channel?: ChannelTypes;\n  selector?: Selector;\n};\n\nexport type SelectXTransform = {\n  type?: 'selectX';\n  groupBy?: string | string[];\n  selector?: Selector;\n};\n\nexport type SelectYTransform = {\n  type?: 'selectY';\n  groupBy?: string | string[];\n  selector?: Selector;\n};\n\nexport type SortColorTransform = {\n  type?: 'sortColor';\n  reverse?: boolean;\n  by?: string;\n  slice?: number | [number, number];\n  reducer?:\n    | 'max'\n    | 'min'\n    | 'sum'\n    | 'first'\n    | 'last'\n    | 'mean'\n    | 'median'\n    | ((I: number[], V: Primitive[]) => Primitive);\n};\n\nexport type SortXTransform = {\n  type?: 'sortX';\n  reverse?: boolean;\n  by?: string;\n  slice?: number | [number, number];\n  ordinal?: boolean;\n  reducer?:\n    | 'max'\n    | 'min'\n    | 'sum'\n    | 'first'\n    | 'last'\n    | 'mean'\n    | 'median'\n    | ((I: number[], V: Primitive[]) => Primitive);\n};\n\nexport type SortYTransform = {\n  type?: 'sortY';\n  reverse?: boolean;\n  by?: string;\n  slice?: number | [number, number];\n  reducer?:\n    | 'max'\n    | 'min'\n    | 'sum'\n    | 'first'\n    | 'last'\n    | 'mean'\n    | 'median'\n    | ((I: number[], V: Primitive[]) => Primitive);\n};\n\nexport type FlexXTransform = {\n  type?: 'flexX';\n  field?: string | ((d: any) => Primitive[]);\n  channel?: string;\n  reducer?: 'sum' | ((I: number[], V: Primitive[]) => Primitive);\n};\n\nexport type PackTransform = {\n  type?: 'pack';\n  padding?: number;\n  direction?: 'row' | 'col';\n};\n\nexport type Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n\nexport type GroupXTransform = {\n  type?: 'groupX';\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type GroupYTransform = {\n  type?: 'groupY';\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type GroupColorTransform = {\n  type?: 'groupColor';\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type GroupTransform = {\n  type?: 'group';\n  channels?: string | string[];\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type BinXTransform = {\n  type?: 'binX';\n  thresholds?: number;\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type BinTransform = {\n  type?: 'bin';\n  thresholdsX?: number;\n  thresholdsY?: number;\n} & { [key in ChannelTypes]?: Reducer };\n\nexport type SampleFunction = (\n  I: number[],\n  X: number[],\n  Y: number[],\n  thresholds: number,\n) => number[];\n\nexport type SampleTransform = {\n  type?: 'sample';\n  /**\n   * Sample strategy. Default is 'median'.\n   */\n  strategy?:\n    | 'lttb'\n    | 'median'\n    | 'max'\n    | 'min'\n    | 'first'\n    | 'last'\n    | SampleFunction;\n  /**\n   * The thresholds of sample, when data size great then thresholds, sample will take effect.\n   * Default is 2000.\n   */\n  thresholds?: number;\n  /**\n   * Group data by fields, for series data.\n   */\n  groupBy?: string | string[];\n};\n\nexport type FilterTransform = {\n  type?: 'filter';\n} & {\n  [key in ChannelTypes]?: any[] | ((v: Primitive) => boolean);\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}