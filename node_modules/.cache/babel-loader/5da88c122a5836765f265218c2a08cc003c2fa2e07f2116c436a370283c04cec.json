{"ast":null,"code":"import { __read } from \"tslib\";\nimport { add, sub, min as _min, max as _max, scale, distance } from './matrix';\nfunction smoothBezier(points, smooth, isLoop, constraint) {\n  var _a;\n  var cps = [];\n  var hasConstraint = !!constraint;\n  var prevPoint;\n  var nextPoint;\n  var min = [Infinity, Infinity];\n  var max = [-Infinity, -Infinity];\n  var nextCp0;\n  var cp1;\n  var cp0;\n  if (hasConstraint) {\n    _a = __read(constraint, 2), min = _a[0], max = _a[1];\n    for (var i = 0, l = points.length; i < l; i += 1) {\n      var point = points[i];\n      min = _min(min, point);\n      max = _max(max, point);\n    }\n  }\n  for (var i = 0, len = points.length; i < len; i += 1) {\n    var point = points[i];\n    if (i === 0 && !isLoop) {\n      cp0 = point;\n    } else if (i === len - 1 && !isLoop) {\n      cp1 = point;\n      cps.push(cp0);\n      cps.push(cp1);\n    } else {\n      var prevIdx = [i ? i - 1 : len - 1, i - 1][isLoop ? 0 : 1];\n      prevPoint = points[prevIdx];\n      nextPoint = points[isLoop ? (i + 1) % len : i + 1];\n      var v = [0, 0];\n      v = sub(nextPoint, prevPoint);\n      v = scale(v, smooth);\n      var d0 = distance(point, prevPoint);\n      var d1 = distance(point, nextPoint);\n      var sum = d0 + d1;\n      if (sum !== 0) {\n        d0 /= sum;\n        d1 /= sum;\n      }\n      var v1 = scale(v, -d0);\n      var v2 = scale(v, d1);\n      cp1 = add(point, v1);\n      nextCp0 = add(point, v2);\n      // 下一个控制点必须在这个点和下一个点之间\n      nextCp0 = _min(nextCp0, _max(nextPoint, point));\n      nextCp0 = _max(nextCp0, _min(nextPoint, point));\n      // 重新计算 cp1 的值\n      v1 = sub(nextCp0, point);\n      v1 = scale(v1, -d0 / d1);\n      cp1 = add(point, v1);\n      // 上一个控制点必须要在上一个点和这一个点之间\n      cp1 = _min(cp1, _max(prevPoint, point));\n      cp1 = _max(cp1, _min(prevPoint, point));\n      // 重新计算 nextCp0 的值\n      v2 = sub(point, cp1);\n      v2 = scale(v2, d1 / d0);\n      nextCp0 = add(point, v2);\n      if (hasConstraint) {\n        cp1 = _max(cp1, min);\n        cp1 = _min(cp1, max);\n        nextCp0 = _max(nextCp0, min);\n        nextCp0 = _min(nextCp0, max);\n      }\n      cps.push(cp0);\n      cps.push(cp1);\n      cp0 = nextCp0;\n    }\n  }\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n  return cps;\n}\n/**\n * create bezier spline from catmull rom spline\n * @param {Array} crp Catmull Rom Points\n * @param {boolean} z Spline is loop\n * @param {Array} constraint Constraint\n */\nexport function catmullRom2Bezier(crp, z, constraint) {\n  var _a;\n  if (z === void 0) {\n    z = false;\n  }\n  if (constraint === void 0) {\n    constraint = [[0, 0], [1, 1]];\n  }\n  var isLoop = !!z;\n  var pointList = [];\n  for (var i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  var len = pointList.length;\n  var d1 = [];\n  var cp1;\n  var cp2;\n  var p;\n  for (var i = 0; i < len - 1; i += 1) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    _a = __read(pointList, 1), p = _a[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}","map":{"version":3,"names":["add","sub","min","_min","max","_max","scale","distance","smoothBezier","points","smooth","isLoop","constraint","cps","hasConstraint","prevPoint","nextPoint","Infinity","nextCp0","cp1","cp0","_a","__read","i","l","length","point","len","push","prevIdx","v","d0","d1","sum","v1","v2","shift","catmullRom2Bezier","crp","z","pointList","controlPointList","cp2","p"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/util/path.ts"],"sourcesContent":["import { add, sub, min as _min, max as _max, scale, distance } from './matrix';\nimport type { Vector2, Point } from '../types';\n\ntype A = ['a' | 'A', number, number, number, number, number, number, number];\ntype C = ['c' | 'C', number, number, number, number, number, number];\ntype O = ['o' | 'O', number, number];\ntype H = ['h' | 'H', number];\ntype L = ['l' | 'L', number, number];\ntype M = ['m' | 'M', number, number];\ntype R = ['r' | 'R', number, number, number, number];\ntype Q = ['q' | 'Q', number, number, number, number];\ntype S = ['s' | 'S', number, number, number, number, number, number, number];\ntype T = ['t' | 'T', number, number];\ntype V = ['v' | 'V', number];\ntype U = ['u' | 'U', number, number, number];\ntype Z = ['z' | 'Z'];\n\nexport type PathCommand = A | C | O | H | L | M | R | Q | S | T | V | U | Z;\n\nfunction smoothBezier(points: Point[], smooth: number, isLoop: boolean, constraint: Point[]) {\n  const cps: Vector2[] = [];\n  const hasConstraint = !!constraint;\n\n  let prevPoint: Point;\n  let nextPoint: Point;\n  let min: Vector2 = [Infinity, Infinity];\n  let max: Vector2 = [-Infinity, -Infinity];\n  let nextCp0: Vector2;\n  let cp1: Vector2;\n  let cp0: Vector2;\n\n  if (hasConstraint) {\n    [min, max] = constraint;\n    for (let i = 0, l = points.length; i < l; i += 1) {\n      const point = points[i];\n      min = _min(min, point);\n      max = _max(max, point);\n    }\n  }\n\n  for (let i = 0, len = points.length; i < len; i += 1) {\n    const point = points[i];\n    if (i === 0 && !isLoop) {\n      cp0 = point;\n    } else if (i === len - 1 && !isLoop) {\n      cp1 = point;\n      cps.push(cp0!);\n      cps.push(cp1);\n    } else {\n      const prevIdx = [i ? i - 1 : len - 1, i - 1][isLoop ? 0 : 1];\n      prevPoint = points[prevIdx];\n      nextPoint = points[isLoop ? (i + 1) % len : i + 1];\n\n      let v: Vector2 = [0, 0];\n      v = sub(nextPoint, prevPoint);\n      v = scale(v, smooth);\n\n      let d0 = distance(point, prevPoint);\n      let d1 = distance(point, nextPoint);\n\n      const sum = d0 + d1;\n      if (sum !== 0) {\n        d0 /= sum;\n        d1 /= sum;\n      }\n\n      let v1 = scale(v, -d0);\n      let v2 = scale(v, d1);\n\n      cp1 = add(point, v1);\n      nextCp0 = add(point, v2);\n\n      // 下一个控制点必须在这个点和下一个点之间\n      nextCp0 = _min(nextCp0, _max(nextPoint, point));\n      nextCp0 = _max(nextCp0, _min(nextPoint, point));\n\n      // 重新计算 cp1 的值\n      v1 = sub(nextCp0, point);\n      v1 = scale(v1, -d0 / d1);\n      cp1 = add(point, v1);\n\n      // 上一个控制点必须要在上一个点和这一个点之间\n      cp1 = _min(cp1, _max(prevPoint, point));\n      cp1 = _max(cp1, _min(prevPoint, point));\n\n      // 重新计算 nextCp0 的值\n      v2 = sub(point, cp1);\n      v2 = scale(v2, d1 / d0);\n      nextCp0 = add(point, v2);\n\n      if (hasConstraint) {\n        cp1 = _max(cp1, min);\n        cp1 = _min(cp1, max);\n        nextCp0 = _max(nextCp0, min);\n        nextCp0 = _min(nextCp0, max);\n      }\n\n      cps.push(cp0!);\n      cps.push(cp1);\n      cp0 = nextCp0;\n    }\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift()!);\n  }\n\n  return cps;\n}\n\n/**\n * create bezier spline from catmull rom spline\n * @param {Array} crp Catmull Rom Points\n * @param {boolean} z Spline is loop\n * @param {Array} constraint Constraint\n */\nexport function catmullRom2Bezier(\n  crp: number[],\n  z: boolean = false,\n  constraint: Point[] = [\n    [0, 0],\n    [1, 1],\n  ]\n): PathCommand[] {\n  const isLoop = !!z;\n  const pointList: Point[] = [];\n  for (let i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1: PathCommand[] = [];\n\n  let cp1: Vector2;\n  let cp2: Vector2;\n  let p: Point;\n\n  for (let i = 0; i < len - 1; i += 1) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    [p] = pointList;\n\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}