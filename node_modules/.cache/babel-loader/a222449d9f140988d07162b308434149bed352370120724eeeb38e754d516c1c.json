{"ast":null,"code":"import { __read } from \"tslib\";\nexport var numberInterpolate = function (from, to) {\n  return function (t) {\n    return from * (1 - t) + to * t;\n  };\n};\nexport function arrayInterpolate(from, to) {\n  var nb = to ? to.length : 0;\n  var na = from ? Math.min(nb, from.length) : 0;\n  return function (t) {\n    var x = new Array(na);\n    var c = new Array(nb);\n    var i = 0;\n    for (i = 0; i < na; ++i) x[i] = interpolate(from[i], to[i]);\n    for (; i < nb; ++i) c[i] = to[i];\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\nexport function objectInterpolate(from, to) {\n  if (from === void 0) {\n    from = {};\n  }\n  if (to === void 0) {\n    to = {};\n  }\n  var i = {};\n  var c = {};\n  Object.entries(to).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      k = _b[0],\n      v = _b[1];\n    if (k in from) i[k] = interpolate(from[k], v);else c[k] = v;\n  });\n  return function (t) {\n    Object.entries(i).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n      return c[k] = v(t);\n    });\n    return c;\n  };\n}\nexport function interpolate(from, to) {\n  if (typeof from === 'number' && typeof to === 'number') {\n    // @ts-ignore\n    return numberInterpolate(from, to);\n  }\n  if (Array.isArray(from) && Array.isArray(to)) {\n    // @ts-ignore\n    return arrayInterpolate(from, to);\n  }\n  if (typeof from === 'object' && typeof to === 'object') {\n    // @ts-ignore\n    return objectInterpolate(from, to);\n  }\n  return function (t) {\n    return from;\n  };\n}","map":{"version":3,"names":["numberInterpolate","from","to","t","arrayInterpolate","nb","length","na","Math","min","x","Array","c","i","interpolate","objectInterpolate","Object","entries","forEach","_a","_b","__read","k","v","isArray"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/util/interpolate.ts"],"sourcesContent":["type PrimitiveInterpolatable = number;\n\nexport type Interpolatable = number | { [key: string]: PrimitiveInterpolatable } | PrimitiveInterpolatable[];\n\nexport type Interpolate<T extends Interpolatable = any> = (t: number) => T;\n\nexport type Interpolator<T extends Interpolatable = any> = (from: T, to: T) => Interpolate<T>;\n\nexport const numberInterpolate: Interpolator<number> = function (from, to) {\n  return function (t: number) {\n    return from * (1 - t) + to * t;\n  };\n};\n\nexport function arrayInterpolate(\n  from: PrimitiveInterpolatable[],\n  to: PrimitiveInterpolatable[]\n): Interpolate<PrimitiveInterpolatable[]> {\n  const nb = to ? to.length : 0;\n  const na = from ? Math.min(nb, from.length) : 0;\n\n  return function (t) {\n    const x = new Array(na);\n    const c = new Array(nb);\n\n    let i = 0;\n    for (i = 0; i < na; ++i) x[i] = interpolate(from[i], to[i]);\n    for (; i < nb; ++i) c[i] = to[i];\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n\nexport function objectInterpolate(\n  from: { [keys: string]: PrimitiveInterpolatable } = {},\n  to: { [keys: string]: PrimitiveInterpolatable } = {}\n) {\n  const i: { [keys: string]: Interpolate } = {};\n  const c: { [keys: string]: PrimitiveInterpolatable } = {};\n  Object.entries(to).forEach(([k, v]) => {\n    if (k in from) i[k] = interpolate(from[k], v);\n    else c[k] = v;\n  });\n  return function (t: PrimitiveInterpolatable) {\n    Object.entries(i).forEach(([k, v]) => (c[k] = v(t)));\n    return c;\n  };\n}\n\nexport function interpolate<T extends Interpolatable>(from: T, to: T): Interpolate<T> {\n  if (typeof from === 'number' && typeof to === 'number') {\n    // @ts-ignore\n    return numberInterpolate(from, to);\n  }\n  if (Array.isArray(from) && Array.isArray(to)) {\n    // @ts-ignore\n    return arrayInterpolate(from, to);\n  }\n  if (typeof from === 'object' && typeof to === 'object') {\n    // @ts-ignore\n    return objectInterpolate(\n      from as { [keys: string]: PrimitiveInterpolatable },\n      to as { [keys: string]: PrimitiveInterpolatable }\n    );\n  }\n  return ((t: T) => from) as Interpolate<T>;\n}\n"],"mappings":";AAQA,OAAO,IAAMA,iBAAiB,GAAyB,SAAAA,CAAUC,IAAI,EAAEC,EAAE;EACvE,OAAO,UAAUC,CAAS;IACxB,OAAOF,IAAI,IAAI,CAAC,GAAGE,CAAC,CAAC,GAAGD,EAAE,GAAGC,CAAC;EAChC,CAAC;AACH,CAAC;AAED,OAAM,SAAUC,gBAAgBA,CAC9BH,IAA+B,EAC/BC,EAA6B;EAE7B,IAAMG,EAAE,GAAGH,EAAE,GAAGA,EAAE,CAACI,MAAM,GAAG,CAAC;EAC7B,IAAMC,EAAE,GAAGN,IAAI,GAAGO,IAAI,CAACC,GAAG,CAACJ,EAAE,EAAEJ,IAAI,CAACK,MAAM,CAAC,GAAG,CAAC;EAE/C,OAAO,UAAUH,CAAC;IAChB,IAAMO,CAAC,GAAG,IAAIC,KAAK,CAACJ,EAAE,CAAC;IACvB,IAAMK,CAAC,GAAG,IAAID,KAAK,CAACN,EAAE,CAAC;IAEvB,IAAIQ,CAAC,GAAG,CAAC;IACT,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,EAAE,EAAE,EAAEM,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,GAAGC,WAAW,CAACb,IAAI,CAACY,CAAC,CAAC,EAAEX,EAAE,CAACW,CAAC,CAAC,CAAC;IAC3D,OAAOA,CAAC,GAAGR,EAAE,EAAE,EAAEQ,CAAC,EAAED,CAAC,CAACC,CAAC,CAAC,GAAGX,EAAE,CAACW,CAAC,CAAC;IAChC,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,EAAE,EAAE,EAAEM,CAAC,EAAED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC,CAACV,CAAC,CAAC;IACvC,OAAOS,CAAC;EACV,CAAC;AACH;AAEA,OAAM,SAAUG,iBAAiBA,CAC/Bd,IAAsD,EACtDC,EAAoD;EADpD,IAAAD,IAAA;IAAAA,IAAA,KAAsD;EAAA;EACtD,IAAAC,EAAA;IAAAA,EAAA,KAAoD;EAAA;EAEpD,IAAMW,CAAC,GAAoC,EAAE;EAC7C,IAAMD,CAAC,GAAgD,EAAE;EACzDI,MAAM,CAACC,OAAO,CAACf,EAAE,CAAC,CAACgB,OAAO,CAAC,UAACC,EAAM;QAANC,EAAA,GAAAC,MAAA,CAAAF,EAAA,IAAM;MAALG,CAAC,GAAAF,EAAA;MAAEG,CAAC,GAAAH,EAAA;IAC/B,IAAIE,CAAC,IAAIrB,IAAI,EAAEY,CAAC,CAACS,CAAC,CAAC,GAAGR,WAAW,CAACb,IAAI,CAACqB,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,KACzCX,CAAC,CAACU,CAAC,CAAC,GAAGC,CAAC;EACf,CAAC,CAAC;EACF,OAAO,UAAUpB,CAA0B;IACzCa,MAAM,CAACC,OAAO,CAACJ,CAAC,CAAC,CAACK,OAAO,CAAC,UAACC,EAAM;UAANC,EAAA,GAAAC,MAAA,CAAAF,EAAA,IAAM;QAALG,CAAC,GAAAF,EAAA;QAAEG,CAAC,GAAAH,EAAA;MAAM,OAACR,CAAC,CAACU,CAAC,CAAC,GAAGC,CAAC,CAACpB,CAAC,CAAC;IAAZ,CAAa,CAAC;IACpD,OAAOS,CAAC;EACV,CAAC;AACH;AAEA,OAAM,SAAUE,WAAWA,CAA2Bb,IAAO,EAAEC,EAAK;EAClE,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;IACtD;IACA,OAAOF,iBAAiB,CAACC,IAAI,EAAEC,EAAE,CAAC;EACpC;EACA,IAAIS,KAAK,CAACa,OAAO,CAACvB,IAAI,CAAC,IAAIU,KAAK,CAACa,OAAO,CAACtB,EAAE,CAAC,EAAE;IAC5C;IACA,OAAOE,gBAAgB,CAACH,IAAI,EAAEC,EAAE,CAAC;EACnC;EACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;IACtD;IACA,OAAOa,iBAAiB,CACtBd,IAAmD,EACnDC,EAAiD,CAClD;EACH;EACA,OAAQ,UAACC,CAAI;IAAK,OAAAF,IAAI;EAAJ,CAAI;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}