{"ast":null,"code":"import { Document } from '@antv/g';\nimport { isCombo, isEdge, isNode } from '../element';\nexport * from './events';\n/**\n * <zh/> 基于 Event 对象触发事件\n *\n * <en/> Trigger event based on Event object\n * @param emitter - <zh/> 事件目标 | <en/> event target\n * @param event - <zh/> 事件对象 | <en/> event object\n */\nexport function emit(emitter, event) {\n  emitter.emit(event.type, event);\n}\n/**\n * <zh/> 获取事件目标元素\n *\n * <en/> Get the event target element\n * @param shape - <zh/> 事件图形 | <en/> event shape\n * @returns <zh/> 目标元素 | <en/> target element\n * @remarks\n * <zh/> 事件响应大多数情况会命中元素的内部图形，通过该方法可以获取到其所属元素\n *\n * <en/> Most of the event responses will hit the internal graphics of the element, and this method can be used to get the element to which it belongs\n */\nexport function eventTargetOf(shape) {\n  if (!shape) return null;\n  if (shape instanceof Document) {\n    return {\n      type: 'canvas',\n      element: shape\n    };\n  }\n  let element = shape;\n  while (element) {\n    // 此判断条件不适用于 label 和 节点分开渲染的情况\n    // This condition is not applicable to the case where the label and node are rendered separately\n    if (isNode(element)) return {\n      type: 'node',\n      element\n    };\n    if (isEdge(element)) return {\n      type: 'edge',\n      element\n    };\n    if (isCombo(element)) return {\n      type: 'combo',\n      element\n    };\n    element = element.parentElement;\n  }\n  return null;\n}","map":{"version":3,"names":["Document","isCombo","isEdge","isNode","emit","emitter","event","type","eventTargetOf","shape","element","parentElement"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/event/index.ts"],"sourcesContent":["import type EventEmitter from '@antv/event-emitter';\nimport type { DisplayObject } from '@antv/g';\nimport { Document } from '@antv/g';\nimport { Target } from '../../types';\nimport { isCombo, isEdge, isNode } from '../element';\nimport type { BaseEvent } from './events';\n\nexport * from './events';\n\n/**\n * <zh/> 基于 Event 对象触发事件\n *\n * <en/> Trigger event based on Event object\n * @param emitter - <zh/> 事件目标 | <en/> event target\n * @param event - <zh/> 事件对象 | <en/> event object\n */\nexport function emit(emitter: EventEmitter, event: BaseEvent) {\n  emitter.emit(event.type, event);\n}\n\n/**\n * <zh/> 获取事件目标元素\n *\n * <en/> Get the event target element\n * @param shape - <zh/> 事件图形 | <en/> event shape\n * @returns <zh/> 目标元素 | <en/> target element\n * @remarks\n * <zh/> 事件响应大多数情况会命中元素的内部图形，通过该方法可以获取到其所属元素\n *\n * <en/> Most of the event responses will hit the internal graphics of the element, and this method can be used to get the element to which it belongs\n */\nexport function eventTargetOf(shape?: DisplayObject | Document): { type: string; element: Target } | null {\n  if (!shape) return null;\n\n  if (shape instanceof Document) {\n    return { type: 'canvas', element: shape };\n  }\n\n  let element: DisplayObject | null = shape;\n  while (element) {\n    // 此判断条件不适用于 label 和 节点分开渲染的情况\n    // This condition is not applicable to the case where the label and node are rendered separately\n    if (isNode(element)) return { type: 'node', element };\n    if (isEdge(element)) return { type: 'edge', element };\n    if (isCombo(element)) return { type: 'combo', element };\n    element = element.parentElement as DisplayObject | null;\n  }\n\n  return null;\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,OAAO,EAAEC,MAAM,EAAEC,MAAM,QAAQ,YAAY;AAGpD,cAAc,UAAU;AAExB;;;;;;;AAOA,OAAM,SAAUC,IAAIA,CAACC,OAAqB,EAAEC,KAAgB;EAC1DD,OAAO,CAACD,IAAI,CAACE,KAAK,CAACC,IAAI,EAAED,KAAK,CAAC;AACjC;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUE,aAAaA,CAACC,KAAgC;EAC5D,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAIA,KAAK,YAAYT,QAAQ,EAAE;IAC7B,OAAO;MAAEO,IAAI,EAAE,QAAQ;MAAEG,OAAO,EAAED;IAAK,CAAE;EAC3C;EAEA,IAAIC,OAAO,GAAyBD,KAAK;EACzC,OAAOC,OAAO,EAAE;IACd;IACA;IACA,IAAIP,MAAM,CAACO,OAAO,CAAC,EAAE,OAAO;MAAEH,IAAI,EAAE,MAAM;MAAEG;IAAO,CAAE;IACrD,IAAIR,MAAM,CAACQ,OAAO,CAAC,EAAE,OAAO;MAAEH,IAAI,EAAE,MAAM;MAAEG;IAAO,CAAE;IACrD,IAAIT,OAAO,CAACS,OAAO,CAAC,EAAE,OAAO;MAAEH,IAAI,EAAE,OAAO;MAAEG;IAAO,CAAE;IACvDA,OAAO,GAAGA,OAAO,CAACC,aAAqC;EACzD;EAEA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}