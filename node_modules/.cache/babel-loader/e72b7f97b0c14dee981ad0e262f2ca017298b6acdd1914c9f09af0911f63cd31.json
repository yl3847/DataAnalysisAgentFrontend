{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { isString } from '@antv/util';\nimport { cloneFormatData, floydWarshall, formatNodeSizeToNumber, getAdjMatrix, getEuclideanDistance } from '../util';\nimport { handleSingleNodeGraph } from '../util/common';\nimport { mds } from './mds';\nimport { radialNonoverlapForce } from './radial-nonoverlap-force';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  maxIteration: 1000,\n  focusNode: null,\n  unitRadius: null,\n  linkDistance: 50,\n  preventOverlap: false,\n  strictRadial: true,\n  maxPreventOverlapIteration: 200,\n  sortStrength: 10\n};\n/**\n * <zh/> 径向布局\n *\n * <en/> Radial layout\n */\nexport class RadialLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'radial';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericRadialLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericRadialLayout(true, graph, options);\n    });\n  }\n  genericRadialLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n      const {\n        width: propsWidth,\n        height: propsHeight,\n        center: propsCenter,\n        focusNode: propsFocusNode,\n        unitRadius: propsUnitRadius,\n        nodeSize,\n        nodeSpacing,\n        strictRadial,\n        preventOverlap,\n        maxPreventOverlapIteration,\n        sortBy,\n        linkDistance = 50,\n        sortStrength = 10,\n        maxIteration = 1000\n      } = mergedOptions;\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n      const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n      const center = !propsCenter ? [width / 2, height / 2] : propsCenter;\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n        return handleSingleNodeGraph(graph, assign, center);\n      }\n      let focusNode = nodes[0];\n      if (isString(propsFocusNode)) {\n        for (let i = 0; i < nodes.length; i++) {\n          if (nodes[i].id === propsFocusNode) {\n            focusNode = nodes[i];\n            break;\n          }\n        }\n      } else {\n        focusNode = propsFocusNode || nodes[0];\n      }\n      // the index of the focusNode in data\n      const focusIndex = getIndexById(nodes, focusNode.id);\n      // the graph-theoretic distance (shortest path distance) matrix\n      const adjMatrix = getAdjMatrix({\n        nodes,\n        edges\n      }, false);\n      const distances = floydWarshall(adjMatrix);\n      const maxDistance = maxToFocus(distances, focusIndex);\n      // replace first node in unconnected component to the circle at (maxDistance + 1)\n      handleInfinity(distances, focusIndex, maxDistance + 1);\n      // the shortest path distance from each node to focusNode\n      const focusNodeD = distances[focusIndex];\n      let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n      let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n      if (semiWidth === 0) {\n        semiWidth = width / 2;\n      }\n      if (semiHeight === 0) {\n        semiHeight = height / 2;\n      }\n      // the maxRadius of the graph\n      const maxRadius = Math.min(semiWidth, semiHeight);\n      const maxD = Math.max(...focusNodeD);\n      // the radius for each nodes away from focusNode\n      const radii = [];\n      const unitRadius = !propsUnitRadius ? maxRadius / maxD : propsUnitRadius;\n      focusNodeD.forEach((value, i) => {\n        radii[i] = value * unitRadius;\n      });\n      const idealDistances = eIdealDisMatrix(nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength);\n      // the weight matrix, Wij = 1 / dij^(-2)\n      const weights = getWeightMatrix(idealDistances);\n      // the initial positions from mds, move the graph to origin, centered at focusNode\n      const mdsResult = mds(linkDistance, idealDistances, linkDistance);\n      let positions = mdsResult.map(([x, y]) => ({\n        x: (isNaN(x) ? Math.random() * linkDistance : x) - mdsResult[focusIndex][0],\n        y: (isNaN(y) ? Math.random() * linkDistance : y) - mdsResult[focusIndex][1]\n      }));\n      this.run(maxIteration, positions, weights, idealDistances, radii, focusIndex);\n      let nodeSizeFunc;\n      // stagger the overlapped nodes\n      if (preventOverlap) {\n        nodeSizeFunc = formatNodeSizeToNumber(nodeSize, nodeSpacing);\n        const nonoverlapForceParams = {\n          nodes,\n          nodeSizeFunc,\n          positions,\n          radii,\n          height,\n          width,\n          strictRadial: Boolean(strictRadial),\n          focusIdx: focusIndex,\n          iterations: maxPreventOverlapIteration || 200,\n          k: positions.length / 4.5\n        };\n        positions = radialNonoverlapForce(graph, nonoverlapForceParams);\n      }\n      // move the graph to center\n      const layoutNodes = [];\n      positions.forEach((p, i) => {\n        const cnode = cloneFormatData(nodes[i]);\n        cnode.data.x = p.x + center[0];\n        cnode.data.y = p.y + center[1];\n        layoutNodes.push(cnode);\n      });\n      if (assign) {\n        layoutNodes.forEach(node => graph.mergeNodeData(node.id, {\n          x: node.data.x,\n          y: node.data.y\n        }));\n      }\n      const result = {\n        nodes: layoutNodes,\n        edges\n      };\n      return result;\n    });\n  }\n  run(maxIteration, positions, weights, idealDistances, radii, focusIndex) {\n    for (let i = 0; i <= maxIteration; i++) {\n      const param = i / maxIteration;\n      this.oneIteration(param, positions, radii, idealDistances, weights, focusIndex);\n    }\n  }\n  oneIteration(param, positions, radii, distances, weights, focusIndex) {\n    const vparam = 1 - param;\n    positions.forEach((v, i) => {\n      // v\n      const originDis = getEuclideanDistance(v, {\n        x: 0,\n        y: 0\n      });\n      const reciODis = originDis === 0 ? 0 : 1 / originDis;\n      if (i === focusIndex) {\n        return;\n      }\n      let xMolecule = 0;\n      let yMolecule = 0;\n      let denominator = 0;\n      positions.forEach((u, j) => {\n        // u\n        if (i === j) {\n          return;\n        }\n        // the euclidean distance between v and u\n        const edis = getEuclideanDistance(v, u);\n        const reciEdis = edis === 0 ? 0 : 1 / edis;\n        const idealDis = distances[j][i];\n        // same for x and y\n        denominator += weights[i][j];\n        // x\n        xMolecule += weights[i][j] * (u.x + idealDis * (v.x - u.x) * reciEdis);\n        // y\n        yMolecule += weights[i][j] * (u.y + idealDis * (v.y - u.y) * reciEdis);\n      });\n      const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n      denominator *= vparam;\n      denominator += param * reciR * reciR;\n      // x\n      xMolecule *= vparam;\n      xMolecule += param * reciR * v.x * reciODis;\n      v.x = xMolecule / denominator;\n      // y\n      yMolecule *= vparam;\n      yMolecule += param * reciR * v.y * reciODis;\n      v.y = yMolecule / denominator;\n    });\n  }\n}\nconst eIdealDisMatrix = (nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength) => {\n  if (!nodes) return [];\n  const result = [];\n  if (distances) {\n    // cache the value of field sortBy for nodes to avoid dupliate calculation\n    const sortValueCache = {};\n    distances.forEach((row, i) => {\n      const newRow = [];\n      row.forEach((v, j) => {\n        var _a, _b;\n        if (i === j) {\n          newRow.push(0);\n        } else if (radii[i] === radii[j]) {\n          // i and j are on the same circle\n          if (sortBy === 'data') {\n            // sort the nodes on the same circle according to the ordering of the data\n            newRow.push(v * (Math.abs(i - j) * sortStrength) / (radii[i] / unitRadius));\n          } else if (sortBy) {\n            // sort the nodes on the same circle according to the attributes\n            let iValue;\n            let jValue;\n            if (sortValueCache[nodes[i].id]) {\n              iValue = sortValueCache[nodes[i].id];\n            } else {\n              const value = (sortBy === 'id' ? nodes[i].id : (_a = nodes[i].data) === null || _a === void 0 ? void 0 : _a[sortBy]) || 0;\n              if (isString(value)) {\n                iValue = value.charCodeAt(0);\n              } else {\n                iValue = value;\n              }\n              sortValueCache[nodes[i].id] = iValue;\n            }\n            if (sortValueCache[nodes[j].id]) {\n              jValue = sortValueCache[nodes[j].id];\n            } else {\n              const value = (sortBy === 'id' ? nodes[j].id : (_b = nodes[j].data) === null || _b === void 0 ? void 0 : _b[sortBy]) || 0;\n              if (isString(value)) {\n                jValue = value.charCodeAt(0);\n              } else {\n                jValue = value;\n              }\n              sortValueCache[nodes[j].id] = jValue;\n            }\n            newRow.push(v * (Math.abs(iValue - jValue) * sortStrength) / (radii[i] / unitRadius));\n          } else {\n            newRow.push(v * linkDistance / (radii[i] / unitRadius));\n          }\n        } else {\n          // i and j are on different circles\n          const link = (linkDistance + unitRadius) / 2;\n          newRow.push(v * link);\n        }\n      });\n      result.push(newRow);\n    });\n  }\n  return result;\n};\nconst getWeightMatrix = idealDistances => {\n  const rows = idealDistances.length;\n  const cols = idealDistances[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      if (idealDistances[i][j] !== 0) {\n        row.push(1 / (idealDistances[i][j] * idealDistances[i][j]));\n      } else {\n        row.push(0);\n      }\n    }\n    result.push(row);\n  }\n  return result;\n};\nconst getIndexById = (array, id) => {\n  let index = -1;\n  array.forEach((a, i) => {\n    if (a.id === id) {\n      index = i;\n    }\n  });\n  return Math.max(index, 0);\n};\nconst handleInfinity = (matrix, focusIndex, step) => {\n  const length = matrix.length;\n  // 遍历 matrix 中遍历 focus 对应行\n  for (let i = 0; i < length; i++) {\n    // matrix 关注点对应行的 Inf 项\n    if (matrix[focusIndex][i] === Infinity) {\n      matrix[focusIndex][i] = step;\n      matrix[i][focusIndex] = step;\n      // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n      for (let j = 0; j < length; j++) {\n        if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n          matrix[focusIndex][j] = step + matrix[i][j];\n          matrix[j][focusIndex] = step + matrix[i][j];\n        }\n      }\n    }\n  }\n  // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n  for (let i = 0; i < length; i++) {\n    if (i === focusIndex) {\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      if (matrix[i][j] === Infinity) {\n        let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n        minus = minus === 0 ? 1 : minus;\n        matrix[i][j] = minus;\n      }\n    }\n  }\n};\nconst maxToFocus = (matrix, focusIndex) => {\n  let max = 0;\n  for (let i = 0; i < matrix[focusIndex].length; i++) {\n    if (matrix[focusIndex][i] === Infinity) {\n      continue;\n    }\n    max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n  }\n  return max;\n};","map":{"version":3,"names":["isString","cloneFormatData","floydWarshall","formatNodeSizeToNumber","getAdjMatrix","getEuclideanDistance","handleSingleNodeGraph","mds","radialNonoverlapForce","DEFAULTS_LAYOUT_OPTIONS","maxIteration","focusNode","unitRadius","linkDistance","preventOverlap","strictRadial","maxPreventOverlapIteration","sortStrength","RadialLayout","constructor","options","id","Object","assign","execute","graph","genericRadialLayout","mergedOptions","width","propsWidth","height","propsHeight","center","propsCenter","propsFocusNode","propsUnitRadius","nodeSize","nodeSpacing","sortBy","nodes","getAllNodes","edges","getAllEdges","window","innerWidth","innerHeight","length","i","focusIndex","getIndexById","adjMatrix","distances","maxDistance","maxToFocus","handleInfinity","focusNodeD","semiWidth","semiHeight","maxRadius","Math","min","maxD","max","radii","forEach","value","idealDistances","eIdealDisMatrix","weights","getWeightMatrix","mdsResult","positions","map","x","y","isNaN","random","run","nodeSizeFunc","nonoverlapForceParams","Boolean","focusIdx","iterations","k","layoutNodes","p","cnode","data","push","node","mergeNodeData","result","param","oneIteration","vparam","v","originDis","reciODis","xMolecule","yMolecule","denominator","u","j","edis","reciEdis","idealDis","reciR","sortValueCache","row","newRow","abs","iValue","jValue","_a","charCodeAt","_b","link","rows","cols","array","index","a","matrix","step","Infinity","minus"],"sources":["../../src/radial/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}