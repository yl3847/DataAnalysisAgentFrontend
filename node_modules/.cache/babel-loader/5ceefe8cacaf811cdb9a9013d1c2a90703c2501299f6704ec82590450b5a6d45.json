{"ast":null,"code":"import { DensityShape } from '../shape';\nimport { MaybeZeroY1, MaybeZeroX } from '../transform';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip1d } from './utils';\nconst shape = {\n  density: DensityShape\n};\nexport const Density = () => {\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      series: S\n    } = value;\n    const Yn = Object.entries(value).filter(([key]) => key.startsWith('y')).map(([, value]) => value);\n    const SZn = Object.entries(value).filter(([key]) => key.startsWith('size')).map(([, value]) => value);\n    // Because x and y channel is not strictly required in Line.props,\n    // it should throw error with empty x or y channels.\n    if (X === undefined || Yn === undefined || SZn === undefined) {\n      throw new Error('Missing encode for x or y or size channel.');\n    }\n    // Calc width for each box.\n    // The scales for x and series channels must be band scale.\n    const xScale = scale.x;\n    const series = scale.series;\n    const P = Array.from(index, i => {\n      const groupWidth = xScale.getBandWidth(xScale.invert(+X[i]));\n      const ratio = series ? series.getBandWidth(series.invert(+(S === null || S === void 0 ? void 0 : S[i]))) : 1;\n      const width = groupWidth * ratio;\n      const offset = (+(S === null || S === void 0 ? void 0 : S[i]) || 0) * groupWidth;\n      const x = +X[i] + offset + width / 2;\n      const PN = [...Yn.map((_, idx) => [x + +SZn[idx][i] / index.length, +Yn[idx][i]]), ...Yn.map((_, idx) => [x - +SZn[idx][i] / index.length, +Yn[idx][i]]).reverse() // left\n      ];\n      return PN.map(p => coordinate.map(p));\n    });\n    return [index, P];\n  };\n};\nDensity.props = {\n  defaultShape: 'density',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    scale: 'band',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'size',\n    required: true\n  }, {\n    name: 'series',\n    scale: 'band'\n  }, {\n    name: 'size',\n    required: true,\n    scale: 'identity'\n  }],\n  preInference: [...basePreInference(), {\n    type: MaybeZeroY1\n  }, {\n    type: MaybeZeroX\n  }],\n  postInference: [...basePostInference(), ...tooltip1d()],\n  interaction: {\n    shareTooltip: true\n  }\n};","map":{"version":3,"names":["DensityShape","MaybeZeroY1","MaybeZeroX","baseGeometryChannels","basePostInference","basePreInference","tooltip1d","shape","density","Density","index","scale","value","coordinate","x","X","series","S","Yn","Object","entries","filter","key","startsWith","map","SZn","undefined","Error","xScale","P","Array","from","i","groupWidth","getBandWidth","invert","ratio","width","offset","PN","_","idx","length","reverse","p","props","defaultShape","defaultLabelShape","composite","channels","shapes","keys","name","required","preInference","type","postInference","interaction","shareTooltip"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/density.ts"],"sourcesContent":["import { Band } from '@antv/scale';\nimport { MarkComponent as MC, Vector2 } from '../runtime';\nimport { DensityMark } from '../spec';\nimport { DensityShape } from '../shape';\nimport { MaybeZeroY1, MaybeZeroX } from '../transform';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  tooltip1d,\n} from './utils';\n\nconst shape = {\n  density: DensityShape,\n};\n\nexport type DensityOptions = Omit<DensityMark, 'type'>;\n\nexport const Density: MC<DensityOptions> = () => {\n  return (index, scale, value, coordinate) => {\n    const { x: X, series: S } = value;\n\n    const Yn = Object.entries(value)\n      .filter(([key]) => key.startsWith('y'))\n      .map(([, value]) => value);\n\n    const SZn = Object.entries(value)\n      .filter(([key]) => key.startsWith('size'))\n      .map(([, value]) => value);\n\n    // Because x and y channel is not strictly required in Line.props,\n    // it should throw error with empty x or y channels.\n    if (X === undefined || Yn === undefined || SZn === undefined) {\n      throw new Error('Missing encode for x or y or size channel.');\n    }\n\n    // Calc width for each box.\n    // The scales for x and series channels must be band scale.\n    const xScale = scale.x as Band;\n    const series = scale.series as Band;\n\n    const P = Array.from(index, (i) => {\n      const groupWidth = xScale.getBandWidth(xScale.invert(+X[i]));\n      const ratio = series ? series.getBandWidth(series.invert(+S?.[i])) : 1;\n      const width = groupWidth * ratio;\n      const offset = (+S?.[i] || 0) * groupWidth;\n\n      const x = +X[i] + offset + width / 2;\n\n      const PN = [\n        ...Yn.map((_, idx) => [x + +SZn[idx][i] / index.length, +Yn[idx][i]]), // right\n        ...Yn.map((_, idx) => [\n          x - +SZn[idx][i] / index.length,\n          +Yn[idx][i],\n        ]).reverse(), // left\n      ];\n\n      return PN.map((p) => coordinate.map(p)) as Vector2[];\n    });\n    return [index, P];\n  };\n};\n\nDensity.props = {\n  defaultShape: 'density',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', scale: 'band', required: true },\n    { name: 'y', required: true },\n    { name: 'size', required: true },\n    { name: 'series', scale: 'band' },\n    { name: 'size', required: true, scale: 'identity' },\n  ],\n  preInference: [\n    ...basePreInference(),\n    { type: MaybeZeroY1 },\n    { type: MaybeZeroX },\n  ],\n  postInference: [...basePostInference(), ...tooltip1d()],\n  interaction: { shareTooltip: true },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}