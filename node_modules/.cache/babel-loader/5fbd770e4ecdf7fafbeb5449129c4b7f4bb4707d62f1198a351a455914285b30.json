{"ast":null,"code":"// Mock data service for local testing\nexport const getMockResponse = async query => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n  const lowerQuery = query.toLowerCase();\n\n  // Mock responses based on query patterns\n  if (lowerQuery.includes('teenage') || lowerQuery.includes('male')) {\n    return {\n      success: true,\n      message: `Found 3 teenage male applicants in the database.`,\n      data: {\n        rows: [{\n          id: 1,\n          name: 'John Smith',\n          age: 17,\n          gender: 'Male',\n          state: 'California'\n        }, {\n          id: 3,\n          name: 'Michael Brown',\n          age: 19,\n          gender: 'Male',\n          state: 'Texas'\n        }, {\n          id: 7,\n          name: 'Robert Garcia',\n          age: 16,\n          gender: 'Male',\n          state: 'Arizona'\n        }],\n        rowCount: 3\n      },\n      charts: null\n    };\n  }\n  if (lowerQuery.includes('chart') || lowerQuery.includes('distribution')) {\n    return {\n      success: true,\n      message: `Generated age distribution chart for all applicants.`,\n      data: {\n        rows: generateAgeDistribution(),\n        rowCount: 10\n      },\n      charts: [{\n        type: 'bar',\n        title: 'Age Distribution',\n        data: [{\n          age: '16-18',\n          count: 3\n        }, {\n          age: '19-21',\n          count: 4\n        }, {\n          age: '22-24',\n          count: 2\n        }, {\n          age: '25+',\n          count: 1\n        }],\n        config: {\n          xField: 'count',\n          yField: 'age'\n        },\n        description: 'Distribution of applicants by age group'\n      }]\n    };\n  }\n  if (lowerQuery.includes('average') || lowerQuery.includes('gender')) {\n    return {\n      success: true,\n      message: `Calculated average age by gender.`,\n      data: {\n        rows: [{\n          gender: 'Male',\n          average_age: 20.2,\n          count: 5\n        }, {\n          gender: 'Female',\n          average_age: 22.4,\n          count: 5\n        }],\n        rowCount: 2\n      },\n      charts: [{\n        type: 'pie',\n        title: 'Gender Distribution',\n        data: [{\n          type: 'Male',\n          value: 5\n        }, {\n          type: 'Female',\n          value: 5\n        }],\n        config: {\n          angleField: 'value',\n          colorField: 'type'\n        }\n      }]\n    };\n  }\n  if (lowerQuery.includes('california')) {\n    return {\n      success: true,\n      message: `Found 4 applicants from California.`,\n      data: {\n        rows: [{\n          id: 1,\n          name: 'John Smith',\n          age: 17,\n          gender: 'Male',\n          state: 'California'\n        }, {\n          id: 4,\n          name: 'Sarah Davis',\n          age: 22,\n          gender: 'Female',\n          state: 'California'\n        }, {\n          id: 6,\n          name: 'Linda Martinez',\n          age: 30,\n          gender: 'Female',\n          state: 'California'\n        }, {\n          id: 10,\n          name: 'Maria Hernandez',\n          age: 19,\n          gender: 'Female',\n          state: 'California'\n        }],\n        rowCount: 4\n      },\n      charts: null\n    };\n  }\n\n  // Default response\n  return {\n    success: true,\n    message: `I've processed your query: \"${query}\". Here's what I found in the sample data.`,\n    data: {\n      rows: generateSampleData(),\n      rowCount: 10\n    },\n    charts: null\n  };\n};\n\n// Helper function to generate sample data\nconst generateSampleData = () => {\n  return [{\n    id: 1,\n    name: 'John Smith',\n    age: 17,\n    gender: 'Male',\n    state: 'California',\n    status: 'Pending'\n  }, {\n    id: 2,\n    name: 'Emily Johnson',\n    age: 25,\n    gender: 'Female',\n    state: 'New York',\n    status: 'Approved'\n  }, {\n    id: 3,\n    name: 'Michael Brown',\n    age: 19,\n    gender: 'Male',\n    state: 'Texas',\n    status: 'Pending'\n  }, {\n    id: 4,\n    name: 'Sarah Davis',\n    age: 22,\n    gender: 'Female',\n    state: 'California',\n    status: 'Approved'\n  }, {\n    id: 5,\n    name: 'James Wilson',\n    age: 18,\n    gender: 'Male',\n    state: 'Florida',\n    status: 'Rejected'\n  }, {\n    id: 6,\n    name: 'Linda Martinez',\n    age: 30,\n    gender: 'Female',\n    state: 'California',\n    status: 'Approved'\n  }, {\n    id: 7,\n    name: 'Robert Garcia',\n    age: 16,\n    gender: 'Male',\n    state: 'Arizona',\n    status: 'Pending'\n  }, {\n    id: 8,\n    name: 'Patricia Rodriguez',\n    age: 24,\n    gender: 'Female',\n    state: 'Illinois',\n    status: 'Approved'\n  }, {\n    id: 9,\n    name: 'Christopher Lee',\n    age: 21,\n    gender: 'Male',\n    state: 'Washington',\n    status: 'Pending'\n  }, {\n    id: 10,\n    name: 'Maria Hernandez',\n    age: 19,\n    gender: 'Female',\n    state: 'California',\n    status: 'Approved'\n  }];\n};\nconst generateAgeDistribution = () => {\n  return generateSampleData().map(person => ({\n    name: person.name,\n    age: person.age,\n    age_group: person.age <= 18 ? '16-18' : person.age <= 21 ? '19-21' : person.age <= 24 ? '22-24' : '25+'\n  }));\n};\n\n// Mock chart configurations\nexport const mockChartConfigs = {\n  line: {\n    type: 'line',\n    data: Array.from({\n      length: 10\n    }, (_, i) => ({\n      x: `Day ${i + 1}`,\n      y: Math.floor(Math.random() * 100)\n    })),\n    config: {\n      xField: 'x',\n      yField: 'y'\n    }\n  },\n  bar: {\n    type: 'bar',\n    data: [{\n      category: 'Category A',\n      value: 30\n    }, {\n      category: 'Category B',\n      value: 45\n    }, {\n      category: 'Category C',\n      value: 28\n    }, {\n      category: 'Category D',\n      value: 50\n    }],\n    config: {\n      xField: 'value',\n      yField: 'category'\n    }\n  }\n};\nexport default {\n  getMockResponse,\n  mockChartConfigs\n};","map":{"version":3,"names":["getMockResponse","query","Promise","resolve","setTimeout","lowerQuery","toLowerCase","includes","success","message","data","rows","id","name","age","gender","state","rowCount","charts","generateAgeDistribution","type","title","count","config","xField","yField","description","average_age","value","angleField","colorField","generateSampleData","status","map","person","age_group","mockChartConfigs","line","Array","from","length","_","i","x","y","Math","floor","random","bar","category"],"sources":["/Users/yizelu/Desktop/mcp/frontend/src/services/mockData.js"],"sourcesContent":["// Mock data service for local testing\nexport const getMockResponse = async (query) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n\n  const lowerQuery = query.toLowerCase();\n\n  // Mock responses based on query patterns\n  if (lowerQuery.includes('teenage') || lowerQuery.includes('male')) {\n    return {\n      success: true,\n      message: `Found 3 teenage male applicants in the database.`,\n      data: {\n        rows: [\n          { id: 1, name: 'John Smith', age: 17, gender: 'Male', state: 'California' },\n          { id: 3, name: 'Michael Brown', age: 19, gender: 'Male', state: 'Texas' },\n          { id: 7, name: 'Robert Garcia', age: 16, gender: 'Male', state: 'Arizona' },\n        ],\n        rowCount: 3,\n      },\n      charts: null,\n    };\n  }\n\n  if (lowerQuery.includes('chart') || lowerQuery.includes('distribution')) {\n    return {\n      success: true,\n      message: `Generated age distribution chart for all applicants.`,\n      data: {\n        rows: generateAgeDistribution(),\n        rowCount: 10,\n      },\n      charts: [{\n        type: 'bar',\n        title: 'Age Distribution',\n        data: [\n          { age: '16-18', count: 3 },\n          { age: '19-21', count: 4 },\n          { age: '22-24', count: 2 },\n          { age: '25+', count: 1 },\n        ],\n        config: {\n          xField: 'count',\n          yField: 'age',\n        },\n        description: 'Distribution of applicants by age group',\n      }],\n    };\n  }\n\n  if (lowerQuery.includes('average') || lowerQuery.includes('gender')) {\n    return {\n      success: true,\n      message: `Calculated average age by gender.`,\n      data: {\n        rows: [\n          { gender: 'Male', average_age: 20.2, count: 5 },\n          { gender: 'Female', average_age: 22.4, count: 5 },\n        ],\n        rowCount: 2,\n      },\n      charts: [{\n        type: 'pie',\n        title: 'Gender Distribution',\n        data: [\n          { type: 'Male', value: 5 },\n          { type: 'Female', value: 5 },\n        ],\n        config: {\n          angleField: 'value',\n          colorField: 'type',\n        },\n      }],\n    };\n  }\n\n  if (lowerQuery.includes('california')) {\n    return {\n      success: true,\n      message: `Found 4 applicants from California.`,\n      data: {\n        rows: [\n          { id: 1, name: 'John Smith', age: 17, gender: 'Male', state: 'California' },\n          { id: 4, name: 'Sarah Davis', age: 22, gender: 'Female', state: 'California' },\n          { id: 6, name: 'Linda Martinez', age: 30, gender: 'Female', state: 'California' },\n          { id: 10, name: 'Maria Hernandez', age: 19, gender: 'Female', state: 'California' },\n        ],\n        rowCount: 4,\n      },\n      charts: null,\n    };\n  }\n\n  // Default response\n  return {\n    success: true,\n    message: `I've processed your query: \"${query}\". Here's what I found in the sample data.`,\n    data: {\n      rows: generateSampleData(),\n      rowCount: 10,\n    },\n    charts: null,\n  };\n};\n\n// Helper function to generate sample data\nconst generateSampleData = () => {\n  return [\n    { id: 1, name: 'John Smith', age: 17, gender: 'Male', state: 'California', status: 'Pending' },\n    { id: 2, name: 'Emily Johnson', age: 25, gender: 'Female', state: 'New York', status: 'Approved' },\n    { id: 3, name: 'Michael Brown', age: 19, gender: 'Male', state: 'Texas', status: 'Pending' },\n    { id: 4, name: 'Sarah Davis', age: 22, gender: 'Female', state: 'California', status: 'Approved' },\n    { id: 5, name: 'James Wilson', age: 18, gender: 'Male', state: 'Florida', status: 'Rejected' },\n    { id: 6, name: 'Linda Martinez', age: 30, gender: 'Female', state: 'California', status: 'Approved' },\n    { id: 7, name: 'Robert Garcia', age: 16, gender: 'Male', state: 'Arizona', status: 'Pending' },\n    { id: 8, name: 'Patricia Rodriguez', age: 24, gender: 'Female', state: 'Illinois', status: 'Approved' },\n    { id: 9, name: 'Christopher Lee', age: 21, gender: 'Male', state: 'Washington', status: 'Pending' },\n    { id: 10, name: 'Maria Hernandez', age: 19, gender: 'Female', state: 'California', status: 'Approved' },\n  ];\n};\n\nconst generateAgeDistribution = () => {\n  return generateSampleData().map(person => ({\n    name: person.name,\n    age: person.age,\n    age_group: \n      person.age <= 18 ? '16-18' :\n      person.age <= 21 ? '19-21' :\n      person.age <= 24 ? '22-24' : '25+',\n  }));\n};\n\n// Mock chart configurations\nexport const mockChartConfigs = {\n  line: {\n    type: 'line',\n    data: Array.from({ length: 10 }, (_, i) => ({\n      x: `Day ${i + 1}`,\n      y: Math.floor(Math.random() * 100),\n    })),\n    config: {\n      xField: 'x',\n      yField: 'y',\n    },\n  },\n  bar: {\n    type: 'bar',\n    data: [\n      { category: 'Category A', value: 30 },\n      { category: 'Category B', value: 45 },\n      { category: 'Category C', value: 28 },\n      { category: 'Category D', value: 50 },\n    ],\n    config: {\n      xField: 'value',\n      yField: 'category',\n    },\n  },\n};\n\nexport default {\n  getMockResponse,\n  mockChartConfigs,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}