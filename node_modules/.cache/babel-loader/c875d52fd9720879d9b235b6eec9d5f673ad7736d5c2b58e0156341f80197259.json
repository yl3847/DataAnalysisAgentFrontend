{"ast":null,"code":"import { idOf, positionOf } from '@antv/g6';\nimport { memoize } from 'lodash';\n/**\n * Get the side of the node relative to the reference node\n * @param nodeData - Node data\n * @param parentData - Reference node data\n * @returns The side of the node relative to the reference node\n */\nexport const getRelativeSide = memoize((nodeData, refNodeData) => {\n  if (!refNodeData) return 'center';\n  const nodePositionX = positionOf(nodeData)[0];\n  const refNodePositionX = positionOf(refNodeData)[0];\n  return refNodePositionX > nodePositionX ? 'left' : 'right';\n}, (nodeData, refNodeData) => refNodeData ? [positionOf(nodeData), positionOf(refNodeData)].flat().join('-') : 'center');\n/**\n * Get the side of the node relative to the parent node\n * @param graph - Graph instance\n * @param data - Node data\n * @returns The side of the node relative to the parent node\n */\nexport const getNodeSide = (graph, data) => {\n  const parentData = graph.getParentData(idOf(data), 'tree');\n  return getRelativeSide(data, parentData);\n};\n/**\n * Whether the node is a leaf node\n * @param nodeData - node data\n * @returns Whether the node is a leaf node\n */\nexport const isLeafNode = nodeData => {\n  return !nodeData.children || nodeData.children.length === 0;\n};","map":{"version":3,"names":["idOf","positionOf","memoize","getRelativeSide","nodeData","refNodeData","nodePositionX","refNodePositionX","flat","join","getNodeSide","graph","data","parentData","getParentData","isLeafNode","children","length"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/graphs/es/core/utils/node.js"],"sourcesContent":["import { idOf, positionOf } from '@antv/g6';\nimport { memoize } from 'lodash';\n/**\n * Get the side of the node relative to the reference node\n * @param nodeData - Node data\n * @param parentData - Reference node data\n * @returns The side of the node relative to the reference node\n */\nexport const getRelativeSide = memoize((nodeData, refNodeData) => {\n    if (!refNodeData)\n        return 'center';\n    const nodePositionX = positionOf(nodeData)[0];\n    const refNodePositionX = positionOf(refNodeData)[0];\n    return refNodePositionX > nodePositionX ? 'left' : 'right';\n}, (nodeData, refNodeData) => refNodeData ? [positionOf(nodeData), positionOf(refNodeData)].flat().join('-') : 'center');\n/**\n * Get the side of the node relative to the parent node\n * @param graph - Graph instance\n * @param data - Node data\n * @returns The side of the node relative to the parent node\n */\nexport const getNodeSide = (graph, data) => {\n    const parentData = graph.getParentData(idOf(data), 'tree');\n    return getRelativeSide(data, parentData);\n};\n/**\n * Whether the node is a leaf node\n * @param nodeData - node data\n * @returns Whether the node is a leaf node\n */\nexport const isLeafNode = (nodeData) => {\n    return !nodeData.children || nodeData.children.length === 0;\n};\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,QAAQ,UAAU;AAC3C,SAASC,OAAO,QAAQ,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGD,OAAO,CAAC,CAACE,QAAQ,EAAEC,WAAW,KAAK;EAC9D,IAAI,CAACA,WAAW,EACZ,OAAO,QAAQ;EACnB,MAAMC,aAAa,GAAGL,UAAU,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAMG,gBAAgB,GAAGN,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;EACnD,OAAOE,gBAAgB,GAAGD,aAAa,GAAG,MAAM,GAAG,OAAO;AAC9D,CAAC,EAAE,CAACF,QAAQ,EAAEC,WAAW,KAAKA,WAAW,GAAG,CAACJ,UAAU,CAACG,QAAQ,CAAC,EAAEH,UAAU,CAACI,WAAW,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;EACxC,MAAMC,UAAU,GAAGF,KAAK,CAACG,aAAa,CAACd,IAAI,CAACY,IAAI,CAAC,EAAE,MAAM,CAAC;EAC1D,OAAOT,eAAe,CAACS,IAAI,EAAEC,UAAU,CAAC;AAC5C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAIX,QAAQ,IAAK;EACpC,OAAO,CAACA,QAAQ,CAACY,QAAQ,IAAIZ,QAAQ,CAACY,QAAQ,CAACC,MAAM,KAAK,CAAC;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}