{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { min, max } from '@antv/vendor/d3-array';\nimport { flow } from './utils/flow';\nimport { tagCloud } from './utils/d3-cloud';\nconst DEFAULT_OPTIONS = {\n  fontSize: [20, 60],\n  font: 'Impact',\n  padding: 2,\n  rotate: function () {\n    return (~~(Math.random() * 6) - 3) * 30;\n  }\n};\n/**\n * Process the image mask of wordCloud.\n * @param img\n * @returns\n */\nexport function processImageMask(img) {\n  return new Promise((res, rej) => {\n    if (img instanceof HTMLImageElement) {\n      res(img);\n      return;\n    }\n    if (typeof img === 'string') {\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.src = img;\n      image.onload = () => res(image);\n      image.onerror = () => {\n        console.error(`'image ${img} load failed !!!'`);\n        rej();\n      };\n      return;\n    }\n    rej();\n  });\n}\n/**\n * normalize fontSize range to d3-cloud fontSize function.\n * @param fontSize\n * @param range\n * @returns\n */\nexport function normalizeFontSize(fontSize, range) {\n  if (typeof fontSize === 'function') return fontSize;\n  if (Array.isArray(fontSize)) {\n    const [fMin, fMax] = fontSize;\n    if (!range) return () => (fMax + fMin) / 2;\n    const [min, max] = range;\n    if (max === min) return () => (fMax + fMin) / 2;\n    return ({\n      value\n    }) => (fMax - fMin) / (max - min) * (value - min) + fMin;\n  }\n  return () => fontSize;\n}\nexport const WordCloud = (options, context) => {\n  return data => __awaiter(void 0, void 0, void 0, function* () {\n    const cloudOptions = Object.assign({}, DEFAULT_OPTIONS, options, {\n      canvas: context.createCanvas\n    });\n    const layout = tagCloud();\n    yield flow(layout, cloudOptions).set('fontSize', v => {\n      const arr = data.map(d => d.value);\n      return normalizeFontSize(v, [min(arr), max(arr)]);\n    }).set('font').set('fontStyle').set('fontWeight').set('padding').set('rotate').set('size').set('spiral').set('timeInterval').set('random').set('text').set('on').set('canvas').setAsync('imageMask', processImageMask, layout.createMask);\n    layout.words([...data]);\n    const result = layout.start();\n    const [cw, ch] = cloudOptions.size;\n    const defaultBounds = [{\n      x: 0,\n      y: 0\n    }, {\n      x: cw,\n      y: ch\n    }];\n    const {\n      _bounds: bounds = defaultBounds,\n      _tags,\n      hasImage\n    } = result;\n    const tags = _tags.map(_a => {\n      var {\n          x,\n          y,\n          font\n        } = _a,\n        rest = __rest(_a, [\"x\", \"y\", \"font\"]);\n      return Object.assign(Object.assign({}, rest), {\n        x: x + cw / 2,\n        y: y + ch / 2,\n        fontFamily: font\n      });\n    });\n    // Append two data to replace the corner of top-left and bottom-right, avoid calculate the actual bounds will occur some error.\n    const [{\n      x: tlx,\n      y: tly\n    }, {\n      x: brx,\n      y: bry\n    }] = bounds;\n    const invisibleText = {\n      text: '',\n      value: 0,\n      opacity: 0,\n      fontSize: 0\n    };\n    tags.push(Object.assign(Object.assign({}, invisibleText), {\n      x: hasImage ? 0 : tlx,\n      y: hasImage ? 0 : tly\n    }), Object.assign(Object.assign({}, invisibleText), {\n      x: hasImage ? cw : brx,\n      y: hasImage ? ch : bry\n    }));\n    return tags;\n  });\n};\nWordCloud.props = {};","map":{"version":3,"names":["min","max","flow","tagCloud","DEFAULT_OPTIONS","fontSize","font","padding","rotate","Math","random","processImageMask","img","Promise","res","rej","HTMLImageElement","image","Image","crossOrigin","src","onload","onerror","console","error","normalizeFontSize","range","Array","isArray","fMin","fMax","value","WordCloud","options","context","data","__awaiter","cloudOptions","Object","assign","canvas","createCanvas","layout","set","v","arr","map","d","setAsync","createMask","words","result","start","cw","ch","size","defaultBounds","x","y","_bounds","bounds","_tags","hasImage","tags","_a","rest","__rest","fontFamily","tlx","tly","brx","bry","invisibleText","text","opacity","push","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/data/wordCloud.ts"],"sourcesContent":["import { min, max } from '@antv/vendor/d3-array';\nimport { DataComponent as DC } from '../runtime';\nimport { flow } from './utils/flow';\nimport { tagCloud } from './utils/d3-cloud';\n\ntype Callable<T> = T | ((datum: any, i: number) => T);\n\n/**\n * See the document here: https://github.com/jasondavies/d3-cloud.\n */\nexport type WordCloudOptions = {\n  /**\n   * Internally, the layout uses setInterval to avoid locking up the browserâ€™s event loop.\n   * If specified, time is the maximum amount of time that can be spent during the current timestep.\n   * If not specified, returns the current maximum time interval, which defaults to Infinity.\n   */\n  timeInterval: number;\n  /**\n   * If specified, sets the words array. If not specified, returns the current words array, which defaults to [].\n   */\n  words: any[];\n  /**\n   * If specified, sets the rectangular [width, height] of the layout.\n   * If not specified, returns the current size, which defaults to [1, 1].\n   */\n  size: [number, number];\n  /**\n   * If specified, sets the font accessor function, which indicates the font face for each word.\n   * If not specified, returns the current font accessor function, which defaults to \"serif\".\n   * A constant may be specified instead of a function.\n   */\n  font: Callable<CSSStyleDeclaration['fontFamily']>;\n  /**\n   * TODO: Cname of font.\n   */\n  fontFamily: Callable<CSSStyleDeclaration['fontFamily']>;\n  /**\n   * If specified, sets the fontStyle accessor function, which indicates the font style for each word.\n   * If not specified, returns the current fontStyle accessor function, which defaults to \"normal\".\n   * A constant may be specified instead of a function.\n   */\n  fontStyle: Callable<CSSStyleDeclaration['fontFamily']>;\n  /**\n   * If specified, sets the fontWeight accessor function, which indicates the font weight for each word.\n   * If not specified, returns the current fontWeight accessor function, which defaults to \"normal\".\n   * A constant may be specified instead of a function.\n   */\n  fontWeight: Callable<CSSStyleDeclaration['fontFamily']>;\n  /**\n   * If specified, sets the fontSize accessor function, which indicates the numerical font size for each word.\n   * If not specified, returns the current fontSize accessor function, which defaults to:\n   *\n   * > function(d) { return Math.sqrt(d.value); }\n   *\n   * A constant may be specified instead of a function.\n   *\n   * If the fontSize is an array, it will be normalized to the range of [min, max] of the data value.\n   * If the fontSize is a function, it will be called with the data value.\n   * If the fontSize is a number, it will be used as the constant value.\n   */\n  fontSize: number | [number, number] | ((d: any) => number);\n  /**\n   * If specified, sets the rotate accessor function, which indicates the rotation angle (in degrees) for each word.\n   * If not specified, returns the current rotate accessor function, which defaults to:\n   *\n   * function() { return (~~(Math.random() * 6) - 3) * 30; }\n   *\n   * A constant may be specified instead of a function.\n   */\n  rotate: Callable<number>;\n  /**\n   * If specified, sets the text accessor function, which indicates the text for each word.\n   * If not specified, returns the current text accessor function, which defaults to:\n   *\n   * function(d) { return d.text; }\n   *\n   * A constant may be specified instead of a function.\n   */\n  text: Callable<string>;\n  /**\n   * If specified, sets the padding accessor function, which indicates the numerical padding for each word.\n   * If not specified, returns the current padding, which defaults to 1.\n   */\n  padding: Callable<number>;\n\n  /**\n   * If specified, sets the internal random number generator, used for selecting the initial position of each word,\n   *  and the clockwise/counterclockwise direction of the spiral for each word.\n   * This should return a number in the range [0, 1).\n   * If not specified, returns the current random number generator, which defaults to Math.random.\n   */\n  random: () => number;\n\n  /**\n   * If specified, sets the spiral used for positioning words.\n   */\n  spiral: any;\n\n  /**\n   * If specified, sets the image mask used for positioning words.\n   */\n  canvas: HTMLCanvasElement;\n};\n\nconst DEFAULT_OPTIONS = {\n  fontSize: [20, 60],\n  font: 'Impact',\n  padding: 2,\n  rotate: function () {\n    return (~~(Math.random() * 6) - 3) * 30;\n  },\n};\n\n/**\n * Process the image mask of wordCloud.\n * @param img\n * @returns\n */\nexport function processImageMask(\n  img: HTMLImageElement | string,\n): Promise<HTMLImageElement> {\n  return new Promise((res, rej) => {\n    if (img instanceof HTMLImageElement) {\n      res(img);\n      return;\n    }\n    if (typeof img === 'string') {\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.src = img;\n      image.onload = () => res(image);\n      image.onerror = () => {\n        console.error(`'image ${img} load failed !!!'`);\n        rej();\n      };\n      return;\n    }\n    rej();\n  });\n}\n\n/**\n * normalize fontSize range to d3-cloud fontSize function.\n * @param fontSize\n * @param range\n * @returns\n */\nexport function normalizeFontSize(fontSize: any, range?: [number, number]) {\n  if (typeof fontSize === 'function') return fontSize;\n\n  if (Array.isArray(fontSize)) {\n    const [fMin, fMax] = fontSize;\n    if (!range) return () => (fMax + fMin) / 2;\n\n    const [min, max] = range;\n    if (max === min) return () => (fMax + fMin) / 2;\n\n    return ({ value }) => ((fMax - fMin) / (max - min)) * (value - min) + fMin;\n  }\n  return () => fontSize;\n}\n\nexport const WordCloud: DC<Partial<WordCloudOptions>> = (options, context) => {\n  return async (data) => {\n    const cloudOptions = Object.assign({}, DEFAULT_OPTIONS, options, {\n      canvas: context.createCanvas,\n    });\n    const layout = tagCloud();\n\n    await flow(layout, cloudOptions)\n      .set('fontSize', (v) => {\n        const arr = data.map((d) => d.value);\n        return normalizeFontSize(v, [min(arr) as any, max(arr) as any]);\n      })\n      .set('font')\n      .set('fontStyle')\n      .set('fontWeight')\n      .set('padding')\n      .set('rotate')\n      .set('size')\n      .set('spiral')\n      .set('timeInterval')\n      .set('random')\n      .set('text')\n      .set('on')\n      .set('canvas')\n      .setAsync('imageMask', processImageMask, layout.createMask);\n\n    layout.words([...data]);\n\n    const result = layout.start();\n\n    const [cw, ch] = cloudOptions.size;\n    const defaultBounds = [\n      { x: 0, y: 0 },\n      { x: cw, y: ch },\n    ];\n\n    const { _bounds: bounds = defaultBounds, _tags, hasImage } = result;\n\n    const tags = _tags.map(({ x, y, font, ...rest }) => ({\n      ...rest,\n      x: x + cw / 2,\n      y: y + ch / 2,\n      fontFamily: font,\n    }));\n\n    // Append two data to replace the corner of top-left and bottom-right, avoid calculate the actual bounds will occur some error.\n    const [{ x: tlx, y: tly }, { x: brx, y: bry }] = bounds;\n    const invisibleText = { text: '', value: 0, opacity: 0, fontSize: 0 };\n    tags.push(\n      {\n        ...invisibleText,\n        x: hasImage ? 0 : tlx,\n        y: hasImage ? 0 : tly,\n      },\n      {\n        ...invisibleText,\n        x: hasImage ? cw : brx,\n        y: hasImage ? ch : bry,\n      },\n    );\n\n    return tags;\n  };\n};\n\nWordCloud.props = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}