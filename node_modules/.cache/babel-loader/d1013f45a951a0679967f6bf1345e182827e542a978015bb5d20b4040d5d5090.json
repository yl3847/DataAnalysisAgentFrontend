{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { deepMix } from '@antv/util';\nimport { extent, group, max } from '@antv/vendor/d3-array';\nimport { calcBBox } from '../utils/vector';\nimport { Container } from '../utils/container';\nimport { indexOf } from '../utils/array';\nimport { useDefaultAdaptor, useOverrideAdaptor } from './utils';\nconst setScale = useDefaultAdaptor(options => {\n  const {\n    encode,\n    data,\n    scale,\n    shareSize = false\n  } = options;\n  const {\n    x,\n    y\n  } = encode;\n  const flexDomain = (encode, channel) => {\n    var _a;\n    if (encode === undefined || !shareSize) return {};\n    const groups = group(data, d => d[encode]);\n    const domain = ((_a = scale === null || scale === void 0 ? void 0 : scale[channel]) === null || _a === void 0 ? void 0 : _a.domain) || Array.from(groups.keys());\n    const flex = domain.map(key => {\n      if (!groups.has(key)) return 1;\n      return groups.get(key).length;\n    });\n    return {\n      domain,\n      flex\n    };\n  };\n  return {\n    scale: {\n      x: Object.assign(Object.assign({\n        paddingOuter: 0,\n        paddingInner: 0.1,\n        guide: x === undefined ? null : {\n          position: 'top'\n        }\n      }, x === undefined && {\n        paddingInner: 0\n      }), flexDomain(x, 'x')),\n      y: Object.assign(Object.assign({\n        range: [0, 1],\n        paddingOuter: 0,\n        paddingInner: 0.1,\n        guide: y === undefined ? null : {\n          position: 'right'\n        }\n      }, y === undefined && {\n        paddingInner: 0\n      }), flexDomain(y, 'y'))\n    }\n  };\n});\n/**\n * BFS view tree and using the last discovered color encode\n * as the top-level encode for this plot. This is useful when\n * color encode and color scale is specified in mark node.\n * It makes sense because the whole facet should shared the same\n * color encoding, but it also can be override with explicity\n * encode and scale specification.\n */\nexport const inferColor = useOverrideAdaptor(options => {\n  const {\n    data,\n    scale,\n    legend\n  } = options;\n  const discovered = [options];\n  let encodeColor;\n  let scaleColor;\n  let legendColor;\n  while (discovered.length) {\n    const node = discovered.shift();\n    const {\n      children,\n      encode = {},\n      scale = {},\n      legend = {}\n    } = node;\n    const {\n      color: c\n    } = encode;\n    const {\n      color: cs\n    } = scale;\n    const {\n      color: cl\n    } = legend;\n    if (c !== undefined) encodeColor = c;\n    if (cs !== undefined) scaleColor = cs;\n    if (cl !== undefined) legendColor = cl;\n    if (Array.isArray(children)) {\n      discovered.push(...children);\n    }\n  }\n  const domainColor = () => {\n    var _a;\n    const domain = (_a = scale === null || scale === void 0 ? void 0 : scale.color) === null || _a === void 0 ? void 0 : _a.domain;\n    if (domain !== undefined) return [domain];\n    if (encodeColor === undefined) return [undefined];\n    const color = typeof encodeColor === 'function' ? encodeColor : d => d[encodeColor];\n    const values = data.map(color);\n    if (values.some(d => typeof d === 'number')) return [extent(values)];\n    return [Array.from(new Set(values)), 'ordinal'];\n  };\n  const title = typeof encodeColor === 'string' ? encodeColor : '';\n  const [domain, type] = domainColor();\n  return Object.assign({\n    encode: {\n      color: {\n        type: 'column',\n        value: domain !== null && domain !== void 0 ? domain : []\n      }\n    },\n    scale: {\n      color: deepMix({}, scaleColor, {\n        domain,\n        type\n      })\n    }\n  }, legend === undefined && {\n    legend: {\n      color: deepMix({\n        title\n      }, legendColor)\n    }\n  });\n});\nexport const setAnimation = useDefaultAdaptor(() => ({\n  animate: {\n    enterType: 'fadeIn'\n  }\n}));\nexport const setStyle = useOverrideAdaptor(() => ({\n  frame: false,\n  encode: {\n    shape: 'hollow'\n  },\n  style: {\n    lineWidth: 0\n  }\n}));\nexport const toCell = useOverrideAdaptor(() => ({\n  type: 'cell'\n}));\n/**\n * Do not set cell data directly, the children will get wrong do if do\n * so. Use transform to set new data.\n **/\nexport const setData = useOverrideAdaptor(options => {\n  const {\n    data\n  } = options;\n  const connector = {\n    type: 'custom',\n    callback: () => {\n      const {\n        data,\n        encode\n      } = options;\n      const {\n        x,\n        y\n      } = encode;\n      const X = x ? Array.from(new Set(data.map(d => d[x]))) : [];\n      const Y = y ? Array.from(new Set(data.map(d => d[y]))) : [];\n      const cellData = () => {\n        if (X.length && Y.length) {\n          const cellData = [];\n          for (const vx of X) {\n            for (const vy of Y) {\n              cellData.push({\n                [x]: vx,\n                [y]: vy\n              });\n            }\n          }\n          return cellData;\n        }\n        if (X.length) return X.map(d => ({\n          [x]: d\n        }));\n        if (Y.length) return Y.map(d => ({\n          [y]: d\n        }));\n      };\n      return cellData();\n    }\n  };\n  return {\n    data: {\n      type: 'inline',\n      value: data,\n      transform: [connector]\n    }\n  };\n});\n/**\n * @todo Move some options assignment to runtime.\n */\nexport const setChildren = useOverrideAdaptor((options, subLayout = subLayoutRect, createGuideX = createGuideXRect, createGuideY = createGuideYRect, childOptions = {}) => {\n  const {\n    data: dataValue,\n    encode,\n    children,\n    scale: facetScale,\n    x: originX = 0,\n    y: originY = 0,\n    shareData = false,\n    key: viewKey\n  } = options;\n  const {\n    value: data\n  } = dataValue;\n  // Only support field encode now.\n  const {\n    x: encodeX,\n    y: encodeY\n  } = encode;\n  const {\n    color: facetScaleColor\n  } = facetScale;\n  const {\n    domain: facetDomainColor\n  } = facetScaleColor;\n  const createChildren = (visualData, scale, layout) => {\n    const {\n      x: scaleX,\n      y: scaleY\n    } = scale;\n    const {\n      paddingLeft,\n      paddingTop,\n      marginLeft,\n      marginTop\n    } = layout;\n    const {\n      domain: domainX\n    } = scaleX.getOptions();\n    const {\n      domain: domainY\n    } = scaleY.getOptions();\n    const index = indexOf(visualData);\n    const bboxs = visualData.map(subLayout);\n    const values = visualData.map(({\n      x,\n      y\n    }) => [scaleX.invert(x), scaleY.invert(y)]);\n    const filters = values.map(([fx, fy]) => d => {\n      const {\n        [encodeX]: x,\n        [encodeY]: y\n      } = d;\n      const inX = encodeX !== undefined ? x === fx : true;\n      const inY = encodeY !== undefined ? y === fy : true;\n      return inX && inY;\n    });\n    const facetData2d = filters.map(f => data.filter(f));\n    const maxDataDomain = shareData ? max(facetData2d, data => data.length) : undefined;\n    const facets = values.map(([fx, fy]) => ({\n      columnField: encodeX,\n      columnIndex: domainX.indexOf(fx),\n      columnValue: fx,\n      columnValuesLength: domainX.length,\n      rowField: encodeY,\n      rowIndex: domainY.indexOf(fy),\n      rowValue: fy,\n      rowValuesLength: domainY.length\n    }));\n    const normalizedChildren = facets.map(facet => {\n      if (Array.isArray(children)) return children;\n      return [children(facet)].flat(1);\n    });\n    return index.flatMap(i => {\n      const [left, top, width, height] = bboxs[i];\n      const facet = facets[i];\n      const facetData = facetData2d[i];\n      const children = normalizedChildren[i];\n      return children.map(_a => {\n        var _b, _c;\n        var {\n            scale,\n            key,\n            facet: isFacet = true,\n            axis = {},\n            legend = {}\n          } = _a,\n          rest = __rest(_a, [\"scale\", \"key\", \"facet\", \"axis\", \"legend\"]);\n        const guideY = ((_b = scale === null || scale === void 0 ? void 0 : scale.y) === null || _b === void 0 ? void 0 : _b.guide) || axis.y;\n        const guideX = ((_c = scale === null || scale === void 0 ? void 0 : scale.x) === null || _c === void 0 ? void 0 : _c.guide) || axis.x;\n        const defaultScale = {\n          x: {\n            tickCount: encodeX ? 5 : undefined\n          },\n          y: {\n            tickCount: encodeY ? 5 : undefined\n          }\n        };\n        const newData = isFacet ? facetData : facetData.length === 0 ? [] : data;\n        const newScale = {\n          color: {\n            domain: facetDomainColor\n          }\n        };\n        const newAxis = {\n          x: createGuide(guideX, createGuideX)(facet, newData),\n          y: createGuide(guideY, createGuideY)(facet, newData)\n        };\n        return Object.assign(Object.assign({\n          key: `${key}-${i}`,\n          data: newData,\n          margin: 0,\n          x: left + paddingLeft + originX + marginLeft,\n          y: top + paddingTop + originY + marginTop,\n          parentKey: viewKey,\n          width,\n          height,\n          paddingLeft: 0,\n          paddingRight: 0,\n          paddingTop: 0,\n          paddingBottom: 0,\n          frame: newData.length ? true : false,\n          dataDomain: maxDataDomain,\n          scale: deepMix(defaultScale, scale, newScale),\n          axis: deepMix({}, axis, newAxis),\n          // Hide all legends for child mark by default,\n          // they are displayed in the top-level.\n          legend: false\n        }, rest), childOptions);\n      });\n    });\n  };\n  return {\n    children: createChildren\n  };\n});\nfunction subLayoutRect(data) {\n  const {\n    points\n  } = data;\n  return calcBBox(points);\n}\n/**\n * Inner guide not show title, tickLine, label and subTickLine,\n * if data is empty, do not show guide.\n */\nexport function createInnerGuide(guide, data) {\n  return data.length ? deepMix({\n    title: false,\n    tick: null,\n    label: null\n  }, guide) : deepMix({\n    title: false,\n    tick: null,\n    label: null,\n    grid: null\n  }, guide);\n}\nfunction createGuideXRect(guide) {\n  return (facet, data) => {\n    const {\n      rowIndex,\n      rowValuesLength,\n      columnIndex,\n      columnValuesLength\n    } = facet;\n    // Only the bottom-most facet show axisX.\n    if (rowIndex !== rowValuesLength - 1) return createInnerGuide(guide, data);\n    // Only the bottom-left facet show title.\n    const title = columnIndex !== columnValuesLength - 1 ? false : undefined;\n    // If data is empty, do not show cell.\n    const grid = data.length ? undefined : null;\n    return deepMix({\n      title,\n      grid\n    }, guide);\n  };\n}\nfunction createGuideYRect(guide) {\n  return (facet, data) => {\n    const {\n      rowIndex,\n      columnIndex\n    } = facet;\n    // Only the left-most facet show axisY.\n    if (columnIndex !== 0) return createInnerGuide(guide, data);\n    // Only the left-top facet show title.\n    const title = rowIndex !== 0 ? false : undefined;\n    // If data is empty, do not show cell.\n    const grid = data.length ? undefined : null;\n    return deepMix({\n      title,\n      grid\n    }, guide);\n  };\n}\nfunction createGuide(guide, factory) {\n  if (typeof guide === 'function') return guide;\n  if (guide === null || guide === false) return () => null;\n  return factory(guide);\n}\nexport const FacetRect = () => {\n  return options => {\n    const newOptions = Container.of(options).call(toCell).call(inferColor).call(setAnimation).call(setScale).call(setStyle).call(setData).call(setChildren).value();\n    return [newOptions];\n  };\n};\nFacetRect.props = {};","map":{"version":3,"names":["deepMix","extent","group","max","calcBBox","Container","indexOf","useDefaultAdaptor","useOverrideAdaptor","setScale","options","encode","data","scale","shareSize","x","y","flexDomain","channel","undefined","groups","d","domain","_a","Array","from","keys","flex","map","key","has","get","length","Object","assign","paddingOuter","paddingInner","guide","position","range","inferColor","legend","discovered","encodeColor","scaleColor","legendColor","node","shift","children","color","c","cs","cl","isArray","push","domainColor","values","some","Set","title","type","value","setAnimation","animate","enterType","setStyle","frame","shape","style","lineWidth","toCell","setData","connector","callback","X","Y","cellData","vx","vy","transform","setChildren","subLayout","subLayoutRect","createGuideX","createGuideXRect","createGuideY","createGuideYRect","childOptions","dataValue","facetScale","originX","originY","shareData","viewKey","encodeX","encodeY","facetScaleColor","facetDomainColor","createChildren","visualData","layout","scaleX","scaleY","paddingLeft","paddingTop","marginLeft","marginTop","domainX","getOptions","domainY","index","bboxs","invert","filters","fx","fy","inX","inY","facetData2d","f","filter","maxDataDomain","facets","columnField","columnIndex","columnValue","columnValuesLength","rowField","rowIndex","rowValue","rowValuesLength","normalizedChildren","facet","flat","flatMap","i","left","top","width","height","facetData","isFacet","axis","rest","__rest","guideY","_b","guideX","_c","defaultScale","tickCount","newData","newScale","newAxis","createGuide","margin","parentKey","paddingRight","paddingBottom","dataDomain","points","createInnerGuide","tick","label","grid","factory","FacetRect","newOptions","of","call","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/composition/facetRect.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport { extent, group, max } from '@antv/vendor/d3-array';\nimport {\n  CompositionComponent as CC,\n  G2MarkChildrenCallback,\n  G2ViewTree,\n  Node,\n} from '../runtime';\nimport { FacetRectComposition } from '../spec';\nimport { calcBBox } from '../utils/vector';\nimport { Container } from '../utils/container';\nimport { indexOf } from '../utils/array';\nimport { useDefaultAdaptor, useOverrideAdaptor } from './utils';\n\nexport type SubLayout = (data?: any) => number[];\n\nconst setScale = useDefaultAdaptor<G2ViewTree>((options) => {\n  const { encode, data, scale, shareSize = false } = options;\n  const { x, y } = encode;\n  const flexDomain = (encode: string, channel: string) => {\n    if (encode === undefined || !shareSize) return {};\n    const groups = group(data, (d) => d[encode]);\n    const domain = scale?.[channel]?.domain || Array.from(groups.keys());\n    const flex = domain.map((key) => {\n      if (!groups.has(key)) return 1;\n      return groups.get(key).length;\n    });\n    return { domain, flex };\n  };\n  return {\n    scale: {\n      x: {\n        paddingOuter: 0,\n        paddingInner: 0.1,\n        guide: x === undefined ? null : { position: 'top' },\n        ...(x === undefined && { paddingInner: 0 }),\n        ...flexDomain(x, 'x'),\n      },\n      y: {\n        range: [0, 1],\n        paddingOuter: 0,\n        paddingInner: 0.1,\n        guide: y === undefined ? null : { position: 'right' },\n        ...(y === undefined && { paddingInner: 0 }),\n        ...flexDomain(y, 'y'),\n      },\n    },\n  };\n});\n\n/**\n * BFS view tree and using the last discovered color encode\n * as the top-level encode for this plot. This is useful when\n * color encode and color scale is specified in mark node.\n * It makes sense because the whole facet should shared the same\n * color encoding, but it also can be override with explicity\n * encode and scale specification.\n */\nexport const inferColor = useOverrideAdaptor<G2ViewTree>(\n  (options: G2ViewTree) => {\n    const { data, scale, legend } = options;\n    const discovered = [options];\n    let encodeColor;\n    let scaleColor;\n    let legendColor;\n    while (discovered.length) {\n      const node = discovered.shift();\n      const { children, encode = {}, scale = {}, legend = {} } = node;\n      const { color: c } = encode;\n      const { color: cs } = scale;\n      const { color: cl } = legend;\n      if (c !== undefined) encodeColor = c;\n      if (cs !== undefined) scaleColor = cs;\n      if (cl !== undefined) legendColor = cl;\n      if (Array.isArray(children)) {\n        discovered.push(...children);\n      }\n    }\n\n    const domainColor = () => {\n      const domain = scale?.color?.domain;\n      if (domain !== undefined) return [domain];\n      if (encodeColor === undefined) return [undefined];\n      const color =\n        typeof encodeColor === 'function' ? encodeColor : (d) => d[encodeColor];\n      const values = data.map(color);\n      if (values.some((d) => typeof d === 'number')) return [extent(values)];\n      return [Array.from(new Set(values)), 'ordinal'];\n    };\n\n    const title = typeof encodeColor === 'string' ? encodeColor : '';\n    const [domain, type] = domainColor();\n\n    return {\n      encode: { color: { type: 'column', value: domain ?? [] } },\n      scale: { color: deepMix({}, scaleColor, { domain, type }) },\n      ...(legend === undefined && {\n        legend: { color: deepMix({ title }, legendColor) },\n      }),\n    };\n  },\n);\n\nexport const setAnimation = useDefaultAdaptor<G2ViewTree>(() => ({\n  animate: {\n    enterType: 'fadeIn',\n  },\n}));\n\nexport const setStyle = useOverrideAdaptor<G2ViewTree>(() => ({\n  frame: false,\n  encode: {\n    shape: 'hollow',\n  },\n  style: {\n    lineWidth: 0,\n  },\n}));\n\nexport const toCell = useOverrideAdaptor<G2ViewTree>(() => ({\n  type: 'cell',\n}));\n\n/**\n * Do not set cell data directly, the children will get wrong do if do\n * so. Use transform to set new data.\n **/\nexport const setData = useOverrideAdaptor<G2ViewTree>((options) => {\n  const { data } = options;\n  const connector = {\n    type: 'custom',\n    callback: () => {\n      const { data, encode } = options;\n      const { x, y } = encode;\n      const X = x ? Array.from(new Set(data.map((d) => d[x]))) : [];\n      const Y = y ? Array.from(new Set(data.map((d) => d[y]))) : [];\n      const cellData = () => {\n        if (X.length && Y.length) {\n          const cellData = [];\n          for (const vx of X) {\n            for (const vy of Y) {\n              cellData.push({ [x]: vx, [y]: vy });\n            }\n          }\n          return cellData;\n        }\n        if (X.length) return X.map((d) => ({ [x]: d }));\n        if (Y.length) return Y.map((d) => ({ [y]: d }));\n      };\n      return cellData();\n    },\n  };\n  return {\n    data: { type: 'inline', value: data, transform: [connector] },\n  };\n});\n\n/**\n * @todo Move some options assignment to runtime.\n */\nexport const setChildren = useOverrideAdaptor<G2ViewTree>(\n  (\n    options,\n    subLayout: SubLayout = subLayoutRect,\n    createGuideX = createGuideXRect,\n    createGuideY = createGuideYRect,\n    childOptions = {},\n  ) => {\n    const {\n      data: dataValue,\n      encode,\n      children,\n      scale: facetScale,\n      x: originX = 0,\n      y: originY = 0,\n      shareData = false,\n      key: viewKey,\n    } = options;\n    const { value: data } = dataValue;\n    // Only support field encode now.\n    const { x: encodeX, y: encodeY } = encode;\n    const { color: facetScaleColor } = facetScale;\n    const { domain: facetDomainColor } = facetScaleColor;\n    const createChildren: G2MarkChildrenCallback = (\n      visualData,\n      scale,\n      layout,\n    ) => {\n      const { x: scaleX, y: scaleY } = scale;\n      const { paddingLeft, paddingTop, marginLeft, marginTop } = layout;\n      const { domain: domainX } = scaleX.getOptions();\n      const { domain: domainY } = scaleY.getOptions();\n      const index = indexOf(visualData);\n      const bboxs = visualData.map(subLayout);\n      const values = visualData.map(({ x, y }) => [\n        scaleX.invert(x),\n        scaleY.invert(y),\n      ]);\n      const filters = values.map(([fx, fy]) => (d) => {\n        const { [encodeX]: x, [encodeY]: y } = d;\n        const inX = encodeX !== undefined ? x === fx : true;\n        const inY = encodeY !== undefined ? y === fy : true;\n        return inX && inY;\n      });\n      const facetData2d = filters.map((f) => data.filter(f));\n      const maxDataDomain = shareData\n        ? max(facetData2d, (data) => data.length)\n        : undefined;\n      const facets = values.map(([fx, fy]) => ({\n        columnField: encodeX,\n        columnIndex: domainX.indexOf(fx),\n        columnValue: fx,\n        columnValuesLength: domainX.length,\n        rowField: encodeY,\n        rowIndex: domainY.indexOf(fy),\n        rowValue: fy,\n        rowValuesLength: domainY.length,\n      }));\n      const normalizedChildren: Node[][] = facets.map((facet) => {\n        if (Array.isArray(children)) return children;\n        return [children(facet)].flat(1);\n      });\n      return index.flatMap((i) => {\n        const [left, top, width, height] = bboxs[i];\n        const facet = facets[i];\n        const facetData = facetData2d[i];\n        const children = normalizedChildren[i];\n        return children.map(\n          ({\n            scale,\n            key,\n            facet: isFacet = true,\n            axis = {},\n            legend = {},\n            ...rest\n          }) => {\n            const guideY = scale?.y?.guide || axis.y;\n            const guideX = scale?.x?.guide || axis.x;\n            const defaultScale = {\n              x: { tickCount: encodeX ? 5 : undefined },\n              y: { tickCount: encodeY ? 5 : undefined },\n            };\n            const newData = isFacet\n              ? facetData\n              : facetData.length === 0\n              ? []\n              : data;\n            const newScale = {\n              color: { domain: facetDomainColor },\n            };\n            const newAxis = {\n              x: createGuide(guideX, createGuideX)(facet, newData),\n              y: createGuide(guideY, createGuideY)(facet, newData),\n            };\n            return {\n              key: `${key}-${i}`,\n              data: newData,\n              margin: 0,\n              x: left + paddingLeft + originX + marginLeft,\n              y: top + paddingTop + originY + marginTop,\n              parentKey: viewKey,\n              width,\n              height,\n              paddingLeft: 0,\n              paddingRight: 0,\n              paddingTop: 0,\n              paddingBottom: 0,\n              frame: newData.length ? true : false,\n              dataDomain: maxDataDomain,\n              scale: deepMix(defaultScale, scale, newScale),\n              axis: deepMix({}, axis, newAxis),\n              // Hide all legends for child mark by default,\n              // they are displayed in the top-level.\n              legend: false,\n              ...rest,\n              ...childOptions,\n            };\n          },\n        );\n      });\n    };\n    return {\n      children: createChildren,\n    };\n  },\n);\n\nfunction subLayoutRect(data) {\n  const { points } = data;\n  return calcBBox(points);\n}\n\n/**\n * Inner guide not show title, tickLine, label and subTickLine,\n * if data is empty, do not show guide.\n */\nexport function createInnerGuide(guide, data) {\n  return data.length\n    ? deepMix(\n        {\n          title: false,\n          tick: null,\n          label: null,\n        },\n        guide,\n      )\n    : deepMix(\n        {\n          title: false,\n          tick: null,\n          label: null,\n          grid: null,\n        },\n        guide,\n      );\n}\n\nfunction createGuideXRect(guide) {\n  return (facet, data) => {\n    const { rowIndex, rowValuesLength, columnIndex, columnValuesLength } =\n      facet;\n    // Only the bottom-most facet show axisX.\n    if (rowIndex !== rowValuesLength - 1) return createInnerGuide(guide, data);\n    // Only the bottom-left facet show title.\n    const title = columnIndex !== columnValuesLength - 1 ? false : undefined;\n    // If data is empty, do not show cell.\n    const grid = data.length ? undefined : null;\n    return deepMix({ title, grid }, guide);\n  };\n}\n\nfunction createGuideYRect(guide) {\n  return (facet, data) => {\n    const { rowIndex, columnIndex } = facet;\n    // Only the left-most facet show axisY.\n    if (columnIndex !== 0) return createInnerGuide(guide, data);\n    // Only the left-top facet show title.\n    const title = rowIndex !== 0 ? false : undefined;\n    // If data is empty, do not show cell.\n    const grid = data.length ? undefined : null;\n    return deepMix({ title, grid }, guide);\n  };\n}\n\nfunction createGuide(guide, factory) {\n  if (typeof guide === 'function') return guide;\n  if (guide === null || guide === false) return () => null;\n  return factory(guide);\n}\n\nexport type FacetRectOptions = Omit<FacetRectComposition, 'type'>;\n\nexport const FacetRect: CC<FacetRectOptions> = () => {\n  return (options) => {\n    const newOptions = Container.of<G2ViewTree>(options)\n      .call(toCell)\n      .call(inferColor)\n      .call(setAnimation)\n      .call(setScale)\n      .call(setStyle)\n      .call(setData)\n      .call(setChildren)\n      .value();\n    return [newOptions];\n  };\n};\n\nFacetRect.props = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}