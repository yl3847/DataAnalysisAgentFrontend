{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Matrix as MLMatrix, SingularValueDecomposition } from 'ml-matrix';\nimport { cloneFormatData, floydWarshall, getAdjMatrix, scaleMatrix } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n  center: [0, 0],\n  linkDistance: 50\n};\n/**\n * <zh/> 多维缩放算法布局\n *\n * <en/> Multidimensional scaling layout\n */\nexport class MDSLayout {\n  constructor(options = {}) {\n    this.options = options;\n    this.id = 'mds';\n    this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n  }\n  /**\n   * Return the positions of nodes and edges(if needed).\n   */\n  execute(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.genericMDSLayout(false, graph, options);\n    });\n  }\n  /**\n   * To directly assign the positions to the nodes.\n   */\n  assign(graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.genericMDSLayout(true, graph, options);\n    });\n  }\n  genericMDSLayout(assign, graph, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n      const {\n        center = [0, 0],\n        linkDistance = 50\n      } = mergedOptions;\n      const nodes = graph.getAllNodes();\n      const edges = graph.getAllEdges();\n      if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n        return handleSingleNodeGraph(graph, assign, center);\n      }\n      // the graph-theoretic distance (shortest path distance) matrix\n      const adjMatrix = getAdjMatrix({\n        nodes,\n        edges\n      }, false);\n      const distances = floydWarshall(adjMatrix);\n      handleInfinity(distances);\n      // scale the ideal edge length acoording to linkDistance\n      const scaledD = scaleMatrix(distances, linkDistance);\n      // get positions by MDS\n      const positions = runMDS(scaledD);\n      const layoutNodes = [];\n      positions.forEach((p, i) => {\n        const cnode = cloneFormatData(nodes[i]);\n        cnode.data.x = p[0] + center[0];\n        cnode.data.y = p[1] + center[1];\n        layoutNodes.push(cnode);\n      });\n      if (assign) {\n        layoutNodes.forEach(node => graph.mergeNodeData(node.id, {\n          x: node.data.x,\n          y: node.data.y\n        }));\n      }\n      const result = {\n        nodes: layoutNodes,\n        edges\n      };\n      return result;\n    });\n  }\n}\nconst handleInfinity = distances => {\n  let maxDistance = -999999;\n  distances.forEach(row => {\n    row.forEach(value => {\n      if (value === Infinity) {\n        return;\n      }\n      if (maxDistance < value) {\n        maxDistance = value;\n      }\n    });\n  });\n  distances.forEach((row, i) => {\n    row.forEach((value, j) => {\n      if (value === Infinity) {\n        distances[i][j] = maxDistance;\n      }\n    });\n  });\n};\n/**\n * mds 算法\n * @return {array} positions 计算后的节点位置数组\n */\nconst runMDS = distances => {\n  const dimension = 2;\n  // square distances\n  const M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5);\n  // double centre the rows/columns\n  const rowMeans = M.mean('row');\n  const colMeans = M.mean('column');\n  const totalMean = M.mean();\n  M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n  // take the SVD of the double centred matrix, and return the\n  // points from it\n  const ret = new SingularValueDecomposition(M);\n  const eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n  return ret.leftSingularVectors.toJSON().map(row => {\n    return MLMatrix.mul([row], [eigenValues]).toJSON()[0].splice(0, dimension);\n  });\n};","map":{"version":3,"names":["Matrix","MLMatrix","SingularValueDecomposition","cloneFormatData","floydWarshall","getAdjMatrix","scaleMatrix","handleSingleNodeGraph","DEFAULTS_LAYOUT_OPTIONS","center","linkDistance","MDSLayout","constructor","options","id","Object","assign","execute","graph","genericMDSLayout","mergedOptions","nodes","getAllNodes","edges","getAllEdges","length","adjMatrix","distances","handleInfinity","scaledD","positions","runMDS","layoutNodes","forEach","p","i","cnode","data","x","y","push","node","mergeNodeData","result","maxDistance","row","value","Infinity","j","dimension","M","mul","pow","rowMeans","mean","colMeans","totalMean","add","subRowVector","subColumnVector","ret","eigenValues","sqrt","diagonalMatrix","diagonal","leftSingularVectors","toJSON","map","splice"],"sources":["../src/mds.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}