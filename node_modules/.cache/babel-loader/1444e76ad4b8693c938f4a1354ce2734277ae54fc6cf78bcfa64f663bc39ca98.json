{"ast":null,"code":"import { isBetween } from './math';\nimport { cross, subtract } from './vector';\n/**\n * <zh/> 判断两条线段是否平行\n *\n * <en/> Judge whether two line segments are parallel\n * @param l1 - <zh/> 第一条线段 | <en/> the first line segment\n * @param l2 - <zh/> 第二条线段 | <en/> the second line segment\n * @returns <zh/> 是否平行 | <en/> whether parallel or not\n */\nexport function isLinesParallel(l1, l2) {\n  const [p1, p2] = l1;\n  const [p3, p4] = l2;\n  const v1 = subtract(p1, p2);\n  const v2 = subtract(p3, p4);\n  return cross(v1, v2).every(v => v === 0);\n}\n/**\n * <zh/> 获取两条线段的交点\n *\n * <en/> Get the intersection of two line segments\n * @param l1 - <zh/> 第一条线段 | <en/> the first line segment\n * @param l2 - <zh/> 第二条线段 | <en/> the second line segment\n * @param extended - <zh/> 是否包含延长线上的交点 | <en/> whether to include the intersection on the extension line\n * @returns <zh/> 交点 | <en/> intersection\n */\nexport function getLinesIntersection(l1, l2, extended = false) {\n  if (isLinesParallel(l1, l2)) return undefined;\n  const [p1, p2] = l1;\n  const [p3, p4] = l2;\n  const t = ((p1[0] - p3[0]) * (p3[1] - p4[1]) - (p1[1] - p3[1]) * (p3[0] - p4[0])) / ((p1[0] - p2[0]) * (p3[1] - p4[1]) - (p1[1] - p2[1]) * (p3[0] - p4[0]));\n  const u = p4[0] - p3[0] ? (p1[0] - p3[0] + t * (p2[0] - p1[0])) / (p4[0] - p3[0]) : (p1[1] - p3[1] + t * (p2[1] - p1[1])) / (p4[1] - p3[1]);\n  if (!extended && (!isBetween(t, 0, 1) || !isBetween(u, 0, 1))) return undefined;\n  return [p1[0] + t * (p2[0] - p1[0]), p1[1] + t * (p2[1] - p1[1])];\n}","map":{"version":3,"names":["isBetween","cross","subtract","isLinesParallel","l1","l2","p1","p2","p3","p4","v1","v2","every","v","getLinesIntersection","extended","undefined","t","u"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/line.ts"],"sourcesContent":["import type { Point } from '../types';\nimport { isBetween } from './math';\nimport { cross, subtract } from './vector';\n\nexport type LineSegment = [Point, Point];\n\n/**\n * <zh/> 判断两条线段是否平行\n *\n * <en/> Judge whether two line segments are parallel\n * @param l1 - <zh/> 第一条线段 | <en/> the first line segment\n * @param l2 - <zh/> 第二条线段 | <en/> the second line segment\n * @returns <zh/> 是否平行 | <en/> whether parallel or not\n */\nexport function isLinesParallel(l1: LineSegment, l2: LineSegment): boolean {\n  const [p1, p2] = l1;\n  const [p3, p4] = l2;\n  const v1 = subtract(p1, p2);\n  const v2 = subtract(p3, p4);\n  return cross(v1, v2).every((v) => v === 0);\n}\n\n/**\n * <zh/> 获取两条线段的交点\n *\n * <en/> Get the intersection of two line segments\n * @param l1 - <zh/> 第一条线段 | <en/> the first line segment\n * @param l2 - <zh/> 第二条线段 | <en/> the second line segment\n * @param extended - <zh/> 是否包含延长线上的交点 | <en/> whether to include the intersection on the extension line\n * @returns <zh/> 交点 | <en/> intersection\n */\nexport function getLinesIntersection(l1: LineSegment, l2: LineSegment, extended = false): Point | undefined {\n  if (isLinesParallel(l1, l2)) return undefined;\n\n  const [p1, p2] = l1;\n  const [p3, p4] = l2;\n\n  const t =\n    ((p1[0] - p3[0]) * (p3[1] - p4[1]) - (p1[1] - p3[1]) * (p3[0] - p4[0])) /\n    ((p1[0] - p2[0]) * (p3[1] - p4[1]) - (p1[1] - p2[1]) * (p3[0] - p4[0]));\n\n  const u =\n    p4[0] - p3[0]\n      ? (p1[0] - p3[0] + t * (p2[0] - p1[0])) / (p4[0] - p3[0])\n      : (p1[1] - p3[1] + t * (p2[1] - p1[1])) / (p4[1] - p3[1]);\n\n  if (!extended && (!isBetween(t, 0, 1) || !isBetween(u, 0, 1))) return undefined;\n\n  return [p1[0] + t * (p2[0] - p1[0]), p1[1] + t * (p2[1] - p1[1])];\n}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,QAAQ;AAClC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,UAAU;AAI1C;;;;;;;;AAQA,OAAM,SAAUC,eAAeA,CAACC,EAAe,EAAEC,EAAe;EAC9D,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,EAAE;EACnB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,EAAE;EACnB,MAAMK,EAAE,GAAGR,QAAQ,CAACI,EAAE,EAAEC,EAAE,CAAC;EAC3B,MAAMI,EAAE,GAAGT,QAAQ,CAACM,EAAE,EAAEC,EAAE,CAAC;EAC3B,OAAOR,KAAK,CAACS,EAAE,EAAEC,EAAE,CAAC,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,KAAK,CAAC,CAAC;AAC5C;AAEA;;;;;;;;;AASA,OAAM,SAAUC,oBAAoBA,CAACV,EAAe,EAAEC,EAAe,EAAEU,QAAQ,GAAG,KAAK;EACrF,IAAIZ,eAAe,CAACC,EAAE,EAAEC,EAAE,CAAC,EAAE,OAAOW,SAAS;EAE7C,MAAM,CAACV,EAAE,EAAEC,EAAE,CAAC,GAAGH,EAAE;EACnB,MAAM,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGJ,EAAE;EAEnB,MAAMY,CAAC,GACL,CAAC,CAACX,EAAE,CAAC,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC,KAAKA,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,CAAC,KACrE,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,KAAKC,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,KAAKC,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAEzE,MAAMS,CAAC,GACLT,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GACT,CAACF,EAAE,CAAC,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC,GAAGS,CAAC,IAAIV,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAKG,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC,GACvD,CAACF,EAAE,CAAC,CAAC,CAAC,GAAGE,EAAE,CAAC,CAAC,CAAC,GAAGS,CAAC,IAAIV,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAKG,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC;EAE7D,IAAI,CAACO,QAAQ,KAAK,CAACf,SAAS,CAACiB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAACjB,SAAS,CAACkB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAOF,SAAS;EAE/E,OAAO,CAACV,EAAE,CAAC,CAAC,CAAC,GAAGW,CAAC,IAAIV,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,GAAGW,CAAC,IAAIV,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}