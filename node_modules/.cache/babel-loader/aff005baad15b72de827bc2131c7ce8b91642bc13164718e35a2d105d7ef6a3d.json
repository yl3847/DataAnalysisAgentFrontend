{"ast":null,"code":"import { parseAnchor } from './anchor';\nimport { parsePlacement } from './placement';\n/**\n * <zh/> 获取节点/ combo 的位置坐标\n *\n * <en/> Get the position of node/combo\n * @param datum - <zh/> 节点/ combo 的数据 | <en/> data of node/combo\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function positionOf(datum) {\n  const {\n    x = 0,\n    y = 0,\n    z = 0\n  } = datum.style || {};\n  return [+x, +y, +z];\n}\n/**\n * <zh/> 检查数据是否有位置坐标\n *\n * <en/> Check if the data has a position coordinate\n * @param datum - <zh/> 节点/ combo 的数据 | <en/> data of node/combo\n * @returns - <zh/> 是否有位置坐标 | <en/> Whether there is a position coordinate\n */\nexport function hasPosition(datum) {\n  const {\n    x,\n    y,\n    z\n  } = datum.style || {};\n  return x !== undefined || y !== undefined || z !== undefined;\n}\n/**\n * <zh/> 获取相对位置坐标\n *\n * <en/> Get position by relative placement\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param placement - <zh/> 相对于元素的位置 | <en/> Point relative to element\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByRelativePlacement(bbox, placement) {\n  const [x, y] = placement;\n  const {\n    min,\n    max\n  } = bbox;\n  return [min[0] + x * (max[0] - min[0]), min[1] + y * (max[1] - min[1])];\n}\n/**\n * <zh/> 获取位置坐标\n *\n * <en/> Get position by placement\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param placement - <zh/> 相对于元素的位置 | <en/> Point relative to element\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByPlacement(bbox, placement = 'center') {\n  const relativePlacement = parsePlacement(placement);\n  return getXYByRelativePlacement(bbox, relativePlacement);\n}\n/**\n * <zh/> 获取锚点坐标\n *\n * <en/> Get anchor position\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param anchor - <zh/> 锚点位置 | <en/> Anchor\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByAnchor(bbox, anchor) {\n  const parsedAnchor = parseAnchor(anchor);\n  return getXYByRelativePlacement(bbox, parsedAnchor);\n}\n/**\n * <zh/> 通过 rect points 路径点获取 position 方位配置.\n *\n * <en/> The rect points command is used to obtain the position and orientation configuration.\n * @param points Points\n * @returns `{ left: number; right: number; top: number; bottom: number }`\n */\nexport const getPositionByRectPoints = points => {\n  const [p1, p2] = points;\n  return {\n    left: Math.min(p1[0], p2[0]),\n    right: Math.max(p1[0], p2[0]),\n    top: Math.min(p1[1], p2[1]),\n    bottom: Math.max(p1[1], p2[1])\n  };\n};","map":{"version":3,"names":["parseAnchor","parsePlacement","positionOf","datum","x","y","z","style","hasPosition","undefined","getXYByRelativePlacement","bbox","placement","min","max","getXYByPlacement","relativePlacement","getXYByAnchor","anchor","parsedAnchor","getPositionByRectPoints","points","p1","p2","left","Math","right","top","bottom"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/utils/position.ts"],"sourcesContent":["import type { AABB } from '@antv/g';\nimport type { Anchor, NodeLikeData, Placement, Point, RelativePlacement } from '../types';\nimport { parseAnchor } from './anchor';\nimport { parsePlacement } from './placement';\n\n/**\n * <zh/> 获取节点/ combo 的位置坐标\n *\n * <en/> Get the position of node/combo\n * @param datum - <zh/> 节点/ combo 的数据 | <en/> data of node/combo\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function positionOf(datum: NodeLikeData): Point {\n  const { x = 0, y = 0, z = 0 } = datum.style || {};\n  return [+x, +y, +z];\n}\n\n/**\n * <zh/> 检查数据是否有位置坐标\n *\n * <en/> Check if the data has a position coordinate\n * @param datum - <zh/> 节点/ combo 的数据 | <en/> data of node/combo\n * @returns - <zh/> 是否有位置坐标 | <en/> Whether there is a position coordinate\n */\nexport function hasPosition(datum: NodeLikeData): boolean {\n  const { x, y, z } = datum.style || {};\n  return x !== undefined || y !== undefined || z !== undefined;\n}\n\n/**\n * <zh/> 获取相对位置坐标\n *\n * <en/> Get position by relative placement\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param placement - <zh/> 相对于元素的位置 | <en/> Point relative to element\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByRelativePlacement(bbox: AABB, placement: RelativePlacement): Point {\n  const [x, y] = placement;\n  const { min, max } = bbox;\n  return [min[0] + x * (max[0] - min[0]), min[1] + y * (max[1] - min[1])];\n}\n\n/**\n * <zh/> 获取位置坐标\n *\n * <en/> Get position by placement\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param placement - <zh/> 相对于元素的位置 | <en/> Point relative to element\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByPlacement(bbox: AABB, placement: Placement = 'center'): Point {\n  const relativePlacement = parsePlacement(placement);\n  return getXYByRelativePlacement(bbox, relativePlacement);\n}\n\n/**\n * <zh/> 获取锚点坐标\n *\n * <en/> Get anchor position\n * @param bbox - <zh/> 元素包围盒 | <en/> element bounding box\n * @param anchor - <zh/> 锚点位置 | <en/> Anchor\n * @returns - <zh/> 坐标 | <en/> position\n */\nexport function getXYByAnchor(bbox: AABB, anchor: Anchor): Point {\n  const parsedAnchor = parseAnchor(anchor);\n  return getXYByRelativePlacement(bbox, parsedAnchor as RelativePlacement);\n}\n\n/**\n * <zh/> 通过 rect points 路径点获取 position 方位配置.\n *\n * <en/> The rect points command is used to obtain the position and orientation configuration.\n * @param points Points\n * @returns `{ left: number; right: number; top: number; bottom: number }`\n */\nexport const getPositionByRectPoints = (points: Point[]) => {\n  const [p1, p2] = points;\n  return {\n    left: Math.min(p1[0], p2[0]),\n    right: Math.max(p1[0], p2[0]),\n    top: Math.min(p1[1], p2[1]),\n    bottom: Math.max(p1[1], p2[1]),\n  };\n};\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,cAAc,QAAQ,aAAa;AAE5C;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CAACC,KAAmB;EAC5C,MAAM;IAAEC,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAG;EAAC,CAAE,GAAGH,KAAK,CAACI,KAAK,IAAI,EAAE;EACjD,OAAO,CAAC,CAACH,CAAC,EAAE,CAACC,CAAC,EAAE,CAACC,CAAC,CAAC;AACrB;AAEA;;;;;;;AAOA,OAAM,SAAUE,WAAWA,CAACL,KAAmB;EAC7C,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAC,CAAE,GAAGH,KAAK,CAACI,KAAK,IAAI,EAAE;EACrC,OAAOH,CAAC,KAAKK,SAAS,IAAIJ,CAAC,KAAKI,SAAS,IAAIH,CAAC,KAAKG,SAAS;AAC9D;AAEA;;;;;;;;AAQA,OAAM,SAAUC,wBAAwBA,CAACC,IAAU,EAAEC,SAA4B;EAC/E,MAAM,CAACR,CAAC,EAAEC,CAAC,CAAC,GAAGO,SAAS;EACxB,MAAM;IAAEC,GAAG;IAAEC;EAAG,CAAE,GAAGH,IAAI;EACzB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,GAAGT,CAAC,IAAIU,GAAG,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,GAAGR,CAAC,IAAIS,GAAG,CAAC,CAAC,CAAC,GAAGD,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE;AAEA;;;;;;;;AAQA,OAAM,SAAUE,gBAAgBA,CAACJ,IAAU,EAAEC,SAAA,GAAuB,QAAQ;EAC1E,MAAMI,iBAAiB,GAAGf,cAAc,CAACW,SAAS,CAAC;EACnD,OAAOF,wBAAwB,CAACC,IAAI,EAAEK,iBAAiB,CAAC;AAC1D;AAEA;;;;;;;;AAQA,OAAM,SAAUC,aAAaA,CAACN,IAAU,EAAEO,MAAc;EACtD,MAAMC,YAAY,GAAGnB,WAAW,CAACkB,MAAM,CAAC;EACxC,OAAOR,wBAAwB,CAACC,IAAI,EAAEQ,YAAiC,CAAC;AAC1E;AAEA;;;;;;;AAOA,OAAO,MAAMC,uBAAuB,GAAIC,MAAe,IAAI;EACzD,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGF,MAAM;EACvB,OAAO;IACLG,IAAI,EAAEC,IAAI,CAACZ,GAAG,CAACS,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5BG,KAAK,EAAED,IAAI,CAACX,GAAG,CAACQ,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7BI,GAAG,EAAEF,IAAI,CAACZ,GAAG,CAACS,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3BK,MAAM,EAAEH,IAAI,CAACX,GAAG,CAACQ,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC;GAC9B;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}