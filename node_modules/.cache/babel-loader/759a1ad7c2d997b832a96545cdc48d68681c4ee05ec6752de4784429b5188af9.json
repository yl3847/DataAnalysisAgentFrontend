{"ast":null,"code":"/**\n * <zh/> 创建插件容器\n *\n * <en/> Create a plugin container\n * @param type - <zh/> 插件类型 | <en/> plugin type\n * @param cover - <zh/> 容器是否覆盖整个画布 | <en/> Whether the container covers the entire canvas\n * @param style - <zh/> 额外样式 | <en/> Additional style\n * @returns <zh/> 插件容器 | <en/> plugin container\n */\nexport function createPluginContainer(type, cover = true, style) {\n  const container = document.createElement('div');\n  container.setAttribute('class', `g6-${type}`);\n  Object.assign(container.style, {\n    position: 'absolute',\n    display: 'block'\n  });\n  if (cover) {\n    Object.assign(container.style, {\n      position: 'unset',\n      gridArea: '1 / 1 / 2 / 2',\n      inset: '0px',\n      height: '100%',\n      width: '100%',\n      overflow: 'hidden',\n      pointerEvents: 'none'\n    });\n  }\n  if (style) Object.assign(container.style, style);\n  return container;\n}\n/**\n * <zh/> 创建 DOM 元素，如果存在则删除，再创建一个新的\n *\n * <en/> Create a DOM element, if exists, remove it and create a new one.\n * @param id - <zh/> id | <en/> id\n * @param tag - <zh/> 标签 | <en/> tag\n * @param style - <zh/> 样式 | <en/> style\n * @param innerHTML - <zh/> 内容 | <en/> innerHTML\n * @param container - <zh/> 容器 | <en/> container\n * @returns <zh/> 创建的 DOM 元素 | <en/> created DOM element\n */\nexport function insertDOM(id, tag = 'div', style = {}, innerHTML = '', container = document.body) {\n  const dom = document.getElementById(id);\n  if (dom) dom.remove();\n  const div = document.createElement(tag);\n  div.innerHTML = innerHTML;\n  div.id = id;\n  Object.assign(div.style, style);\n  container.appendChild(div);\n  return div;\n}","map":{"version":3,"names":["createPluginContainer","type","cover","style","container","document","createElement","setAttribute","Object","assign","position","display","gridArea","inset","height","width","overflow","pointerEvents","insertDOM","id","tag","innerHTML","body","dom","getElementById","remove","div","appendChild"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/plugins/utils/dom.ts"],"sourcesContent":["/**\n * <zh/> 创建插件容器\n *\n * <en/> Create a plugin container\n * @param type - <zh/> 插件类型 | <en/> plugin type\n * @param cover - <zh/> 容器是否覆盖整个画布 | <en/> Whether the container covers the entire canvas\n * @param style - <zh/> 额外样式 | <en/> Additional style\n * @returns <zh/> 插件容器 | <en/> plugin container\n */\nexport function createPluginContainer(type: string, cover = true, style?: Partial<CSSStyleDeclaration>): HTMLElement {\n  const container = document.createElement('div');\n\n  container.setAttribute('class', `g6-${type}`);\n\n  Object.assign(container.style, {\n    position: 'absolute',\n    display: 'block',\n  });\n\n  if (cover) {\n    Object.assign(container.style, {\n      position: 'unset',\n      gridArea: '1 / 1 / 2 / 2',\n      inset: '0px',\n      height: '100%',\n      width: '100%',\n      overflow: 'hidden',\n      pointerEvents: 'none',\n    });\n  }\n\n  if (style) Object.assign(container.style, style);\n\n  return container;\n}\n\n/**\n * <zh/> 创建 DOM 元素，如果存在则删除，再创建一个新的\n *\n * <en/> Create a DOM element, if exists, remove it and create a new one.\n * @param id - <zh/> id | <en/> id\n * @param tag - <zh/> 标签 | <en/> tag\n * @param style - <zh/> 样式 | <en/> style\n * @param innerHTML - <zh/> 内容 | <en/> innerHTML\n * @param container - <zh/> 容器 | <en/> container\n * @returns <zh/> 创建的 DOM 元素 | <en/> created DOM element\n */\nexport function insertDOM(\n  id: string,\n  tag = 'div',\n  style: Partial<CSSStyleDeclaration> = {},\n  innerHTML = '',\n  container: HTMLElement = document.body,\n) {\n  const dom = document.getElementById(id);\n  if (dom) dom.remove();\n\n  const div = document.createElement(tag);\n  div.innerHTML = innerHTML;\n  div.id = id;\n\n  Object.assign(div.style, style);\n\n  container.appendChild(div);\n\n  return div;\n}\n"],"mappings":"AAAA;;;;;;;;;AASA,OAAM,SAAUA,qBAAqBA,CAACC,IAAY,EAAEC,KAAK,GAAG,IAAI,EAAEC,KAAoC;EACpG,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAE/CF,SAAS,CAACG,YAAY,CAAC,OAAO,EAAE,MAAMN,IAAI,EAAE,CAAC;EAE7CO,MAAM,CAACC,MAAM,CAACL,SAAS,CAACD,KAAK,EAAE;IAC7BO,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE;GACV,CAAC;EAEF,IAAIT,KAAK,EAAE;IACTM,MAAM,CAACC,MAAM,CAACL,SAAS,CAACD,KAAK,EAAE;MAC7BO,QAAQ,EAAE,OAAO;MACjBE,QAAQ,EAAE,eAAe;MACzBC,KAAK,EAAE,KAAK;MACZC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE,QAAQ;MAClBC,aAAa,EAAE;KAChB,CAAC;EACJ;EAEA,IAAId,KAAK,EAAEK,MAAM,CAACC,MAAM,CAACL,SAAS,CAACD,KAAK,EAAEA,KAAK,CAAC;EAEhD,OAAOC,SAAS;AAClB;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUc,SAASA,CACvBC,EAAU,EACVC,GAAG,GAAG,KAAK,EACXjB,KAAA,GAAsC,EAAE,EACxCkB,SAAS,GAAG,EAAE,EACdjB,SAAA,GAAyBC,QAAQ,CAACiB,IAAI;EAEtC,MAAMC,GAAG,GAAGlB,QAAQ,CAACmB,cAAc,CAACL,EAAE,CAAC;EACvC,IAAII,GAAG,EAAEA,GAAG,CAACE,MAAM,EAAE;EAErB,MAAMC,GAAG,GAAGrB,QAAQ,CAACC,aAAa,CAACc,GAAG,CAAC;EACvCM,GAAG,CAACL,SAAS,GAAGA,SAAS;EACzBK,GAAG,CAACP,EAAE,GAAGA,EAAE;EAEXX,MAAM,CAACC,MAAM,CAACiB,GAAG,CAACvB,KAAK,EAAEA,KAAK,CAAC;EAE/BC,SAAS,CAACuB,WAAW,CAACD,GAAG,CAAC;EAE1B,OAAOA,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}