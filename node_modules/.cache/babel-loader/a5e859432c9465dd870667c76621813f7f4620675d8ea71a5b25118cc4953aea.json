{"ast":null,"code":"/**\n * 保留x位小数\n */\nexport function toPrecision(num, precision) {\n  return +num.toPrecision(precision);\n}\n/**\n * 千分位\n * 100000 -> 10,000\n */\nexport function toThousands(num) {\n  return num.toLocaleString();\n}\n/**\n * 获得数字科学计数\n * 1000000 = 1e6\n */\nexport function toScientificNotation(num) {\n  return num.toExponential();\n}\n/**\n * 用k的方式表达\n * 1234 -> 1K\n * 12345 -> 12K\n */\nexport function toKNotation(num, precision) {\n  if (precision === void 0) {\n    precision = 0;\n  }\n  if (Math.abs(num) < 1000) return String(num);\n  return \"\".concat(toPrecision(num / 1000, precision).toLocaleString(), \"K\");\n}\n// Condition if x is smaller than zero.\nexport var ifNegative = function (x, a, b) {\n  return x < 0 && Number.isFinite(x) ? a : b;\n};\n// Condition if x is greater than zero.\nexport var ifPositive = function (x, a, b) {\n  return x > 0 && Number.isFinite(x) ? a : b;\n};\n// Calculate the result of  a * b.\nexport var multi = function (a, b) {\n  return a * b;\n};\n// Calculate the result of  (a + b) / 2.\nexport var mid = function (a, b) {\n  return a / 2 + (b || 0) / 2;\n};","map":{"version":3,"names":["toPrecision","num","precision","toThousands","toLocaleString","toScientificNotation","toExponential","toKNotation","Math","abs","String","concat","ifNegative","x","a","b","Number","isFinite","ifPositive","multi","mid"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/util/number.ts"],"sourcesContent":["/**\n * 保留x位小数\n */\nexport function toPrecision(num: number, precision: number) {\n  return +num.toPrecision(precision);\n}\n\n/**\n * 千分位\n * 100000 -> 10,000\n */\nexport function toThousands(num: number) {\n  return num.toLocaleString();\n}\n\n/**\n * 获得数字科学计数\n * 1000000 = 1e6\n */\nexport function toScientificNotation(num: number) {\n  return num.toExponential();\n}\n\n/**\n * 用k的方式表达\n * 1234 -> 1K\n * 12345 -> 12K\n */\nexport function toKNotation(num: number, precision: number = 0) {\n  if (Math.abs(num) < 1000) return String(num);\n  return `${toPrecision(num / 1000, precision).toLocaleString()}K`;\n}\n\n// Condition if x is smaller than zero.\nexport const ifNegative = <T extends keyof any>(x: any, a: T, b?: T) => (x < 0 && Number.isFinite(x) ? a : b);\n// Condition if x is greater than zero.\nexport const ifPositive = <T extends keyof any>(x: any, a: T, b?: T) => (x > 0 && Number.isFinite(x) ? a : b);\n// Calculate the result of  a * b.\nexport const multi = (a: number, b: number) => a * b;\n// Calculate the result of  (a + b) / 2.\nexport const mid = (a: number, b?: number) => a / 2 + (b || 0) / 2;\n"],"mappings":"AAAA;;;AAGA,OAAM,SAAUA,WAAWA,CAACC,GAAW,EAAEC,SAAiB;EACxD,OAAO,CAACD,GAAG,CAACD,WAAW,CAACE,SAAS,CAAC;AACpC;AAEA;;;;AAIA,OAAM,SAAUC,WAAWA,CAACF,GAAW;EACrC,OAAOA,GAAG,CAACG,cAAc,EAAE;AAC7B;AAEA;;;;AAIA,OAAM,SAAUC,oBAAoBA,CAACJ,GAAW;EAC9C,OAAOA,GAAG,CAACK,aAAa,EAAE;AAC5B;AAEA;;;;;AAKA,OAAM,SAAUC,WAAWA,CAACN,GAAW,EAAEC,SAAqB;EAArB,IAAAA,SAAA;IAAAA,SAAA,IAAqB;EAAA;EAC5D,IAAIM,IAAI,CAACC,GAAG,CAACR,GAAG,CAAC,GAAG,IAAI,EAAE,OAAOS,MAAM,CAACT,GAAG,CAAC;EAC5C,OAAO,GAAAU,MAAA,CAAGX,WAAW,CAACC,GAAG,GAAG,IAAI,EAAEC,SAAS,CAAC,CAACE,cAAc,EAAE,MAAG;AAClE;AAEA;AACA,OAAO,IAAMQ,UAAU,GAAG,SAAAA,CAAsBC,CAAM,EAAEC,CAAI,EAAEC,CAAK;EAAK,OAACF,CAAC,GAAG,CAAC,IAAIG,MAAM,CAACC,QAAQ,CAACJ,CAAC,CAAC,GAAGC,CAAC,GAAGC,CAAC;AAApC,CAAqC;AAC7G;AACA,OAAO,IAAMG,UAAU,GAAG,SAAAA,CAAsBL,CAAM,EAAEC,CAAI,EAAEC,CAAK;EAAK,OAACF,CAAC,GAAG,CAAC,IAAIG,MAAM,CAACC,QAAQ,CAACJ,CAAC,CAAC,GAAGC,CAAC,GAAGC,CAAC;AAApC,CAAqC;AAC7G;AACA,OAAO,IAAMI,KAAK,GAAG,SAAAA,CAACL,CAAS,EAAEC,CAAS;EAAK,OAAAD,CAAC,GAAGC,CAAC;AAAL,CAAK;AACpD;AACA,OAAO,IAAMK,GAAG,GAAG,SAAAA,CAACN,CAAS,EAAEC,CAAU;EAAK,OAAAD,CAAC,GAAG,CAAC,GAAG,CAACC,CAAC,IAAI,CAAC,IAAI,CAAC;AAApB,CAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}