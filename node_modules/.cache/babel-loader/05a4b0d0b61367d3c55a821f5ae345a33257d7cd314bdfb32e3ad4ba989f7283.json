{"ast":null,"code":"import { isOverflow, parseAABB } from '../utils/bounds';\nimport { hide, show } from '../utils/style';\n/**\n * Hide the label when the label is overflowed from the element.\n */\nexport const OverflowHide = () => {\n  return labels => {\n    labels.forEach(l => {\n      show(l);\n      const bounds = l.attr('bounds');\n      const b = l.getLocalBounds();\n      const overflow = isOverflow(parseAABB(b), bounds);\n      if (overflow) hide(l);\n    });\n    return labels;\n  };\n};","map":{"version":3,"names":["isOverflow","parseAABB","hide","show","OverflowHide","labels","forEach","l","bounds","attr","b","getLocalBounds","overflow"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/label-transform/overflowHide.ts"],"sourcesContent":["import { DisplayObject } from '@antv/g';\nimport { OverflowHideLabelTransform } from '../spec';\nimport { LabelTransformComponent as LLC } from '../runtime';\nimport { isOverflow, parseAABB } from '../utils/bounds';\nimport { hide, show } from '../utils/style';\n\nexport type OverflowHideOptions = Omit<OverflowHideLabelTransform, 'type'>;\n\n/**\n * Hide the label when the label is overflowed from the element.\n */\nexport const OverflowHide: LLC<OverflowHideOptions> = () => {\n  return (labels: DisplayObject[]) => {\n    labels.forEach((l) => {\n      show(l);\n      const bounds = l.attr('bounds');\n      const b = l.getLocalBounds();\n      const overflow = isOverflow(parseAABB(b), bounds);\n      if (overflow) hide(l);\n    });\n    return labels;\n  };\n};\n"],"mappings":"AAGA,SAASA,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,SAASC,IAAI,EAAEC,IAAI,QAAQ,gBAAgB;AAI3C;;;AAGA,OAAO,MAAMC,YAAY,GAA6BA,CAAA,KAAK;EACzD,OAAQC,MAAuB,IAAI;IACjCA,MAAM,CAACC,OAAO,CAAEC,CAAC,IAAI;MACnBJ,IAAI,CAACI,CAAC,CAAC;MACP,MAAMC,MAAM,GAAGD,CAAC,CAACE,IAAI,CAAC,QAAQ,CAAC;MAC/B,MAAMC,CAAC,GAAGH,CAAC,CAACI,cAAc,EAAE;MAC5B,MAAMC,QAAQ,GAAGZ,UAAU,CAACC,SAAS,CAACS,CAAC,CAAC,EAAEF,MAAM,CAAC;MACjD,IAAII,QAAQ,EAAEV,IAAI,CAACK,CAAC,CAAC;IACvB,CAAC,CAAC;IACF,OAAOF,MAAM;EACf,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}