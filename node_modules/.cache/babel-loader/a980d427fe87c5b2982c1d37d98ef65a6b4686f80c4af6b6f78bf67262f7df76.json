{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Rect, Text } from '@antv/g';\nimport { parsePadding } from '../../utils/padding';\nimport { omitStyleProps, startsWith, subStyleProps } from '../../utils/prefix';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseShape } from './base-shape';\n/**\n * <zh/> 标签\n *\n * <en/> Label\n * @remarks\n * <zh/> 标签是一种具有背景的文本图形。\n *\n * <en/> Label is a text shape with background.\n */\nexport class Label extends BaseShape {\n  constructor(options) {\n    super(mergeOptions({\n      style: Label.defaultStyleProps\n    }, options));\n  }\n  isTextStyle(key) {\n    return startsWith(key, 'label');\n  }\n  isBackgroundStyle(key) {\n    return startsWith(key, 'background');\n  }\n  getTextStyle(attributes) {\n    const _a = this.getGraphicStyle(attributes),\n      {\n        padding\n      } = _a,\n      style = __rest(_a, [\"padding\"]);\n    return omitStyleProps(style, 'background');\n  }\n  getBackgroundStyle(attributes) {\n    if (attributes.background === false) return false;\n    const style = this.getGraphicStyle(attributes);\n    const {\n      wordWrap,\n      wordWrapWidth,\n      padding\n    } = style;\n    const backgroundStyle = subStyleProps(style, 'background');\n    const {\n      min: [minX, minY],\n      center: [centerX, centerY],\n      halfExtents: [halfWidth, halfHeight]\n    } = this.shapeMap.text.getGeometryBounds();\n    const [top, right, bottom, left] = parsePadding(padding);\n    const totalWidth = halfWidth * 2 + left + right;\n    const {\n      width,\n      height\n    } = backgroundStyle;\n    if (width && height) {\n      Object.assign(backgroundStyle, {\n        x: centerX - Number(width) / 2,\n        y: centerY - Number(height) / 2\n      });\n    } else {\n      Object.assign(backgroundStyle, {\n        x: minX - left,\n        y: minY - top,\n        width: wordWrap ? Math.min(totalWidth, wordWrapWidth + left + right) : totalWidth,\n        height: halfHeight * 2 + top + bottom\n      });\n    }\n    // parse percentage radius\n    const {\n      radius\n    } = backgroundStyle;\n    // if radius look like '10%', convert it to number\n    if (typeof radius === 'string' && radius.endsWith('%')) {\n      const percentage = Number(radius.replace('%', '')) / 100;\n      backgroundStyle.radius = Math.min(+backgroundStyle.width, +backgroundStyle.height) * percentage;\n    }\n    return backgroundStyle;\n  }\n  render(attributes = this.parsedAttributes, container = this) {\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n  }\n  getGeometryBounds() {\n    const shape = this.getShape('background') || this.getShape('text');\n    return shape.getGeometryBounds();\n  }\n}\nLabel.defaultStyleProps = {\n  padding: 0,\n  fontSize: 12,\n  fontFamily: 'system-ui, sans-serif',\n  wordWrap: true,\n  maxLines: 1,\n  wordWrapWidth: 128,\n  textOverflow: '...',\n  textBaseline: 'middle',\n  backgroundOpacity: 0.75,\n  backgroundZIndex: -1,\n  backgroundLineWidth: 0\n};","map":{"version":3,"names":["Rect","Text","parsePadding","omitStyleProps","startsWith","subStyleProps","mergeOptions","BaseShape","Label","constructor","options","style","defaultStyleProps","isTextStyle","key","isBackgroundStyle","getTextStyle","attributes","_a","getGraphicStyle","padding","__rest","getBackgroundStyle","background","wordWrap","wordWrapWidth","backgroundStyle","min","minX","minY","center","centerX","centerY","halfExtents","halfWidth","halfHeight","shapeMap","text","getGeometryBounds","top","right","bottom","left","totalWidth","width","height","Object","assign","x","Number","y","Math","radius","endsWith","percentage","replace","render","parsedAttributes","container","upsert","shape","getShape","fontSize","fontFamily","maxLines","textOverflow","textBaseline","backgroundOpacity","backgroundZIndex","backgroundLineWidth"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/shapes/label.ts"],"sourcesContent":["import { DisplayObjectConfig, Group, Rect, RectStyleProps, Text, TextStyleProps } from '@antv/g';\nimport type { Padding } from '../../types/padding';\nimport type { Prefix } from '../../types/prefix';\nimport { parsePadding } from '../../utils/padding';\nimport { omitStyleProps, startsWith, subStyleProps } from '../../utils/prefix';\nimport { mergeOptions } from '../../utils/style';\nimport { BaseShape } from './base-shape';\n\n/**\n * <zh/> 标签样式\n *\n * <en/> Label style\n */\nexport interface LabelStyleProps extends TextStyleProps, Prefix<'background', RectStyleProps> {\n  /**\n   * <zh/> 是否显示背景\n   *\n   * <en/> Whether to show background\n   */\n  background?: boolean;\n  /**\n   * <zh/> 标签内边距\n   *\n   * <en/> Label padding\n   * @defaultValue 0\n   */\n  padding?: Padding;\n}\n\n/**\n * <zh/> 标签\n *\n * <en/> Label\n * @remarks\n * <zh/> 标签是一种具有背景的文本图形。\n *\n * <en/> Label is a text shape with background.\n */\nexport class Label extends BaseShape<LabelStyleProps> {\n  static defaultStyleProps: Partial<LabelStyleProps> = {\n    padding: 0,\n    fontSize: 12,\n    fontFamily: 'system-ui, sans-serif',\n    wordWrap: true,\n    maxLines: 1,\n    wordWrapWidth: 128,\n    textOverflow: '...',\n    textBaseline: 'middle',\n    backgroundOpacity: 0.75,\n    backgroundZIndex: -1,\n    backgroundLineWidth: 0,\n  };\n\n  constructor(options: DisplayObjectConfig<LabelStyleProps>) {\n    super(mergeOptions({ style: Label.defaultStyleProps }, options));\n  }\n\n  protected isTextStyle(key: string) {\n    return startsWith(key, 'label');\n  }\n\n  protected isBackgroundStyle(key: string) {\n    return startsWith(key, 'background');\n  }\n\n  protected getTextStyle(attributes: Required<LabelStyleProps>) {\n    const { padding, ...style } = this.getGraphicStyle(attributes);\n    return omitStyleProps<TextStyleProps>(style, 'background');\n  }\n\n  protected getBackgroundStyle(attributes: Required<LabelStyleProps>) {\n    if (attributes.background === false) return false;\n\n    const style = this.getGraphicStyle(attributes);\n    const { wordWrap, wordWrapWidth, padding } = style;\n    const backgroundStyle = subStyleProps<RectStyleProps>(style, 'background');\n\n    const {\n      min: [minX, minY],\n      center: [centerX, centerY],\n      halfExtents: [halfWidth, halfHeight],\n    } = this.shapeMap.text.getGeometryBounds();\n\n    const [top, right, bottom, left] = parsePadding(padding);\n    const totalWidth = halfWidth * 2 + left + right;\n\n    const { width, height } = backgroundStyle;\n    if (width && height) {\n      Object.assign(backgroundStyle, { x: centerX - Number(width) / 2, y: centerY - Number(height) / 2 });\n    } else {\n      Object.assign(backgroundStyle, {\n        x: minX - left,\n        y: minY - top,\n        width: wordWrap ? Math.min(totalWidth, wordWrapWidth + left + right) : totalWidth,\n        height: halfHeight * 2 + top + bottom,\n      });\n    }\n\n    // parse percentage radius\n    const { radius } = backgroundStyle;\n    // if radius look like '10%', convert it to number\n    if (typeof radius === 'string' && radius.endsWith('%')) {\n      const percentage = Number(radius.replace('%', '')) / 100;\n      backgroundStyle.radius = Math.min(+backgroundStyle.width, +backgroundStyle.height) * percentage;\n    }\n\n    return backgroundStyle;\n  }\n\n  public render(attributes: Required<LabelStyleProps> = this.parsedAttributes, container: Group = this): void {\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n  }\n\n  public getGeometryBounds() {\n    const shape = this.getShape('background') || this.getShape('text');\n    return shape.getGeometryBounds();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}