{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * from: https://github.com/zqlu/svg2marker\n * translate svg string to G.Marker\n */\nimport svgPathParser from 'svg-path-parser';\n/**\n *  Return function to register a Marker Symbol for give SVG Path\n *\n * @param svgPath SVG Path string\n * @param viewBoxWidth SVG view box width, default to 1024\n * @param viewBoxHeight SVG view box height, default to 1024\n */\nexport function path2marker(svgPath, viewBoxWidth, viewBoxHeight) {\n  if (viewBoxWidth === void 0) {\n    viewBoxWidth = 1024;\n  }\n  if (viewBoxHeight === void 0) {\n    viewBoxHeight = 1014;\n  }\n  return function (x, y, r) {\n    // @ts-ignore\n    var paths = svgPathParser(svgPath);\n    return paths.map(function (path) {\n      var arr = [];\n      arr.push(path.relative === true ? path.code.toLowerCase() : path.code.toUpperCase());\n      var pairs = [[path.x1, path.y1], [path.x2, path.y2], [path.x, path.y]];\n      pairs.forEach(function (pair) {\n        var _a = __read(pair, 2),\n          px = _a[0],\n          py = _a[1];\n        if (px !== undefined) {\n          arr.push(path.relative === true ? px / viewBoxWidth * 2 * r : x - r + r * 2 * (px / viewBoxWidth));\n        }\n        if (py !== undefined) {\n          arr.push(path.relative === true ? py / viewBoxHeight * 2 * r : y - r + r * 2 * (py / viewBoxHeight));\n        }\n      });\n      return arr;\n    });\n  };\n}\n/**\n * Return function to register a Marker symbol for give svg file\n *\n * @param icon SVG file content\n */\nexport function svg2marker(icon) {\n  var pathMatch = /<path\\s+d=\"(.*?)\"/i.exec(icon);\n  var viewBoxMatch = /viewBox=\"\\d+\\s+\\d+\\s+(\\d+)\\s+(\\d+)\"/i.exec(icon);\n  if (pathMatch === null || pathMatch.length < 2) {\n    return function () {\n      return [];\n    };\n  }\n  var width = 1024;\n  var height = 1024;\n  if (viewBoxMatch !== null && viewBoxMatch.length >= 3) {\n    if (!Number.isNaN(parseInt(viewBoxMatch[1], 10))) {\n      width = parseInt(viewBoxMatch[1], 10);\n    }\n    if (!Number.isNaN(parseInt(viewBoxMatch[2], 10))) {\n      height = parseInt(viewBoxMatch[2], 10);\n    }\n  }\n  return path2marker(pathMatch[1], width, height);\n}","map":{"version":3,"names":["svgPathParser","path2marker","svgPath","viewBoxWidth","viewBoxHeight","x","y","r","paths","map","path","arr","push","relative","code","toLowerCase","toUpperCase","pairs","x1","y1","x2","y2","forEach","pair","_a","__read","px","py","undefined","svg2marker","icon","pathMatch","exec","viewBoxMatch","length","width","height","Number","isNaN","parseInt"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/component/src/util/svg2marker.ts"],"sourcesContent":["/**\n * from: https://github.com/zqlu/svg2marker\n * translate svg string to G.Marker\n */\nimport svgPathParser from 'svg-path-parser';\n\ntype IPointPair = [number | undefined, number | undefined];\n\ntype ISVGPathCmd = {\n  code: string;\n  command: string;\n  relative?: boolean;\n  x?: number;\n  y?: number;\n  x1?: number;\n  y1?: number;\n  x2?: number;\n  y2?: number;\n};\n\n/**\n *  Return function to register a Marker Symbol for give SVG Path\n *\n * @param svgPath SVG Path string\n * @param viewBoxWidth SVG view box width, default to 1024\n * @param viewBoxHeight SVG view box height, default to 1024\n */\nexport function path2marker(\n  svgPath: string,\n  viewBoxWidth: number = 1024,\n  viewBoxHeight: number = 1014\n): (x: number, y: number, r: number) => (string | number)[][] {\n  return (x: number, y: number, r: number): (string | number)[][] => {\n    // @ts-ignore\n    const paths: ISVGPathCmd[] = svgPathParser(svgPath);\n\n    return paths.map((path: ISVGPathCmd) => {\n      const arr: (string | number)[] = [];\n      arr.push(path.relative === true ? path.code.toLowerCase() : path.code.toUpperCase());\n      const pairs: IPointPair[] = [\n        [path.x1, path.y1],\n        [path.x2, path.y2],\n        [path.x, path.y],\n      ];\n      pairs.forEach((pair: IPointPair) => {\n        const [px, py] = pair;\n        if (px !== undefined) {\n          arr.push(path.relative === true ? (px / viewBoxWidth) * 2 * r : x - r + r * 2 * (px / viewBoxWidth));\n        }\n        if (py !== undefined) {\n          arr.push(path.relative === true ? (py / viewBoxHeight) * 2 * r : y - r + r * 2 * (py / viewBoxHeight));\n        }\n      });\n\n      return arr;\n    });\n  };\n}\n\n/**\n * Return function to register a Marker symbol for give svg file\n *\n * @param icon SVG file content\n */\nexport function svg2marker(icon: string): (x: number, y: number, r: number) => (string | number)[][] {\n  const pathMatch: RegExpMatchArray | null = /<path\\s+d=\"(.*?)\"/i.exec(icon);\n  const viewBoxMatch: RegExpExecArray | null = /viewBox=\"\\d+\\s+\\d+\\s+(\\d+)\\s+(\\d+)\"/i.exec(icon);\n  if (pathMatch === null || pathMatch.length < 2) {\n    return (): (string | number)[][] => [];\n  }\n  let width: number = 1024;\n  let height: number = 1024;\n  if (viewBoxMatch !== null && viewBoxMatch.length >= 3) {\n    if (!Number.isNaN(parseInt(viewBoxMatch[1], 10))) {\n      width = parseInt(viewBoxMatch[1], 10);\n    }\n    if (!Number.isNaN(parseInt(viewBoxMatch[2], 10))) {\n      height = parseInt(viewBoxMatch[2], 10);\n    }\n  }\n\n  return path2marker(pathMatch[1], width, height);\n}\n"],"mappings":";AAAA;;;;AAIA,OAAOA,aAAa,MAAM,iBAAiB;AAgB3C;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CACzBC,OAAe,EACfC,YAA2B,EAC3BC,aAA4B;EAD5B,IAAAD,YAAA;IAAAA,YAAA,OAA2B;EAAA;EAC3B,IAAAC,aAAA;IAAAA,aAAA,OAA4B;EAAA;EAE5B,OAAO,UAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS;IACrC;IACA,IAAMC,KAAK,GAAkBR,aAAa,CAACE,OAAO,CAAC;IAEnD,OAAOM,KAAK,CAACC,GAAG,CAAC,UAACC,IAAiB;MACjC,IAAMC,GAAG,GAAwB,EAAE;MACnCA,GAAG,CAACC,IAAI,CAACF,IAAI,CAACG,QAAQ,KAAK,IAAI,GAAGH,IAAI,CAACI,IAAI,CAACC,WAAW,EAAE,GAAGL,IAAI,CAACI,IAAI,CAACE,WAAW,EAAE,CAAC;MACpF,IAAMC,KAAK,GAAiB,CAC1B,CAACP,IAAI,CAACQ,EAAE,EAAER,IAAI,CAACS,EAAE,CAAC,EAClB,CAACT,IAAI,CAACU,EAAE,EAAEV,IAAI,CAACW,EAAE,CAAC,EAClB,CAACX,IAAI,CAACL,CAAC,EAAEK,IAAI,CAACJ,CAAC,CAAC,CACjB;MACDW,KAAK,CAACK,OAAO,CAAC,UAACC,IAAgB;QACvB,IAAAC,EAAA,GAAAC,MAAA,CAAWF,IAAI;UAAdG,EAAE,GAAAF,EAAA;UAAEG,EAAE,GAAAH,EAAA,GAAQ;QACrB,IAAIE,EAAE,KAAKE,SAAS,EAAE;UACpBjB,GAAG,CAACC,IAAI,CAACF,IAAI,CAACG,QAAQ,KAAK,IAAI,GAAIa,EAAE,GAAGvB,YAAY,GAAI,CAAC,GAAGI,CAAC,GAAGF,CAAC,GAAGE,CAAC,GAAGA,CAAC,GAAG,CAAC,IAAImB,EAAE,GAAGvB,YAAY,CAAC,CAAC;QACtG;QACA,IAAIwB,EAAE,KAAKC,SAAS,EAAE;UACpBjB,GAAG,CAACC,IAAI,CAACF,IAAI,CAACG,QAAQ,KAAK,IAAI,GAAIc,EAAE,GAAGvB,aAAa,GAAI,CAAC,GAAGG,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAG,CAAC,IAAIoB,EAAE,GAAGvB,aAAa,CAAC,CAAC;QACxG;MACF,CAAC,CAAC;MAEF,OAAOO,GAAG;IACZ,CAAC,CAAC;EACJ,CAAC;AACH;AAEA;;;;;AAKA,OAAM,SAAUkB,UAAUA,CAACC,IAAY;EACrC,IAAMC,SAAS,GAA4B,oBAAoB,CAACC,IAAI,CAACF,IAAI,CAAC;EAC1E,IAAMG,YAAY,GAA2B,sCAAsC,CAACD,IAAI,CAACF,IAAI,CAAC;EAC9F,IAAIC,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;IAC9C,OAAO;MAA6B,SAAE;IAAF,CAAE;EACxC;EACA,IAAIC,KAAK,GAAW,IAAI;EACxB,IAAIC,MAAM,GAAW,IAAI;EACzB,IAAIH,YAAY,KAAK,IAAI,IAAIA,YAAY,CAACC,MAAM,IAAI,CAAC,EAAE;IACrD,IAAI,CAACG,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;MAChDE,KAAK,GAAGI,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACvC;IACA,IAAI,CAACI,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;MAChDG,MAAM,GAAGG,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC;EACF;EAEA,OAAOhC,WAAW,CAAC8B,SAAS,CAAC,CAAC,CAAC,EAAEI,KAAK,EAAEC,MAAM,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}