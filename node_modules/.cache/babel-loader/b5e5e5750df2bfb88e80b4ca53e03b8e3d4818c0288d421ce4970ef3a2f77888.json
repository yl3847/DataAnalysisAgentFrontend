{"ast":null,"code":"import { getNeighbors } from './util';\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n  var initiatedCallback = callbacks;\n  var stubCallback = function stubCallback() {};\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      if (!seen[next]) {\n        seen[next] = true;\n        return true;\n      }\n      return false;\n    };\n  }();\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\nfunction depthFirstSearchRecursive(graphData, currentNode, previousNode, callbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  var _a = graphData.edges,\n    edges = _a === void 0 ? [] : _a;\n  getNeighbors(currentNode, edges, directed ? 'target' : undefined).forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graphData, nextNode, currentNode, callbacks, directed);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\nexport default function depthFirstSearch(graphData, startNodeId, callbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n  depthFirstSearchRecursive(graphData, startNodeId, '', initCallbacks(callbacks), directed);\n}","map":{"version":3,"names":["getNeighbors","initCallbacks","callbacks","initiatedCallback","stubCallback","allowTraversalCallback","seen","_a","next","allowTraversal","enter","leave","depthFirstSearchRecursive","graphData","currentNode","previousNode","directed","current","previous","edges","undefined","forEach","nextNode","depthFirstSearch","startNodeId"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/algorithm/es/dfs.js"],"sourcesContent":["import { getNeighbors } from './util';\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n  var initiatedCallback = callbacks;\n  var stubCallback = function stubCallback() {};\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      if (!seen[next]) {\n        seen[next] = true;\n        return true;\n      }\n      return false;\n    };\n  }();\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\nfunction depthFirstSearchRecursive(graphData, currentNode, previousNode, callbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  var _a = graphData.edges,\n    edges = _a === void 0 ? [] : _a;\n  getNeighbors(currentNode, edges, directed ? 'target' : undefined).forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graphData, nextNode, currentNode, callbacks, directed);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\nexport default function depthFirstSearch(graphData, startNodeId, callbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n  depthFirstSearchRecursive(graphData, startNodeId, '', initCallbacks(callbacks), directed);\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,QAAQ;AACrC,SAASC,aAAaA,CAACC,SAAS,EAAE;EAChC,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IACxBA,SAAS,GAAG,CAAC,CAAC;EAChB;EACA,IAAIC,iBAAiB,GAAGD,SAAS;EACjC,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG,CAAC,CAAC;EAC7C,IAAIC,sBAAsB,GAAG,YAAY;IACvC,IAAIC,IAAI,GAAG,CAAC,CAAC;IACb,OAAO,UAAUC,EAAE,EAAE;MACnB,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAI;MAClB,IAAI,CAACF,IAAI,CAACE,IAAI,CAAC,EAAE;QACfF,IAAI,CAACE,IAAI,CAAC,GAAG,IAAI;QACjB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC;EACH,CAAC,CAAC,CAAC;EACHL,iBAAiB,CAACM,cAAc,GAAGP,SAAS,CAACO,cAAc,IAAIJ,sBAAsB;EACrFF,iBAAiB,CAACO,KAAK,GAAGR,SAAS,CAACQ,KAAK,IAAIN,YAAY;EACzDD,iBAAiB,CAACQ,KAAK,GAAGT,SAAS,CAACS,KAAK,IAAIP,YAAY;EACzD,OAAOD,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,yBAAyBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAEb,SAAS,EAAEc,QAAQ,EAAE;EAC5F,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IACvBA,QAAQ,GAAG,IAAI;EACjB;EACAd,SAAS,CAACQ,KAAK,CAAC;IACdO,OAAO,EAAEH,WAAW;IACpBI,QAAQ,EAAEH;EACZ,CAAC,CAAC;EACF,IAAIR,EAAE,GAAGM,SAAS,CAACM,KAAK;IACtBA,KAAK,GAAGZ,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;EACjCP,YAAY,CAACc,WAAW,EAAEK,KAAK,EAAEH,QAAQ,GAAG,QAAQ,GAAGI,SAAS,CAAC,CAACC,OAAO,CAAC,UAAUC,QAAQ,EAAE;IAC5F,IAAIpB,SAAS,CAACO,cAAc,CAAC;MAC3BS,QAAQ,EAAEH,YAAY;MACtBE,OAAO,EAAEH,WAAW;MACpBN,IAAI,EAAEc;IACR,CAAC,CAAC,EAAE;MACFV,yBAAyB,CAACC,SAAS,EAAES,QAAQ,EAAER,WAAW,EAAEZ,SAAS,EAAEc,QAAQ,CAAC;IAClF;EACF,CAAC,CAAC;EACFd,SAAS,CAACS,KAAK,CAAC;IACdM,OAAO,EAAEH,WAAW;IACpBI,QAAQ,EAAEH;EACZ,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASQ,gBAAgBA,CAACV,SAAS,EAAEW,WAAW,EAAEtB,SAAS,EAAEc,QAAQ,EAAE;EACpF,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IACvBA,QAAQ,GAAG,IAAI;EACjB;EACAJ,yBAAyB,CAACC,SAAS,EAAEW,WAAW,EAAE,EAAE,EAAEvB,aAAa,CAACC,SAAS,CAAC,EAAEc,QAAQ,CAAC;AAC3F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}