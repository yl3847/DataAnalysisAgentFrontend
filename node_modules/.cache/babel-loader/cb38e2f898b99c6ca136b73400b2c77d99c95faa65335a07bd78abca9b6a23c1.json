{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/runtime/types/common.ts"],"sourcesContent":["import { Coordinate } from '@antv/coord';\nimport { DisplayObject, TextStyleProps } from '@antv/g';\nimport { G2GuideComponentOptions, G2Mark, G2ViewTree } from './options';\nimport { LabelTransform, Scale } from './component';\nimport { MarkProps } from './mark';\nimport { G2Theme } from './theme';\n\nexport type { G2Theme };\n\nexport type G2Title = {\n  /**\n   * Height of title, default is 36.\n   */\n  size?: number;\n  /**\n   * Text of title.\n   */\n  title?: string;\n  /**\n   * Text of subtitle.\n   */\n  subtitle?: string | null;\n} & WithPrefix<Omit<TextStyleProps, 'x' | 'y' | 'text'>, 'title'> & // G.Text style for title.\n  WithPrefix<Omit<TextStyleProps, 'x' | 'y' | 'text'>, 'subtitle'> & {\n    // G.Text style for subtitle.\n    titleAlign?: 'left' | 'center' | 'right';\n    subtitleAlign?: 'left' | 'center' | 'right';\n    /**\n     * Align method for title.\n     */\n    align?: 'left' | 'center' | 'right';\n    /**\n     * The vertical spacing between title and subtitle, default is 2.\n     */\n    spacing?: number;\n  };\n\nexport type G2ViewDescriptor = {\n  scale: Record<string, Scale>;\n  coordinate: Coordinate;\n  theme: G2Theme;\n  markState: Map<G2Mark, G2MarkState>;\n  components: G2GuideComponentOptions[];\n  layout: Layout;\n  key: string;\n  clip: boolean;\n  labelTransform: LabelTransform;\n  // @todo More accurate type.\n  style: Record<string, any>;\n  data?: Map<string, any>;\n};\n\nexport type G2ViewInstance = {\n  view: G2ViewDescriptor;\n  container: DisplayObject;\n  options: G2ViewTree;\n  update: (\n    options: G2ViewTree,\n    source?: string | string[],\n    callback?: any,\n  ) => Promise<any>;\n};\n\nexport type ChannelGroups = {\n  name?: string;\n  scaleKey?: string;\n  // @todo\n  scale?: Record<string, any>;\n  values?: {\n    name?: string;\n    value?: Primitive[];\n    field?: string;\n  }[];\n};\n\nexport type G2MarkState = {\n  index?: number[];\n  data?: Record<string, any>[];\n  channels?: ChannelGroups[];\n  tooltip?: any; // @todo\n} & Omit<MarkProps, 'channels'>;\n\nexport type MaybeArray<T> = T | T[];\n\nexport type Primitive = number | string | boolean | Date;\n\nexport type TabularData = Record<string, Primitive>[];\n\nexport type WithPrefix<O extends Record<string, any>, P extends string> = {\n  [K in keyof O as `${P}${Capitalize<K & string>}`]?: O[K];\n};\n\nexport type EncodeFunction = (\n  data: Record<string, MaybeArray<Primitive>>[],\n) => MaybeArray<Primitive>[];\n\nexport type Encoding =\n  | { type: string; [key: string]: any }\n  | Primitive\n  | ((...args: any[]) => any);\n\nexport type Encodings = Record<string | symbol, MaybeArray<Encoding>>;\n\nexport type Value = {\n  x?: number[][];\n  y?: number[][];\n  position?: number[][];\n  [key: string]: MaybeArray<Primitive>[];\n};\nexport type IndexedValue = {\n  index: number[];\n  value: Value;\n};\n\nexport type ChannelValue = MaybeArray<Primitive>[];\n\nexport type Channel = {\n  name?: string;\n  scale?: string;\n  quantitative?: string;\n  ordinal?: string;\n  scaleName?: string;\n  required?: boolean;\n  value?: Primitive[];\n  type?: string;\n  independent?: boolean;\n  field?: string | string[];\n  visual?: boolean;\n  range?: any[];\n  scaleKey?: string;\n};\n\nexport type Vector2 = [number, number];\nexport type Vector3 = [number, number, number];\n\nexport type BBox = {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n};\n\nexport type GuidePrimitivePosition =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'center'\n  | 'inner'\n  | 'outer';\nexport type GuideCompositePosition =\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right';\nexport type GuideComponentPosition =\n  | GuidePrimitivePosition\n  | GuideCompositePosition;\n\nexport type GuideComponentOrientation = 'horizontal' | 'vertical' | number;\nexport type GuideComponentPlane = 'xy' | 'xz' | 'yz';\n\nexport type Layout = {\n  paddingLeft?: number;\n  paddingRight?: number;\n  paddingBottom?: number;\n  paddingTop?: number;\n  insetLeft?: number;\n  insetRight?: number;\n  insetBottom?: number;\n  insetTop?: number;\n  width?: number;\n  height?: number;\n  innerWidth?: number;\n  innerHeight?: number;\n  margin?: number;\n  marginLeft?: number;\n  marginBottom?: number;\n  marginTop?: number;\n  marginRight?: number;\n  x?: number;\n  y?: number;\n  z?: number;\n  depth?: number;\n};\n\nexport type Direction = 'horizontal' | 'vertical' | 'center';\n\nexport type FlexLayout = {\n  flexDirection?: 'row' | 'column';\n  justifyContent?: 'flex-start' | 'flex-end' | 'center';\n  alignItems?: 'flex-start' | 'flex-end' | 'center';\n};\n\nexport type SectionArea = [\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  direction: Direction,\n  reverse: boolean,\n  comparator: (a: Primitive, b: Primitive) => number,\n  minX?: number,\n  totalWidth?: number,\n];\n\nexport type Section = Record<GuideComponentPosition, SectionArea>;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}