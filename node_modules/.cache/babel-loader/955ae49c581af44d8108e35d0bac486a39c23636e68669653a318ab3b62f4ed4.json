{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { CONFIG_SHAPE, SPECIAL_OPTIONS, TRANSFORM_OPTION_KEY, VIEW_OPTIONS } from '../constants';\nimport { deleteExcessKeys, filterTransformed, isArray, isObject, isUndefined, mergeWithArrayCoverage, omit, pick, set } from './index';\n/**\n * @title 将自定义配置转换为 G2 接受的格式\n */\nexport var transformOptions = function (params) {\n  var options = filterTransformed(params);\n  var _a = options.children,\n    children = _a === void 0 ? [] : _a;\n  var rest = omit(options, [].concat(VIEW_OPTIONS, CONFIG_SHAPE.map(function (item) {\n    return item.key;\n  })));\n  var getCustomTransform = function (key) {\n    var _a;\n    return (_a = SPECIAL_OPTIONS.find(function (option) {\n      return option.key === key;\n    })) === null || _a === void 0 ? void 0 : _a.callback;\n  };\n  /**\n   * @description 更新图表配置\n   */\n  var updateOptions = function (origin, key, value) {\n    var callback = getCustomTransform(key);\n    if (callback) {\n      callback(origin, key, value);\n    } else {\n      origin[key] = mergeWithArrayCoverage({}, origin[key], value);\n    }\n  };\n  /**\n   * @description\n   *  1. 将 CONFIG_SHAPE 中的配置项, 转换为 children\n   * @example 详见 src/core/constants/index.ts\n   */\n  var transformShape = function (config) {\n    Object.keys(config).forEach(function (key) {\n      // 判断内容是否为空\n      if (!config[key]) return;\n      var exist = CONFIG_SHAPE.find(function (item) {\n        return item.key === key;\n      });\n      if (exist) {\n        var type = exist.type,\n          extendedProperties = exist.extendedProperties,\n          _a = exist.defaultShapeConfig,\n          defaultShapeConfig = _a === void 0 ? {} : _a;\n        if (type) {\n          var tooltip = config[key].tooltip;\n          children.push(transformConfig(mergeWithArrayCoverage({}, pick(config, extendedProperties), defaultShapeConfig, {\n            type: type\n          }, config[key], {\n            tooltip: tooltip ? tooltip : false\n          })));\n        } else {\n          // annotations\n          if (isArray(config[key])) {\n            var isText_1 = config[key].some(function (item) {\n              return item.type === 'text';\n            });\n            config[key].forEach(function (annotation) {\n              children.push(transformConfig(__assign(__assign(__assign({}, isText_1 ? {\n                data: []\n              } : {}), {\n                tooltip: false\n              }), annotation)));\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\n   * @title 通用转换逻辑\n   * @description 直接修改原对象\n   */\n  var transformConfig = function (config) {\n    transformShape(config);\n    /**\n     * @description 遍历配置项，如果存在对应的映射规则，则进行转换\n     * @example 详见 src/core/constants/index.ts\n     */\n    Object.keys(TRANSFORM_OPTION_KEY).forEach(function (key) {\n      var transformTarget = TRANSFORM_OPTION_KEY[key];\n      if (!isUndefined(config[key])) {\n        if (isObject(transformTarget)) {\n          var value = transformTarget.value,\n            target = transformTarget.target;\n          var transformValue = value(config[key]);\n          updateOptions(config, target, transformValue);\n        } else {\n          set(config, transformTarget, config[key]);\n        }\n      }\n    });\n    return config;\n  };\n  children.forEach(function (child) {\n    /**\n     * 提前先 child 创造一个 config 防止 rest 被污染 和 child 数据缺失\n     * @description 外层配置应用到所有 children\n     */\n    var config = mergeWithArrayCoverage({}, rest, child);\n    transformConfig(mergeWithArrayCoverage(child, config));\n  });\n  transformShape(options);\n  deleteExcessKeys(options);\n  return params;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","CONFIG_SHAPE","SPECIAL_OPTIONS","TRANSFORM_OPTION_KEY","VIEW_OPTIONS","deleteExcessKeys","filterTransformed","isArray","isObject","isUndefined","mergeWithArrayCoverage","omit","pick","set","transformOptions","params","options","_a","children","rest","concat","map","item","key","getCustomTransform","find","option","callback","updateOptions","origin","value","transformShape","config","keys","forEach","exist","type","extendedProperties","defaultShapeConfig","tooltip","push","transformConfig","isText_1","some","annotation","data","transformTarget","target","transformValue","child"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@ant-design/plots/es/core/utils/transform.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { CONFIG_SHAPE, SPECIAL_OPTIONS, TRANSFORM_OPTION_KEY, VIEW_OPTIONS } from '../constants';\nimport { deleteExcessKeys, filterTransformed, isArray, isObject, isUndefined, mergeWithArrayCoverage, omit, pick, set, } from './index';\n/**\n * @title 将自定义配置转换为 G2 接受的格式\n */\nexport var transformOptions = function (params) {\n    var options = filterTransformed(params);\n    var _a = options.children, children = _a === void 0 ? [] : _a;\n    var rest = omit(options, [].concat(VIEW_OPTIONS, CONFIG_SHAPE.map(function (item) { return item.key; })));\n    var getCustomTransform = function (key) {\n        var _a;\n        return (_a = SPECIAL_OPTIONS.find(function (option) { return option.key === key; })) === null || _a === void 0 ? void 0 : _a.callback;\n    };\n    /**\n     * @description 更新图表配置\n     */\n    var updateOptions = function (origin, key, value) {\n        var callback = getCustomTransform(key);\n        if (callback) {\n            callback(origin, key, value);\n        }\n        else {\n            origin[key] = mergeWithArrayCoverage({}, origin[key], value);\n        }\n    };\n    /**\n     * @description\n     *  1. 将 CONFIG_SHAPE 中的配置项, 转换为 children\n     * @example 详见 src/core/constants/index.ts\n     */\n    var transformShape = function (config) {\n        Object.keys(config).forEach(function (key) {\n            // 判断内容是否为空\n            if (!config[key])\n                return;\n            var exist = CONFIG_SHAPE.find(function (item) { return item.key === key; });\n            if (exist) {\n                var type = exist.type, extendedProperties = exist.extendedProperties, _a = exist.defaultShapeConfig, defaultShapeConfig = _a === void 0 ? {} : _a;\n                if (type) {\n                    var tooltip = config[key].tooltip;\n                    children.push(transformConfig(mergeWithArrayCoverage({}, pick(config, extendedProperties), defaultShapeConfig, { type: type }, config[key], {\n                        tooltip: tooltip ? tooltip : false,\n                    })));\n                }\n                else {\n                    // annotations\n                    if (isArray(config[key])) {\n                        var isText_1 = config[key].some(function (item) { return item.type === 'text'; });\n                        config[key].forEach(function (annotation) {\n                            children.push(transformConfig(__assign(__assign(__assign({}, (isText_1 ? { data: [] } : {})), { tooltip: false }), annotation)));\n                        });\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * @title 通用转换逻辑\n     * @description 直接修改原对象\n     */\n    var transformConfig = function (config) {\n        transformShape(config);\n        /**\n         * @description 遍历配置项，如果存在对应的映射规则，则进行转换\n         * @example 详见 src/core/constants/index.ts\n         */\n        Object.keys(TRANSFORM_OPTION_KEY).forEach(function (key) {\n            var transformTarget = TRANSFORM_OPTION_KEY[key];\n            if (!isUndefined(config[key])) {\n                if (isObject(transformTarget)) {\n                    var value = transformTarget.value, target = transformTarget.target;\n                    var transformValue = value(config[key]);\n                    updateOptions(config, target, transformValue);\n                }\n                else {\n                    set(config, transformTarget, config[key]);\n                }\n            }\n        });\n        return config;\n    };\n    children.forEach(function (child) {\n        /**\n         * 提前先 child 创造一个 config 防止 rest 被污染 和 child 数据缺失\n         * @description 外层配置应用到所有 children\n         */\n        var config = mergeWithArrayCoverage({}, rest, child);\n        transformConfig(mergeWithArrayCoverage(child, config));\n    });\n    transformShape(options);\n    deleteExcessKeys(options);\n    return params;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}