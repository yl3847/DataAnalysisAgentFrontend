{"ast":null,"code":"import { VectorShape } from '../shape';\nimport { baseGeometryChannels, basePostInference, basePreInference, tooltip2d } from './utils';\nconst shape = {\n  vector: VectorShape\n};\n/**\n * Convert value for each channel to start, end.\n * The angle starts from the X axis(right direction).\n */\nexport const Vector = () => {\n  return (index, scale, value, coordinate) => {\n    const {\n      x: X,\n      y: Y,\n      size: S,\n      rotate: R\n    } = value;\n    const [width, height] = coordinate.getSize();\n    const P = index.map(i => {\n      const angle = +R[i] / 180 * Math.PI;\n      const s = +S[i];\n      const a = s / width;\n      const b = s / height;\n      const vx = a * Math.cos(angle);\n      const vy = -b * Math.sin(angle);\n      return [coordinate.map([+X[i] - vx / 2, +Y[i] - vy / 2]), coordinate.map([+X[i] + vx / 2, +Y[i] + vy / 2])];\n    });\n    return [index, P];\n  };\n};\nVector.props = {\n  defaultShape: 'vector',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [...baseGeometryChannels({\n    shapes: Object.keys(shape)\n  }), {\n    name: 'x',\n    required: true\n  }, {\n    name: 'y',\n    required: true\n  }, {\n    name: 'rotate',\n    required: true,\n    scale: 'identity'\n  }, {\n    name: 'size',\n    required: true\n  }],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference(), ...tooltip2d()]\n};","map":{"version":3,"names":["VectorShape","baseGeometryChannels","basePostInference","basePreInference","tooltip2d","shape","vector","Vector","index","scale","value","coordinate","x","X","y","Y","size","S","rotate","R","width","height","getSize","P","map","i","angle","Math","PI","s","a","b","vx","cos","vy","sin","props","defaultShape","defaultLabelShape","composite","channels","shapes","Object","keys","name","required","preInference","postInference"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/mark/vector.ts"],"sourcesContent":["import { MarkComponent as MC, Vector2 } from '../runtime';\nimport { VectorMark } from '../spec';\nimport { VectorShape } from '../shape';\nimport {\n  baseGeometryChannels,\n  basePostInference,\n  basePreInference,\n  tooltip2d,\n} from './utils';\n\nconst shape = {\n  vector: VectorShape,\n};\n\nexport type VectorOptions = Omit<VectorMark, 'type'>;\n\n/**\n * Convert value for each channel to start, end.\n * The angle starts from the X axis(right direction).\n */\nexport const Vector: MC<VectorOptions> = () => {\n  return (index, scale, value, coordinate) => {\n    const { x: X, y: Y, size: S, rotate: R } = value;\n    const [width, height] = coordinate.getSize();\n\n    const P = index.map((i) => {\n      const angle = (+R[i] / 180) * Math.PI;\n      const s = +S[i];\n      const a = s / width;\n      const b = s / height;\n\n      const vx = a * Math.cos(angle);\n      const vy = -b * Math.sin(angle);\n\n      return [\n        coordinate.map([+X[i] - vx / 2, +Y[i] - vy / 2]),\n        coordinate.map([+X[i] + vx / 2, +Y[i] + vy / 2]),\n      ] as Vector2[];\n    });\n\n    return [index, P];\n  };\n};\n\nVector.props = {\n  defaultShape: 'vector',\n  defaultLabelShape: 'label',\n  composite: false,\n  shape,\n  channels: [\n    ...baseGeometryChannels({ shapes: Object.keys(shape) }),\n    { name: 'x', required: true },\n    { name: 'y', required: true },\n    { name: 'rotate', required: true, scale: 'identity' },\n    { name: 'size', required: true },\n  ],\n  preInference: [...basePreInference()],\n  postInference: [...basePostInference(), ...tooltip2d()],\n};\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,UAAU;AACtC,SACEC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,EAChBC,SAAS,QACJ,SAAS;AAEhB,MAAMC,KAAK,GAAG;EACZC,MAAM,EAAEN;CACT;AAID;;;;AAIA,OAAO,MAAMO,MAAM,GAAsBA,CAAA,KAAK;EAC5C,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,KAAI;IACzC,MAAM;MAAEC,CAAC,EAAEC,CAAC;MAAEC,CAAC,EAAEC,CAAC;MAAEC,IAAI,EAAEC,CAAC;MAAEC,MAAM,EAAEC;IAAC,CAAE,GAAGT,KAAK;IAChD,MAAM,CAACU,KAAK,EAAEC,MAAM,CAAC,GAAGV,UAAU,CAACW,OAAO,EAAE;IAE5C,MAAMC,CAAC,GAAGf,KAAK,CAACgB,GAAG,CAAEC,CAAC,IAAI;MACxB,MAAMC,KAAK,GAAI,CAACP,CAAC,CAACM,CAAC,CAAC,GAAG,GAAG,GAAIE,IAAI,CAACC,EAAE;MACrC,MAAMC,CAAC,GAAG,CAACZ,CAAC,CAACQ,CAAC,CAAC;MACf,MAAMK,CAAC,GAAGD,CAAC,GAAGT,KAAK;MACnB,MAAMW,CAAC,GAAGF,CAAC,GAAGR,MAAM;MAEpB,MAAMW,EAAE,GAAGF,CAAC,GAAGH,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC;MAC9B,MAAMQ,EAAE,GAAG,CAACH,CAAC,GAAGJ,IAAI,CAACQ,GAAG,CAACT,KAAK,CAAC;MAE/B,OAAO,CACLf,UAAU,CAACa,GAAG,CAAC,CAAC,CAACX,CAAC,CAACY,CAAC,CAAC,GAAGO,EAAE,GAAG,CAAC,EAAE,CAACjB,CAAC,CAACU,CAAC,CAAC,GAAGS,EAAE,GAAG,CAAC,CAAC,CAAC,EAChDvB,UAAU,CAACa,GAAG,CAAC,CAAC,CAACX,CAAC,CAACY,CAAC,CAAC,GAAGO,EAAE,GAAG,CAAC,EAAE,CAACjB,CAAC,CAACU,CAAC,CAAC,GAAGS,EAAE,GAAG,CAAC,CAAC,CAAC,CACpC;IAChB,CAAC,CAAC;IAEF,OAAO,CAAC1B,KAAK,EAAEe,CAAC,CAAC;EACnB,CAAC;AACH,CAAC;AAEDhB,MAAM,CAAC6B,KAAK,GAAG;EACbC,YAAY,EAAE,QAAQ;EACtBC,iBAAiB,EAAE,OAAO;EAC1BC,SAAS,EAAE,KAAK;EAChBlC,KAAK;EACLmC,QAAQ,EAAE,CACR,GAAGvC,oBAAoB,CAAC;IAAEwC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACtC,KAAK;EAAC,CAAE,CAAC,EACvD;IAAEuC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE,EAC7B;IAAED,IAAI,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEpC,KAAK,EAAE;EAAU,CAAE,EACrD;IAAEmC,IAAI,EAAE,MAAM;IAAEC,QAAQ,EAAE;EAAI,CAAE,CACjC;EACDC,YAAY,EAAE,CAAC,GAAG3C,gBAAgB,EAAE,CAAC;EACrC4C,aAAa,EAAE,CAAC,GAAG7C,iBAAiB,EAAE,EAAE,GAAGE,SAAS,EAAE;CACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}