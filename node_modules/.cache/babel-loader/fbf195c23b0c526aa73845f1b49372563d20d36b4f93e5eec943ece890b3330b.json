{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Path } from '@antv/g';\nimport { isNumber, isString } from '@antv/util';\nimport { getPaletteColors } from '../../utils/palette';\nimport { subStyleProps } from '../../utils/prefix';\nimport { parseSize } from '../../utils/size';\nimport { mergeOptions } from '../../utils/style';\nimport { Circle } from './circle';\n/**\n * <zh/> 甜甜圈节点\n *\n * <en/> Donut node\n */\nexport class Donut extends Circle {\n  constructor(options) {\n    super(mergeOptions({\n      style: Donut.defaultStyleProps\n    }, options));\n  }\n  parseOuterR() {\n    const {\n      size\n    } = this.parsedAttributes;\n    return Math.min(...parseSize(size)) / 2;\n  }\n  parseInnerR() {\n    const {\n      innerR\n    } = this.parsedAttributes;\n    return isString(innerR) ? parseInt(innerR) / 100 * this.parseOuterR() : innerR;\n  }\n  drawDonutShape(attributes, container) {\n    const {\n      donuts\n    } = attributes;\n    if (!(donuts === null || donuts === void 0 ? void 0 : donuts.length)) return;\n    const parsedDonuts = donuts.map(round => isNumber(round) ? {\n      value: round\n    } : round);\n    const style = subStyleProps(this.getGraphicStyle(attributes), 'donut');\n    const colors = getPaletteColors(attributes.donutPalette);\n    if (!colors) return;\n    const sum = parsedDonuts.reduce((acc, cur) => {\n      var _a;\n      return acc + ((_a = cur.value) !== null && _a !== void 0 ? _a : 0);\n    }, 0);\n    const outerR = this.parseOuterR();\n    const innerR = this.parseInnerR();\n    let start = 0;\n    parsedDonuts.forEach((round, index) => {\n      const {\n          value = 0,\n          color = colors[index % colors.length]\n        } = round,\n        roundStyle = __rest(round, [\"value\", \"color\"]);\n      const angle = (sum === 0 ? 1 / parsedDonuts.length : value / sum) * 360;\n      this.upsert(`round${index}`, Path, Object.assign(Object.assign(Object.assign({}, style), {\n        d: arc(outerR, innerR, start, start + angle),\n        fill: color\n      }), roundStyle), container);\n      start += angle;\n    });\n  }\n  render(attributes, container = this) {\n    super.render(attributes, container);\n    this.drawDonutShape(attributes, container);\n  }\n}\nDonut.defaultStyleProps = {\n  innerR: '50%',\n  donuts: [],\n  donutPalette: 'tableau'\n};\nconst point = (x, y, r, angel) => [x + Math.sin(angel) * r, y - Math.cos(angel) * r];\nconst full = (x, y, R, r) => {\n  if (r <= 0 || R <= r) {\n    return [['M', x - R, y], ['A', R, R, 0, 1, 1, x + R, y], ['A', R, R, 0, 1, 1, x - R, y], ['Z']];\n  }\n  return [['M', x - R, y], ['A', R, R, 0, 1, 1, x + R, y], ['A', R, R, 0, 1, 1, x - R, y], ['Z'], ['M', x + r, y], ['A', r, r, 0, 1, 0, x - r, y], ['A', r, r, 0, 1, 0, x + r, y], ['Z']];\n};\nconst part = (x, y, R, r, start, end) => {\n  const [s, e] = [start / 360 * 2 * Math.PI, end / 360 * 2 * Math.PI];\n  const P = [point(x, y, r, s), point(x, y, R, s), point(x, y, R, e), point(x, y, r, e)];\n  const flag = e - s > Math.PI ? 1 : 0;\n  return [['M', P[0][0], P[0][1]], ['L', P[1][0], P[1][1]], ['A', R, R, 0, flag, 1, P[2][0], P[2][1]], ['L', P[3][0], P[3][1]], ['A', r, r, 0, flag, 0, P[0][0], P[0][1]], ['Z']];\n};\nconst arc = (R = 0, r = 0, start, end) => {\n  const [x, y] = [0, 0];\n  if (Math.abs(start - end) % 360 < 0.000001) return full(x, y, R, r);\n  return part(x, y, R, r, start, end);\n};","map":{"version":3,"names":["Path","isNumber","isString","getPaletteColors","subStyleProps","parseSize","mergeOptions","Circle","Donut","constructor","options","style","defaultStyleProps","parseOuterR","size","parsedAttributes","Math","min","parseInnerR","innerR","parseInt","drawDonutShape","attributes","container","donuts","length","parsedDonuts","map","round","value","getGraphicStyle","colors","donutPalette","sum","reduce","acc","cur","_a","outerR","start","forEach","index","color","roundStyle","__rest","angle","upsert","Object","assign","d","arc","fill","render","point","x","y","r","angel","sin","cos","full","R","part","end","s","e","PI","P","flag","abs"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g6/src/elements/nodes/donut.ts"],"sourcesContent":["import { Path } from '@antv/g';\nimport { isNumber, isString } from '@antv/util';\nimport { getPaletteColors } from '../../utils/palette';\nimport { subStyleProps } from '../../utils/prefix';\nimport { parseSize } from '../../utils/size';\nimport { mergeOptions } from '../../utils/style';\nimport { Circle } from './circle';\n\nimport type { BaseStyleProps, DisplayObjectConfig, Group } from '@antv/g';\nimport type { PathArray } from '@antv/util';\nimport type { CategoricalPalette } from '../../palettes/types';\nimport type { DonutRound, Prefix } from '../../types';\nimport type { CircleStyleProps } from './circle';\n\n/**\n * <zh/> 甜甜圈节点样式配置项\n *\n * <en/> Donut node style props\n */\nexport interface DonutStyleProps extends CircleStyleProps, Prefix<'donut', BaseStyleProps> {\n  /**\n   * <zh/> 内环半径，使用百分比或者像素值\n   *\n   * <en/> Inner ring radius, using percentage or pixel value.\n   * @defaultValue '50%'\n   */\n  innerR?: string | number;\n  /**\n   * <zh/> 圆环数据\n   *\n   * <en/> Donut data.\n   */\n  donuts?: number[] | DonutRound[];\n  /**\n   * <zh/> 颜色或者色板名\n   *\n   * <en/> Color or palette.\n   * @defaultValue 'tableau'\n   */\n  donutPalette?: string | CategoricalPalette;\n}\n\n/**\n * <zh/> 甜甜圈节点\n *\n * <en/> Donut node\n */\nexport class Donut extends Circle {\n  static defaultStyleProps: Partial<DonutStyleProps> = {\n    innerR: '50%',\n    donuts: [],\n    donutPalette: 'tableau',\n  };\n\n  constructor(options: DisplayObjectConfig<DonutStyleProps>) {\n    super(mergeOptions({ style: Donut.defaultStyleProps }, options));\n  }\n\n  private parseOuterR() {\n    const { size } = this.parsedAttributes as Required<DonutStyleProps>;\n    return Math.min(...parseSize(size)) / 2;\n  }\n\n  private parseInnerR() {\n    const { innerR } = this.parsedAttributes as Required<DonutStyleProps>;\n    return isString(innerR) ? (parseInt(innerR) / 100) * this.parseOuterR() : innerR;\n  }\n\n  protected drawDonutShape(attributes: Required<DonutStyleProps>, container: Group): void {\n    const { donuts } = attributes;\n    if (!donuts?.length) return;\n\n    const parsedDonuts = donuts.map((round) => (isNumber(round) ? { value: round } : round) as DonutRound);\n\n    const style = subStyleProps<BaseStyleProps>(this.getGraphicStyle(attributes), 'donut');\n\n    const colors = getPaletteColors(attributes.donutPalette);\n    if (!colors) return;\n\n    const sum = parsedDonuts.reduce((acc, cur) => acc + (cur.value ?? 0), 0);\n    const outerR = this.parseOuterR();\n    const innerR = this.parseInnerR();\n\n    let start = 0;\n    parsedDonuts.forEach((round, index) => {\n      const { value = 0, color = colors[index % colors.length], ...roundStyle } = round;\n      const angle = (sum === 0 ? 1 / parsedDonuts.length : value / sum) * 360;\n\n      this.upsert(\n        `round${index}`,\n        Path,\n        {\n          ...style,\n          d: arc(outerR, innerR, start, start + angle),\n          fill: color,\n          ...roundStyle,\n        },\n        container,\n      );\n\n      start += angle;\n    });\n  }\n\n  public render(attributes: Required<DonutStyleProps>, container: Group = this) {\n    super.render(attributes, container);\n    this.drawDonutShape(attributes, container);\n  }\n}\n\nconst point = (x: number, y: number, r: number, angel: number) => [x + Math.sin(angel) * r, y - Math.cos(angel) * r];\n\nconst full = (x: number, y: number, R: number, r: number): PathArray => {\n  if (r <= 0 || R <= r) {\n    return [['M', x - R, y], ['A', R, R, 0, 1, 1, x + R, y], ['A', R, R, 0, 1, 1, x - R, y], ['Z']];\n  }\n  return [\n    ['M', x - R, y],\n    ['A', R, R, 0, 1, 1, x + R, y],\n    ['A', R, R, 0, 1, 1, x - R, y],\n    ['Z'],\n    ['M', x + r, y],\n    ['A', r, r, 0, 1, 0, x - r, y],\n    ['A', r, r, 0, 1, 0, x + r, y],\n    ['Z'],\n  ];\n};\n\nconst part = (x: number, y: number, R: number, r: number, start: number, end: number): PathArray => {\n  const [s, e] = [(start / 360) * 2 * Math.PI, (end / 360) * 2 * Math.PI];\n  const P = [point(x, y, r, s), point(x, y, R, s), point(x, y, R, e), point(x, y, r, e)];\n  const flag = e - s > Math.PI ? 1 : 0;\n  return [\n    ['M', P[0][0], P[0][1]],\n    ['L', P[1][0], P[1][1]],\n    ['A', R, R, 0, flag, 1, P[2][0], P[2][1]],\n    ['L', P[3][0], P[3][1]],\n    ['A', r, r, 0, flag, 0, P[0][0], P[0][1]],\n    ['Z'],\n  ];\n};\n\nconst arc = (R = 0, r = 0, start: number, end: number): PathArray => {\n  const [x, y] = [0, 0];\n  if (Math.abs(start - end) % 360 < 0.000001) return full(x, y, R, r);\n  return part(x, y, R, r, start, end);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}