{"ast":null,"code":"export function isEmpty(obj) {\n  return !obj || Object.keys(obj).length === 0;\n}\n/**\n * Collapses (or “folds”) one or more data fields into two\n * properties: `key` (contains the original data field name)\n * and `value` (contains the original data value.)\n */\nexport const Fold = options => {\n  const {\n    fields,\n    key = 'key',\n    value = 'value'\n  } = options;\n  return data => {\n    if (isEmpty(fields)) return data;\n    return data.flatMap(d => fields.map(f => Object.assign(Object.assign({}, d), {\n      [key]: f,\n      [value]: d[f]\n    })));\n  };\n};\nFold.props = {};","map":{"version":3,"names":["isEmpty","obj","Object","keys","length","Fold","options","fields","key","value","data","flatMap","d","map","f","assign","props"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/g2/src/data/fold.ts"],"sourcesContent":["import { DataComponent as DC } from '../runtime';\nimport { FoldTransform } from '../spec';\n\nexport function isEmpty(obj: any) {\n  return !obj || Object.keys(obj).length === 0;\n}\n\nexport type FoldOptions = Omit<FoldTransform, 'type'>;\n\n/**\n * Collapses (or “folds”) one or more data fields into two\n * properties: `key` (contains the original data field name)\n * and `value` (contains the original data value.)\n */\nexport const Fold: DC<FoldOptions> = (options) => {\n  const { fields, key = 'key', value = 'value' } = options;\n  return (data) => {\n    if (isEmpty(fields)) return data;\n    return data.flatMap((d) =>\n      fields.map((f) => ({ ...d, [key]: f, [value]: d[f] })),\n    );\n  };\n};\n\nFold.props = {};\n"],"mappings":"AAGA,OAAM,SAAUA,OAAOA,CAACC,GAAQ;EAC9B,OAAO,CAACA,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,KAAK,CAAC;AAC9C;AAIA;;;;;AAKA,OAAO,MAAMC,IAAI,GAAqBC,OAAO,IAAI;EAC/C,MAAM;IAAEC,MAAM;IAAEC,GAAG,GAAG,KAAK;IAAEC,KAAK,GAAG;EAAO,CAAE,GAAGH,OAAO;EACxD,OAAQI,IAAI,IAAI;IACd,IAAIV,OAAO,CAACO,MAAM,CAAC,EAAE,OAAOG,IAAI;IAChC,OAAOA,IAAI,CAACC,OAAO,CAAEC,CAAC,IACpBL,MAAM,CAACM,GAAG,CAAEC,CAAC,IAAKZ,MAAA,CAAAa,MAAA,CAAAb,MAAA,CAAAa,MAAA,KAAMH,CAAC;MAAE,CAACJ,GAAG,GAAGM,CAAC;MAAE,CAACL,KAAK,GAAGG,CAAC,CAACE,CAAC;IAAC,EAAG,CAAC,CACvD;EACH,CAAC;AACH,CAAC;AAEDT,IAAI,CAACW,KAAK,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}