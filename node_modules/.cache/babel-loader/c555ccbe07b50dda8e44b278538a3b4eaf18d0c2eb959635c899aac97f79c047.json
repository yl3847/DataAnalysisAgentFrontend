{"ast":null,"code":"import { distanceSquareRoot } from './distance-square-root';\n/**\n * Returns the {x,y} coordinates of a point at a\n * given length of a quadratic-bezier segment.\n *\n * @see https://github.com/substack/point-at-length\n */\nfunction getPointAtQuadSegmentLength(x1, y1, cx, cy, x2, y2, t) {\n  var t1 = 1 - t;\n  return {\n    x: Math.pow(t1, 2) * x1 + 2 * t1 * t * cx + Math.pow(t, 2) * x2,\n    y: Math.pow(t1, 2) * y1 + 2 * t1 * t * cy + Math.pow(t, 2) * y2\n  };\n}\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a Q (quadratic-bezier) segment.\n */\nexport function segmentQuadFactory(x1, y1, qx, qy, x2, y2, distance, options) {\n  var _a;\n  var _b = options.bbox,\n    bbox = _b === void 0 ? true : _b,\n    _c = options.length,\n    length = _c === void 0 ? true : _c,\n    _d = options.sampleSize,\n    sampleSize = _d === void 0 ? 10 : _d;\n  var distanceIsNumber = typeof distance === 'number';\n  var x = x1;\n  var y = y1;\n  var LENGTH = 0;\n  var prev = [x, y, LENGTH];\n  var cur = [x, y];\n  var t = 0;\n  var POINT = {\n    x: 0,\n    y: 0\n  };\n  var POINTS = [{\n    x: x,\n    y: y\n  }];\n  if (distanceIsNumber && distance <= 0) {\n    POINT = {\n      x: x,\n      y: y\n    };\n  }\n  for (var j = 0; j <= sampleSize; j += 1) {\n    t = j / sampleSize;\n    _a = getPointAtQuadSegmentLength(x1, y1, qx, qy, x2, y2, t), x = _a.x, y = _a.y;\n    if (bbox) {\n      POINTS.push({\n        x: x,\n        y: y\n      });\n    }\n    if (length) {\n      LENGTH += distanceSquareRoot(cur, [x, y]);\n    }\n    cur = [x, y];\n    if (distanceIsNumber && LENGTH >= distance && distance > prev[2]) {\n      var dv = (LENGTH - distance) / (LENGTH - prev[2]);\n      POINT = {\n        x: cur[0] * (1 - dv) + prev[0] * dv,\n        y: cur[1] * (1 - dv) + prev[1] * dv\n      };\n    }\n    prev = [x, y, LENGTH];\n  }\n  /* istanbul ignore else */\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = {\n      x: x2,\n      y: y2\n    };\n  }\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min.apply(null, POINTS.map(function (n) {\n        return n.x;\n      })),\n      y: Math.min.apply(null, POINTS.map(function (n) {\n        return n.y;\n      }))\n    },\n    max: {\n      x: Math.max.apply(null, POINTS.map(function (n) {\n        return n.x;\n      })),\n      y: Math.max.apply(null, POINTS.map(function (n) {\n        return n.y;\n      }))\n    }\n  };\n}","map":{"version":3,"names":["distanceSquareRoot","getPointAtQuadSegmentLength","x1","y1","cx","cy","x2","y2","t","t1","x","Math","pow","y","segmentQuadFactory","qx","qy","distance","options","_b","bbox","_c","length","_d","sampleSize","distanceIsNumber","LENGTH","prev","cur","POINT","POINTS","j","_a","push","dv","point","min","apply","map","n","max"],"sources":["/Users/yizelu/Desktop/mcp/frontend/node_modules/@antv/util/src/path/util/segment-quad-factory.ts"],"sourcesContent":["import type { LengthFactory, PathLengthFactoryOptions } from '../types';\nimport { distanceSquareRoot } from './distance-square-root';\n\n/**\n * Returns the {x,y} coordinates of a point at a\n * given length of a quadratic-bezier segment.\n *\n * @see https://github.com/substack/point-at-length\n */\nfunction getPointAtQuadSegmentLength(\n  x1: number,\n  y1: number,\n  cx: number,\n  cy: number,\n  x2: number,\n  y2: number,\n  t: number,\n) {\n  const t1 = 1 - t;\n  return {\n    x: t1 ** 2 * x1 + 2 * t1 * t * cx + t ** 2 * x2,\n    y: t1 ** 2 * y1 + 2 * t1 * t * cy + t ** 2 * y2,\n  };\n}\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a Q (quadratic-bezier) segment.\n */\nexport function segmentQuadFactory(\n  x1: number,\n  y1: number,\n  qx: number,\n  qy: number,\n  x2: number,\n  y2: number,\n  distance: number,\n  options: Partial<PathLengthFactoryOptions>,\n): LengthFactory {\n  const { bbox = true, length = true, sampleSize = 10 } = options;\n  const distanceIsNumber = typeof distance === 'number';\n  let x = x1;\n  let y = y1;\n  let LENGTH = 0;\n  let prev = [x, y, LENGTH];\n  let cur: [number, number] = [x, y];\n  let t = 0;\n  let POINT = { x: 0, y: 0 };\n  const POINTS = [{ x, y }];\n\n  if (distanceIsNumber && distance <= 0) {\n    POINT = { x, y };\n  }\n\n  for (let j = 0; j <= sampleSize; j += 1) {\n    t = j / sampleSize;\n\n    ({ x, y } = getPointAtQuadSegmentLength(x1, y1, qx, qy, x2, y2, t));\n\n    if (bbox) {\n      POINTS.push({ x, y });\n    }\n\n    if (length) {\n      LENGTH += distanceSquareRoot(cur, [x, y]);\n    }\n    cur = [x, y];\n\n    if (distanceIsNumber && LENGTH >= distance && distance > prev[2]) {\n      const dv = (LENGTH - distance) / (LENGTH - prev[2]);\n\n      POINT = {\n        x: cur[0] * (1 - dv) + prev[0] * dv,\n        y: cur[1] * (1 - dv) + prev[1] * dv,\n      };\n    }\n    prev = [x, y, LENGTH];\n  }\n\n  /* istanbul ignore else */\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = { x: x2, y: y2 };\n  }\n\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min.apply(\n        null,\n        POINTS.map((n) => n.x),\n      ),\n      y: Math.min.apply(\n        null,\n        POINTS.map((n) => n.y),\n      ),\n    },\n    max: {\n      x: Math.max.apply(\n        null,\n        POINTS.map((n) => n.x),\n      ),\n      y: Math.max.apply(\n        null,\n        POINTS.map((n) => n.y),\n      ),\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}